<?php
/**
 * IdpApi
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Api;

use \Acronis\Cloud\Client\ApiClient;
use \Acronis\Cloud\Client\HttpException;
use \Acronis\Cloud\Client\HttpResponse;
use \Acronis\Cloud\Client\Configuration;
use \Acronis\Cloud\Client\ObjectSerializer;

/**
 * IdpApi Class Doc Comment
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IdpApi
{
    /**
     * API Client
     *
     * @var \Acronis\Cloud\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     */
    public function __construct(ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return IdpApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getIdpAuthorize
     *
     * IdpAuthorize
     *
     * @param string $scope must contain &#39;scope&#39; and, optionally, other values separated by spaces (required)
     * @param string $client_id OAuth 2.0 Client Identifier (required)
     * @param string $redirect_uri redirection URI to which the response will be sent (required)
     * @param string $response_type corresponds to OpenID Connect 1.0 or OAuth 2.0 Authorization Flows, our IdP currently supports only Authorization Code Flow (optional)
     * @param string $state opaque value, which client can use to maintain state between the request and the response callback (optional)
     * @param string $prompt space delimited, case sensitive list of string values that specifies whether the IdP prompts the user for reauthentication and consent; our IdP currently supports only the value below (optional)
     * @param string $id_token_hint ID token previously issued by IdP being passed as a hint about the user current or past authenticated session (optional)
     * @param string $login_hint Hint to the IdP Server about the login identifier the End-User might use to log in (optional)
     * @throws \Acronis\Cloud\Client\ApiException on non-2xx response
     * @return HttpResponse
     */
    public function getIdpAuthorize($scope, $client_id, $redirect_uri, $response_type = null, $state = null, $prompt = null, $id_token_hint = null, $login_hint = null)
    {
        // verify the required parameter 'scope' is set
        if ($scope === null) {
            throw new \InvalidArgumentException('Missing the required parameter $scope when calling getIdpAuthorize');
        }
        if (!preg_match("/^(\\w+ )*(openid|\\w)( +\\w+)*$/", $scope)) {
            throw new \InvalidArgumentException("invalid value for \"scope\" when calling IdpApi.getIdpAuthorize, must conform to the pattern /^(\\w+ )*(openid|\\w)( +\\w+)*$/.");
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling getIdpAuthorize');
        }
        // verify the required parameter 'redirect_uri' is set
        if ($redirect_uri === null) {
            throw new \InvalidArgumentException('Missing the required parameter $redirect_uri when calling getIdpAuthorize');
        }
        // parse inputs
        $resourcePath = "/idp/authorize";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($scope !== null) {
            $queryParams['scope'] = $this->apiClient->getSerializer()->toQueryValue($scope);
        }
        // query params
        if ($response_type !== null) {
            $queryParams['response_type'] = $this->apiClient->getSerializer()->toQueryValue($response_type);
        }
        // query params
        if ($client_id !== null) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($client_id);
        }
        // query params
        if ($redirect_uri !== null) {
            $queryParams['redirect_uri'] = $this->apiClient->getSerializer()->toQueryValue($redirect_uri);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($prompt !== null) {
            $queryParams['prompt'] = $this->apiClient->getSerializer()->toQueryValue($prompt);
        }
        // query params
        if ($id_token_hint !== null) {
            $queryParams['id_token_hint'] = $this->apiClient->getSerializer()->toQueryValue($id_token_hint);
        }
        // query params
        if ($login_hint !== null) {
            $queryParams['login_hint'] = $this->apiClient->getSerializer()->toQueryValue($login_hint);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/idp/authorize'
            );

            return new HttpResponse($statusCode, $httpHeader, $this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader));
        } catch (HttpException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getIdpExternalLogin
     *
     * IdpExternalLogin
     *
     * @throws \Acronis\Cloud\Client\ApiException on non-2xx response
     * @return HttpResponse
     */
    public function getIdpExternalLogin()
    {
        // parse inputs
        $resourcePath = "/idp/external-login";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/idp/external-login'
            );

            return new HttpResponse($statusCode, $httpHeader, $this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader));
        } catch (HttpException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getIdpKeys
     *
     * IdpKeys
     *
     * @throws \Acronis\Cloud\Client\ApiException on non-2xx response
     * @return HttpResponse
     */
    public function getIdpKeys()
    {
        // parse inputs
        $resourcePath = "/idp/keys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Acronis\Cloud\Client\Model\Idp\Jwks',
                '/idp/keys'
            );

            return new HttpResponse($statusCode, $httpHeader, $this->apiClient->getSerializer()->deserialize($response, '\Acronis\Cloud\Client\Model\Idp\Jwks', $httpHeader));
        } catch (HttpException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Idp\Jwks', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getIdpLogout
     *
     * IdpLogout
     *
     * @throws \Acronis\Cloud\Client\ApiException on non-2xx response
     * @return HttpResponse
     */
    public function getIdpLogout()
    {
        // parse inputs
        $resourcePath = "/idp/logout";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/idp/logout'
            );

            return new HttpResponse($statusCode, $httpHeader, $this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader));
        } catch (HttpException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postIdpOtt
     *
     * IdpOtt
     *
     * @param \Acronis\Cloud\Client\Model\Idp\OttPost $body  (required)
     * @throws \Acronis\Cloud\Client\ApiException on non-2xx response
     * @return HttpResponse
     */
    public function postIdpOtt($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postIdpOtt');
        }
        // parse inputs
        $resourcePath = "/idp/ott";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Acronis\Cloud\Client\Model\Idp\OttLoginPost',
                '/idp/ott'
            );

            return new HttpResponse($statusCode, $httpHeader, $this->apiClient->getSerializer()->deserialize($response, '\Acronis\Cloud\Client\Model\Idp\OttLoginPost', $httpHeader));
        } catch (HttpException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Idp\OttLoginPost', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postIdpOttLogin
     *
     * IdpOttLogin
     *
     * @param \Acronis\Cloud\Client\Model\Idp\OttLoginPost $body  (required)
     * @throws \Acronis\Cloud\Client\ApiException on non-2xx response
     * @return HttpResponse
     */
    public function postIdpOttLogin($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postIdpOttLogin');
        }
        // parse inputs
        $resourcePath = "/idp/ott/login";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Acronis\Cloud\Client\Model\Users\User',
                '/idp/ott/login'
            );

            return new HttpResponse($statusCode, $httpHeader, $this->apiClient->getSerializer()->deserialize($response, '\Acronis\Cloud\Client\Model\Users\User', $httpHeader));
        } catch (HttpException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Users\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Common\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postIdpToken
     *
     * IdpToken
     *
     * @param string $grant_type the only always-required parameter; &#39;password&#39; grant_type implements https://tools.ietf.org/html/rfc6749#section-4.3, &#39;authorization_code&#39;, &#39;refresh_token&#39; and &#39;client_credentials&#39; grant_type&#39;s implement http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint &#39;urn:ietf:params:oauth:grant-type:device_code&#39; grant type implements https://tools.ietf.org/html/draft-ietf-oauth-device-flow-07 (available only in Backup Account Server) &#39;urn:ietf:params:oauth:grant-type:jwt-bearer&#39; grant type implements https://tools.ietf.org/html/rfc7523 (available only in Backup Account Server) (required)
     * @param string $client_id required for grant_type&#x3D;&#39;password&#39; and for grant_type&#x3D;&#39;urn:ietf:params:oauth:grant-type:device_code&#39;, not required for other grant_type values (optional)
     * @param string $username required for &#39;password&#39; grant_type (optional)
     * @param string $password required for &#39;password&#39; grant_type (optional)
     * @param string $refresh_token required for &#39;refresh_token&#39; grant_type (optional)
     * @param string $code required for &#39;authorization_code&#39; grant_type (optional)
     * @param string $scope Not used for &#39;authorization_code&#39;. Optional for all other supported grant types. (optional)
     * @param string $assertion required for &#39;urn:ietf:params:oauth:grant-type:jwt-bearer&#39; grant type (optional)
     * @param string $device_code required for &#39;urn:ietf:params:oauth:grant-type:device_code&#39; grant type (optional)
     * @param string $totp_code used with grant_type&#x3D;password when TOTP authentication is required (optional)
     * @throws \Acronis\Cloud\Client\ApiException on non-2xx response
     * @return HttpResponse
     */
    public function postIdpToken($grant_type, $client_id = null, $username = null, $password = null, $refresh_token = null, $code = null, $scope = null, $assertion = null, $device_code = null, $totp_code = null)
    {
        // verify the required parameter 'grant_type' is set
        if ($grant_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $grant_type when calling postIdpToken');
        }
        // parse inputs
        $resourcePath = "/idp/token";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = $this->apiClient->getSerializer()->toFormValue($grant_type);
        }
        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = $this->apiClient->getSerializer()->toFormValue($client_id);
        }
        // form params
        if ($username !== null) {
            $formParams['username'] = $this->apiClient->getSerializer()->toFormValue($username);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = $this->apiClient->getSerializer()->toFormValue($password);
        }
        // form params
        if ($refresh_token !== null) {
            $formParams['refresh_token'] = $this->apiClient->getSerializer()->toFormValue($refresh_token);
        }
        // form params
        if ($code !== null) {
            $formParams['code'] = $this->apiClient->getSerializer()->toFormValue($code);
        }
        // form params
        if ($scope !== null) {
            $formParams['scope'] = $this->apiClient->getSerializer()->toFormValue($scope);
        }
        // form params
        if ($assertion !== null) {
            $formParams['assertion'] = $this->apiClient->getSerializer()->toFormValue($assertion);
        }
        // form params
        if ($device_code !== null) {
            $formParams['device_code'] = $this->apiClient->getSerializer()->toFormValue($device_code);
        }
        // form params
        if ($totp_code !== null) {
            $formParams['totp_code'] = $this->apiClient->getSerializer()->toFormValue($totp_code);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Acronis\Cloud\Client\Model\Idp\Token',
                '/idp/token'
            );

            return new HttpResponse($statusCode, $httpHeader, $this->apiClient->getSerializer()->deserialize($response, '\Acronis\Cloud\Client\Model\Idp\Token', $httpHeader));
        } catch (HttpException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Idp\Token', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Idp\DeviceCode400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Idp\DeviceCode400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Acronis\Cloud\Client\Model\Idp\DeviceCode400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
