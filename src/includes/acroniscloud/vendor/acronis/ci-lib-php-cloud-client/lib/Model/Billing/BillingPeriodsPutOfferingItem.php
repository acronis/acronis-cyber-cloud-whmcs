<?php
/**
 * BillingPeriodsPutOfferingItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Billing;

use Acronis\Cloud\Client\BaseModel;
/**
 * BillingPeriodsPutOfferingItem Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BillingPeriodsPutOfferingItem extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Billing\BillingPeriodsPutOfferingItem';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'application_id' => 'string',
            'infra_component_id' => 'string',
            'infra_component_type' => 'string',
            'name' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'application_id' => null,
            'infra_component_id' => null,
            'infra_component_type' => null,
            'name' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'application_id' => 'application_id',
            'infra_component_id' => 'infra_component_id',
            'infra_component_type' => 'infra_component_type',
            'name' => 'name'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'application_id' => 'setApplicationId',
            'infra_component_id' => 'setInfraComponentId',
            'infra_component_type' => 'setInfraComponentType',
            'name' => 'setName'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'application_id' => 'getApplicationId',
            'infra_component_id' => 'getInfraComponentId',
            'infra_component_type' => 'getInfraComponentType',
            'name' => 'getName'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'application_id' => 'hasApplicationId',
            'infra_component_id' => 'hasInfraComponentId',
            'infra_component_type' => 'hasInfraComponentType',
            'name' => 'hasName'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'application_id' => 'validateApplicationId',
            'infra_component_id' => 'validateInfraComponentId',
            'infra_component_type' => 'validateInfraComponentType',
            'name' => 'validateName'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateApplicationId())) {
            $invalid_properties[] = $this->validateApplicationId();
        }
        if (!empty($this->validateInfraComponentId())) {
            $invalid_properties[] = $this->validateInfraComponentId();
        }
        if (!empty($this->validateInfraComponentType())) {
            $invalid_properties[] = $this->validateInfraComponentType();
        }
        if (!empty($this->validateName())) {
            $invalid_properties[] = $this->validateName();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateApplicationId())) {
            return false;
        }
        if (!empty($this->validateInfraComponentId())) {
            return false;
        }
        if (!empty($this->validateInfraComponentType())) {
            return false;
        }
        if (!empty($this->validateName())) {
            return false;
        }
        return true;
    }


    /**
     * Gets application_id
     * @return string
     */
    public function getApplicationId()
    {
        return $this->offsetGet('application_id');
    }

    /**
     * Checks application_id
     * @return boolean
     */
    public function hasApplicationId()
    {
        return $this->offsetExists('application_id');
    }

    /**
     * Sets application_id
     * @param string $application_id
     * @return $this
     */
    public function setApplicationId($application_id)
    {
        if ((strlen($application_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $application_id when calling BillingPeriodsPutOfferingItem., must be smaller than or equal to 36.');
        }
        if ((strlen($application_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $application_id when calling BillingPeriodsPutOfferingItem., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $application_id))) {
            throw new \InvalidArgumentException("invalid value for $application_id when calling BillingPeriodsPutOfferingItem., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('application_id', $application_id);

        return $this;
    }

    /**
     * Unset application_id
     */
    public function unsetApplicationId() {
        $this->offsetUnset('application_id');
    }

    /**
     * Valid application_id
     * @return array|boolean
     */
    public function validateApplicationId()
    {
        if (!$this->offsetExists('application_id')) {
            return "Property 'application_id' was not initialized.";
        }
            if ($this->offsetExists('application_id') && strlen($this->offsetGet('application_id')) > 36) {
                return "invalid value for 'application_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('application_id') && strlen($this->offsetGet('application_id')) < 36) {
                return "invalid value for 'application_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('application_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('application_id'))) {
                return "invalid value for 'application_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets infra_component_id
     * @return string
     */
    public function getInfraComponentId()
    {
        return $this->offsetGet('infra_component_id');
    }

    /**
     * Checks infra_component_id
     * @return boolean
     */
    public function hasInfraComponentId()
    {
        return $this->offsetExists('infra_component_id');
    }

    /**
     * Sets infra_component_id
     * @param string $infra_component_id
     * @return $this
     */
    public function setInfraComponentId($infra_component_id)
    {
        if (!is_null($infra_component_id) && (strlen($infra_component_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $infra_component_id when calling BillingPeriodsPutOfferingItem., must be smaller than or equal to 36.');
        }
        if (!is_null($infra_component_id) && (strlen($infra_component_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $infra_component_id when calling BillingPeriodsPutOfferingItem., must be bigger than or equal to 36.');
        }
        if (!is_null($infra_component_id) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $infra_component_id))) {
            throw new \InvalidArgumentException("invalid value for $infra_component_id when calling BillingPeriodsPutOfferingItem., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('infra_component_id', $infra_component_id);

        return $this;
    }

    /**
     * Unset infra_component_id
     */
    public function unsetInfraComponentId() {
        $this->offsetUnset('infra_component_id');
    }

    /**
     * Valid infra_component_id
     * @return array|boolean
     */
    public function validateInfraComponentId()
    {
        if (!$this->offsetExists('infra_component_id')) {
            return false;
        }
            if ($this->offsetExists('infra_component_id') && strlen($this->offsetGet('infra_component_id')) > 36) {
                return "invalid value for 'infra_component_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('infra_component_id') && strlen($this->offsetGet('infra_component_id')) < 36) {
                return "invalid value for 'infra_component_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('infra_component_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('infra_component_id'))) {
                return "invalid value for 'infra_component_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets infra_component_type
     * @return string
     */
    public function getInfraComponentType()
    {
        return $this->offsetGet('infra_component_type');
    }

    /**
     * Checks infra_component_type
     * @return boolean
     */
    public function hasInfraComponentType()
    {
        return $this->offsetExists('infra_component_type');
    }

    /**
     * Sets infra_component_type
     * @param string $infra_component_type Infrastructure component type
     * @return $this
     */
    public function setInfraComponentType($infra_component_type)
    {
        $this->offsetSet('infra_component_type', $infra_component_type);

        return $this;
    }

    /**
     * Unset infra_component_type
     */
    public function unsetInfraComponentType() {
        $this->offsetUnset('infra_component_type');
    }

    /**
     * Valid infra_component_type
     * @return array|boolean
     */
    public function validateInfraComponentType()
    {
        if (!$this->offsetExists('infra_component_type')) {
            return false;
        }
        return false;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->offsetGet('name');
    }

    /**
     * Checks name
     * @return boolean
     */
    public function hasName()
    {
        return $this->offsetExists('name');
    }

    /**
     * Sets name
     * @param string $name Usage name (type)
     * @return $this
     */
    public function setName($name)
    {
        $this->offsetSet('name', $name);

        return $this;
    }

    /**
     * Unset name
     */
    public function unsetName() {
        $this->offsetUnset('name');
    }

    /**
     * Valid name
     * @return array|boolean
     */
    public function validateName()
    {
        if (!$this->offsetExists('name')) {
            return "Property 'name' was not initialized.";
        }
        return false;
    }

}


