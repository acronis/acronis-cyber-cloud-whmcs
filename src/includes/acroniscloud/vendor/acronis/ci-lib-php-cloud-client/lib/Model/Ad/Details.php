<?php
/**
 * Details
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Ad;

use Acronis\Cloud\Client\BaseModel;
/**
 * Details Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Details extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Ad\Details';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'search_contexts' => 'object'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'search_contexts' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'search_contexts' => 'search_contexts'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'search_contexts' => 'setSearchContexts'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'search_contexts' => 'getSearchContexts'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'search_contexts' => 'hasSearchContexts'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'search_contexts' => 'validateSearchContexts'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateSearchContexts())) {
            $invalid_properties[] = $this->validateSearchContexts();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateSearchContexts())) {
            return false;
        }
        return true;
    }


    /**
     * Gets search_contexts
     * @return object
     */
    public function getSearchContexts()
    {
        return $this->offsetGet('search_contexts');
    }

    /**
     * Checks search_contexts
     * @return boolean
     */
    public function hasSearchContexts()
    {
        return $this->offsetExists('search_contexts');
    }

    /**
     * Sets search_contexts
     * @param object $search_contexts List of contexts that can be used in search
     * @return $this
     */
    public function setSearchContexts($search_contexts)
    {
        $this->offsetSet('search_contexts', $search_contexts);

        return $this;
    }

    /**
     * Unset search_contexts
     */
    public function unsetSearchContexts() {
        $this->offsetUnset('search_contexts');
    }

    /**
     * Valid search_contexts
     * @return array|boolean
     */
    public function validateSearchContexts()
    {
        if (!$this->offsetExists('search_contexts')) {
            return false;
        }
        return false;
    }

}


