<?php
/**
 * UserLoginInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Users;

use Acronis\Cloud\Client\BaseModel;
/**
 * UserLoginInfo Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserLoginInfo extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Users\UserLoginInfo';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'password_expiration' => '\Acronis\Cloud\Client\Model\Users\UserLoginInfoPasswordExpiration',
            'last_login' => '\Acronis\Cloud\Client\Model\Users\UserLoginInfoLastLogin'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'password_expiration' => null,
            'last_login' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'password_expiration' => 'password_expiration',
            'last_login' => 'last_login'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'password_expiration' => 'setPasswordExpiration',
            'last_login' => 'setLastLogin'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'password_expiration' => 'getPasswordExpiration',
            'last_login' => 'getLastLogin'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'password_expiration' => 'hasPasswordExpiration',
            'last_login' => 'hasLastLogin'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'password_expiration' => 'validatePasswordExpiration',
            'last_login' => 'validateLastLogin'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validatePasswordExpiration())) {
            $invalid_properties[] = $this->validatePasswordExpiration();
        }
        if (!empty($this->validateLastLogin())) {
            $invalid_properties[] = $this->validateLastLogin();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validatePasswordExpiration())) {
            return false;
        }
        if (!empty($this->validateLastLogin())) {
            return false;
        }
        return true;
    }


    /**
     * Gets password_expiration
     * @return \Acronis\Cloud\Client\Model\Users\UserLoginInfoPasswordExpiration
     */
    public function getPasswordExpiration()
    {
        return $this->offsetGet('password_expiration');
    }

    /**
     * Checks password_expiration
     * @return boolean
     */
    public function hasPasswordExpiration()
    {
        return $this->offsetExists('password_expiration');
    }

    /**
     * Sets password_expiration
     * @param \Acronis\Cloud\Client\Model\Users\UserLoginInfoPasswordExpiration $password_expiration
     * @return $this
     */
    public function setPasswordExpiration($password_expiration)
    {
        $this->offsetSet('password_expiration', $password_expiration);

        return $this;
    }

    /**
     * Unset password_expiration
     */
    public function unsetPasswordExpiration() {
        $this->offsetUnset('password_expiration');
    }

    /**
     * Valid password_expiration
     * @return array|boolean
     */
    public function validatePasswordExpiration()
    {
        if (!$this->offsetExists('password_expiration')) {
            return "Property 'password_expiration' was not initialized.";
        }
        return false;
    }


    /**
     * Gets last_login
     * @return \Acronis\Cloud\Client\Model\Users\UserLoginInfoLastLogin
     */
    public function getLastLogin()
    {
        return $this->offsetGet('last_login');
    }

    /**
     * Checks last_login
     * @return boolean
     */
    public function hasLastLogin()
    {
        return $this->offsetExists('last_login');
    }

    /**
     * Sets last_login
     * @param \Acronis\Cloud\Client\Model\Users\UserLoginInfoLastLogin $last_login
     * @return $this
     */
    public function setLastLogin($last_login)
    {
        $this->offsetSet('last_login', $last_login);

        return $this;
    }

    /**
     * Unset last_login
     */
    public function unsetLastLogin() {
        $this->offsetUnset('last_login');
    }

    /**
     * Valid last_login
     * @return array|boolean
     */
    public function validateLastLogin()
    {
        if (!$this->offsetExists('last_login')) {
            return "Property 'last_login' was not initialized.";
        }
        return false;
    }

}


