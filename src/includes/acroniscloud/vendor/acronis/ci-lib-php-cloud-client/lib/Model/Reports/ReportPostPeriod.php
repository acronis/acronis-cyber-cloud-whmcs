<?php
/**
 * ReportPostPeriod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Reports;

use Acronis\Cloud\Client\BaseModel;
/**
 * ReportPostPeriod Class Doc Comment
 *
 * @category    Class
 * @description Report period
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReportPostPeriod extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Reports\ReportPostPeriod';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'start' => 'string',
            'end' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'start' => null,
            'end' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'start' => 'start',
            'end' => 'end'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'start' => 'setStart',
            'end' => 'setEnd'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'start' => 'getStart',
            'end' => 'getEnd'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'start' => 'hasStart',
            'end' => 'hasEnd'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'start' => 'validateStart',
            'end' => 'validateEnd'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateStart())) {
            $invalid_properties[] = $this->validateStart();
        }
        if (!empty($this->validateEnd())) {
            $invalid_properties[] = $this->validateEnd();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateStart())) {
            return false;
        }
        if (!empty($this->validateEnd())) {
            return false;
        }
        return true;
    }


    /**
     * Gets start
     * @return string
     */
    public function getStart()
    {
        return $this->offsetGet('start');
    }

    /**
     * Checks start
     * @return boolean
     */
    public function hasStart()
    {
        return $this->offsetExists('start');
    }

    /**
     * Sets start
     * @param string $start Formatted date: YYYY-MM-DD
     * @return $this
     */
    public function setStart($start)
    {
        if ((strlen($start) > 10)) {
            throw new \InvalidArgumentException('invalid length for $start when calling ReportPostPeriod., must be smaller than or equal to 10.');
        }
        if ((strlen($start) < 10)) {
            throw new \InvalidArgumentException('invalid length for $start when calling ReportPostPeriod., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}/", $start))) {
            throw new \InvalidArgumentException("invalid value for $start when calling ReportPostPeriod., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}/.");
        }

        $this->offsetSet('start', $start);

        return $this;
    }

    /**
     * Unset start
     */
    public function unsetStart() {
        $this->offsetUnset('start');
    }

    /**
     * Valid start
     * @return array|boolean
     */
    public function validateStart()
    {
        if (!$this->offsetExists('start')) {
            return "Property 'start' was not initialized.";
        }
            if ($this->offsetExists('start') && strlen($this->offsetGet('start')) > 10) {
                return "invalid value for 'start', the character length must be smaller than or equal to 10.";
            }
            if ($this->offsetExists('start') && strlen($this->offsetGet('start')) < 10) {
                return "invalid value for 'start', the character length must be bigger than or equal to 10.";
            }
            if ($this->offsetExists('start') && !preg_match("/\\d{4}-\\d{2}-\\d{2}/", $this->offsetGet('start'))) {
                return "invalid value for 'start', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}/.";
            }
        return false;
    }


    /**
     * Gets end
     * @return string
     */
    public function getEnd()
    {
        return $this->offsetGet('end');
    }

    /**
     * Checks end
     * @return boolean
     */
    public function hasEnd()
    {
        return $this->offsetExists('end');
    }

    /**
     * Sets end
     * @param string $end Formatted date: YYYY-MM-DD
     * @return $this
     */
    public function setEnd($end)
    {
        if ((strlen($end) > 10)) {
            throw new \InvalidArgumentException('invalid length for $end when calling ReportPostPeriod., must be smaller than or equal to 10.');
        }
        if ((strlen($end) < 10)) {
            throw new \InvalidArgumentException('invalid length for $end when calling ReportPostPeriod., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}/", $end))) {
            throw new \InvalidArgumentException("invalid value for $end when calling ReportPostPeriod., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}/.");
        }

        $this->offsetSet('end', $end);

        return $this;
    }

    /**
     * Unset end
     */
    public function unsetEnd() {
        $this->offsetUnset('end');
    }

    /**
     * Valid end
     * @return array|boolean
     */
    public function validateEnd()
    {
        if (!$this->offsetExists('end')) {
            return "Property 'end' was not initialized.";
        }
            if ($this->offsetExists('end') && strlen($this->offsetGet('end')) > 10) {
                return "invalid value for 'end', the character length must be smaller than or equal to 10.";
            }
            if ($this->offsetExists('end') && strlen($this->offsetGet('end')) < 10) {
                return "invalid value for 'end', the character length must be bigger than or equal to 10.";
            }
            if ($this->offsetExists('end') && !preg_match("/\\d{4}-\\d{2}-\\d{2}/", $this->offsetGet('end'))) {
                return "invalid value for 'end', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}/.";
            }
        return false;
    }

}


