<?php
/**
 * UsageOutput
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Usages;

use Acronis\Cloud\Client\BaseModel;
/**
 * UsageOutput Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UsageOutput extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Usages\UsageOutput';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'application_id' => 'string',
            'name' => 'string',
            'edition' => 'string',
            'usage_name' => 'string',
            'type' => 'string',
            'measurement_unit' => 'string',
            'infra_id' => 'string',
            'range_start' => 'string',
            'absolute_value' => 'double',
            'value' => 'double',
            'offering_item' => '\Acronis\Cloud\Client\Model\Usages\UsageOutputOfferingItem'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'application_id' => null,
            'name' => null,
            'edition' => null,
            'usage_name' => null,
            'type' => null,
            'measurement_unit' => null,
            'infra_id' => null,
            'range_start' => null,
            'absolute_value' => 'double',
            'value' => 'double',
            'offering_item' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'application_id' => 'application_id',
            'name' => 'name',
            'edition' => 'edition',
            'usage_name' => 'usage_name',
            'type' => 'type',
            'measurement_unit' => 'measurement_unit',
            'infra_id' => 'infra_id',
            'range_start' => 'range_start',
            'absolute_value' => 'absolute_value',
            'value' => 'value',
            'offering_item' => 'offering_item'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'application_id' => 'setApplicationId',
            'name' => 'setName',
            'edition' => 'setEdition',
            'usage_name' => 'setUsageName',
            'type' => 'setType',
            'measurement_unit' => 'setMeasurementUnit',
            'infra_id' => 'setInfraId',
            'range_start' => 'setRangeStart',
            'absolute_value' => 'setAbsoluteValue',
            'value' => 'setValue',
            'offering_item' => 'setOfferingItem'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'application_id' => 'getApplicationId',
            'name' => 'getName',
            'edition' => 'getEdition',
            'usage_name' => 'getUsageName',
            'type' => 'getType',
            'measurement_unit' => 'getMeasurementUnit',
            'infra_id' => 'getInfraId',
            'range_start' => 'getRangeStart',
            'absolute_value' => 'getAbsoluteValue',
            'value' => 'getValue',
            'offering_item' => 'getOfferingItem'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'application_id' => 'hasApplicationId',
            'name' => 'hasName',
            'edition' => 'hasEdition',
            'usage_name' => 'hasUsageName',
            'type' => 'hasType',
            'measurement_unit' => 'hasMeasurementUnit',
            'infra_id' => 'hasInfraId',
            'range_start' => 'hasRangeStart',
            'absolute_value' => 'hasAbsoluteValue',
            'value' => 'hasValue',
            'offering_item' => 'hasOfferingItem'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'application_id' => 'validateApplicationId',
            'name' => 'validateName',
            'edition' => 'validateEdition',
            'usage_name' => 'validateUsageName',
            'type' => 'validateType',
            'measurement_unit' => 'validateMeasurementUnit',
            'infra_id' => 'validateInfraId',
            'range_start' => 'validateRangeStart',
            'absolute_value' => 'validateAbsoluteValue',
            'value' => 'validateValue',
            'offering_item' => 'validateOfferingItem'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateApplicationId())) {
            $invalid_properties[] = $this->validateApplicationId();
        }
        if (!empty($this->validateName())) {
            $invalid_properties[] = $this->validateName();
        }
        if (!empty($this->validateEdition())) {
            $invalid_properties[] = $this->validateEdition();
        }
        if (!empty($this->validateUsageName())) {
            $invalid_properties[] = $this->validateUsageName();
        }
        if (!empty($this->validateType())) {
            $invalid_properties[] = $this->validateType();
        }
        if (!empty($this->validateMeasurementUnit())) {
            $invalid_properties[] = $this->validateMeasurementUnit();
        }
        if (!empty($this->validateInfraId())) {
            $invalid_properties[] = $this->validateInfraId();
        }
        if (!empty($this->validateRangeStart())) {
            $invalid_properties[] = $this->validateRangeStart();
        }
        if (!empty($this->validateAbsoluteValue())) {
            $invalid_properties[] = $this->validateAbsoluteValue();
        }
        if (!empty($this->validateValue())) {
            $invalid_properties[] = $this->validateValue();
        }
        if (!empty($this->validateOfferingItem())) {
            $invalid_properties[] = $this->validateOfferingItem();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateApplicationId())) {
            return false;
        }
        if (!empty($this->validateName())) {
            return false;
        }
        if (!empty($this->validateEdition())) {
            return false;
        }
        if (!empty($this->validateUsageName())) {
            return false;
        }
        if (!empty($this->validateType())) {
            return false;
        }
        if (!empty($this->validateMeasurementUnit())) {
            return false;
        }
        if (!empty($this->validateInfraId())) {
            return false;
        }
        if (!empty($this->validateRangeStart())) {
            return false;
        }
        if (!empty($this->validateAbsoluteValue())) {
            return false;
        }
        if (!empty($this->validateValue())) {
            return false;
        }
        if (!empty($this->validateOfferingItem())) {
            return false;
        }
        return true;
    }


    /**
     * Gets application_id
     * @return string
     */
    public function getApplicationId()
    {
        return $this->offsetGet('application_id');
    }

    /**
     * Checks application_id
     * @return boolean
     */
    public function hasApplicationId()
    {
        return $this->offsetExists('application_id');
    }

    /**
     * Sets application_id
     * @param string $application_id
     * @return $this
     */
    public function setApplicationId($application_id)
    {
        if ((strlen($application_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $application_id when calling UsageOutput., must be smaller than or equal to 36.');
        }
        if ((strlen($application_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $application_id when calling UsageOutput., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $application_id))) {
            throw new \InvalidArgumentException("invalid value for $application_id when calling UsageOutput., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('application_id', $application_id);

        return $this;
    }

    /**
     * Unset application_id
     */
    public function unsetApplicationId() {
        $this->offsetUnset('application_id');
    }

    /**
     * Valid application_id
     * @return array|boolean
     */
    public function validateApplicationId()
    {
        if (!$this->offsetExists('application_id')) {
            return "Property 'application_id' was not initialized.";
        }
            if ($this->offsetExists('application_id') && strlen($this->offsetGet('application_id')) > 36) {
                return "invalid value for 'application_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('application_id') && strlen($this->offsetGet('application_id')) < 36) {
                return "invalid value for 'application_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('application_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('application_id'))) {
                return "invalid value for 'application_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->offsetGet('name');
    }

    /**
     * Checks name
     * @return boolean
     */
    public function hasName()
    {
        return $this->offsetExists('name');
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->offsetSet('name', $name);

        return $this;
    }

    /**
     * Unset name
     */
    public function unsetName() {
        $this->offsetUnset('name');
    }

    /**
     * Valid name
     * @return array|boolean
     */
    public function validateName()
    {
        if (!$this->offsetExists('name')) {
            return "Property 'name' was not initialized.";
        }
        return false;
    }


    /**
     * Gets edition
     * @return string
     */
    public function getEdition()
    {
        return $this->offsetGet('edition');
    }

    /**
     * Checks edition
     * @return boolean
     */
    public function hasEdition()
    {
        return $this->offsetExists('edition');
    }

    /**
     * Sets edition
     * @param string $edition
     * @return $this
     */
    public function setEdition($edition)
    {
        $this->offsetSet('edition', $edition);

        return $this;
    }

    /**
     * Unset edition
     */
    public function unsetEdition() {
        $this->offsetUnset('edition');
    }

    /**
     * Valid edition
     * @return array|boolean
     */
    public function validateEdition()
    {
        if (!$this->offsetExists('edition')) {
            return "Property 'edition' was not initialized.";
        }
        return false;
    }


    /**
     * Gets usage_name
     * @return string
     */
    public function getUsageName()
    {
        return $this->offsetGet('usage_name');
    }

    /**
     * Checks usage_name
     * @return boolean
     */
    public function hasUsageName()
    {
        return $this->offsetExists('usage_name');
    }

    /**
     * Sets usage_name
     * @param string $usage_name
     * @return $this
     */
    public function setUsageName($usage_name)
    {
        $this->offsetSet('usage_name', $usage_name);

        return $this;
    }

    /**
     * Unset usage_name
     */
    public function unsetUsageName() {
        $this->offsetUnset('usage_name');
    }

    /**
     * Valid usage_name
     * @return array|boolean
     */
    public function validateUsageName()
    {
        if (!$this->offsetExists('usage_name')) {
            return "Property 'usage_name' was not initialized.";
        }
        return false;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->offsetGet('type');
    }

    /**
     * Checks type
     * @return boolean
     */
    public function hasType()
    {
        return $this->offsetExists('type');
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->offsetSet('type', $type);

        return $this;
    }

    /**
     * Unset type
     */
    public function unsetType() {
        $this->offsetUnset('type');
    }

    /**
     * Valid type
     * @return array|boolean
     */
    public function validateType()
    {
        if (!$this->offsetExists('type')) {
            return "Property 'type' was not initialized.";
        }
        return false;
    }


    /**
     * Gets measurement_unit
     * @return string
     */
    public function getMeasurementUnit()
    {
        return $this->offsetGet('measurement_unit');
    }

    /**
     * Checks measurement_unit
     * @return boolean
     */
    public function hasMeasurementUnit()
    {
        return $this->offsetExists('measurement_unit');
    }

    /**
     * Sets measurement_unit
     * @param string $measurement_unit Measurement unit in which offering item's usages are kept (e.g.: 'bytes', 'quantity', 'seconds', 'n/a')
     * @return $this
     */
    public function setMeasurementUnit($measurement_unit)
    {
        $this->offsetSet('measurement_unit', $measurement_unit);

        return $this;
    }

    /**
     * Unset measurement_unit
     */
    public function unsetMeasurementUnit() {
        $this->offsetUnset('measurement_unit');
    }

    /**
     * Valid measurement_unit
     * @return array|boolean
     */
    public function validateMeasurementUnit()
    {
        if (!$this->offsetExists('measurement_unit')) {
            return "Property 'measurement_unit' was not initialized.";
        }
        return false;
    }


    /**
     * Gets infra_id
     * @return string
     */
    public function getInfraId()
    {
        return $this->offsetGet('infra_id');
    }

    /**
     * Checks infra_id
     * @return boolean
     */
    public function hasInfraId()
    {
        return $this->offsetExists('infra_id');
    }

    /**
     * Sets infra_id
     * @param string $infra_id
     * @return $this
     */
    public function setInfraId($infra_id)
    {
        if (!is_null($infra_id) && (strlen($infra_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $infra_id when calling UsageOutput., must be smaller than or equal to 36.');
        }
        if (!is_null($infra_id) && (strlen($infra_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $infra_id when calling UsageOutput., must be bigger than or equal to 36.');
        }
        if (!is_null($infra_id) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $infra_id))) {
            throw new \InvalidArgumentException("invalid value for $infra_id when calling UsageOutput., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('infra_id', $infra_id);

        return $this;
    }

    /**
     * Unset infra_id
     */
    public function unsetInfraId() {
        $this->offsetUnset('infra_id');
    }

    /**
     * Valid infra_id
     * @return array|boolean
     */
    public function validateInfraId()
    {
        if (!$this->offsetExists('infra_id')) {
            return false;
        }
            if ($this->offsetExists('infra_id') && strlen($this->offsetGet('infra_id')) > 36) {
                return "invalid value for 'infra_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('infra_id') && strlen($this->offsetGet('infra_id')) < 36) {
                return "invalid value for 'infra_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('infra_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('infra_id'))) {
                return "invalid value for 'infra_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets range_start
     * @return string
     */
    public function getRangeStart()
    {
        return $this->offsetGet('range_start');
    }

    /**
     * Checks range_start
     * @return boolean
     */
    public function hasRangeStart()
    {
        return $this->offsetExists('range_start');
    }

    /**
     * Sets range_start
     * @param string $range_start RFC3339 Formatted date
     * @return $this
     */
    public function setRangeStart($range_start)
    {
        if ((strlen($range_start) > 32)) {
            throw new \InvalidArgumentException('invalid length for $range_start when calling UsageOutput., must be smaller than or equal to 32.');
        }
        if ((strlen($range_start) < 19)) {
            throw new \InvalidArgumentException('invalid length for $range_start when calling UsageOutput., must be bigger than or equal to 19.');
        }
        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $range_start))) {
            throw new \InvalidArgumentException("invalid value for $range_start when calling UsageOutput., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.");
        }

        $this->offsetSet('range_start', $range_start);

        return $this;
    }

    /**
     * Unset range_start
     */
    public function unsetRangeStart() {
        $this->offsetUnset('range_start');
    }

    /**
     * Valid range_start
     * @return array|boolean
     */
    public function validateRangeStart()
    {
        if (!$this->offsetExists('range_start')) {
            return "Property 'range_start' was not initialized.";
        }
            if ($this->offsetExists('range_start') && strlen($this->offsetGet('range_start')) > 32) {
                return "invalid value for 'range_start', the character length must be smaller than or equal to 32.";
            }
            if ($this->offsetExists('range_start') && strlen($this->offsetGet('range_start')) < 19) {
                return "invalid value for 'range_start', the character length must be bigger than or equal to 19.";
            }
            if ($this->offsetExists('range_start') && !preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $this->offsetGet('range_start'))) {
                return "invalid value for 'range_start', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.";
            }
        return false;
    }


    /**
     * Gets absolute_value
     * @return double
     */
    public function getAbsoluteValue()
    {
        return $this->offsetGet('absolute_value');
    }

    /**
     * Checks absolute_value
     * @return boolean
     */
    public function hasAbsoluteValue()
    {
        return $this->offsetExists('absolute_value');
    }

    /**
     * Sets absolute_value
     * @param double $absolute_value
     * @return $this
     */
    public function setAbsoluteValue($absolute_value)
    {

        if (!is_null($absolute_value) && ($absolute_value < 0)) {
            // uncomment after fix PLTFRM-247
            // throw new \InvalidArgumentException('invalid value for $absolute_value when calling UsageOutput., must be bigger than or equal to 0.');
            $absolute_value = 0;
        }

        $this->offsetSet('absolute_value', $absolute_value);

        return $this;
    }

    /**
     * Unset absolute_value
     */
    public function unsetAbsoluteValue() {
        $this->offsetUnset('absolute_value');
    }

    /**
     * Valid absolute_value
     * @return array|boolean
     */
    public function validateAbsoluteValue()
    {
        if (!$this->offsetExists('absolute_value')) {
            return false;
        }
            if ($this->offsetExists('absolute_value') && $this->offsetGet('absolute_value') < 0) {
                // uncomment after fix PLTFRM-247
                // return "invalid value for 'absolute_value', must be bigger than or equal to 0.";
                return false;
            }
        return false;
    }


    /**
     * Gets value
     * @return double
     */
    public function getValue()
    {
        return $this->offsetGet('value');
    }

    /**
     * Checks value
     * @return boolean
     */
    public function hasValue()
    {
        return $this->offsetExists('value');
    }

    /**
     * Sets value
     * @param double $value
     * @return $this
     */
    public function setValue($value)
    {

        if (($value < 0)) {
            // uncomment after fix PLTFRM-247
            // throw new \InvalidArgumentException('invalid value for $value when calling UsageOutput., must be bigger than or equal to 0.');
            $value = 0;
        }

        $this->offsetSet('value', $value);

        return $this;
    }

    /**
     * Unset value
     */
    public function unsetValue() {
        $this->offsetUnset('value');
    }

    /**
     * Valid value
     * @return array|boolean
     */
    public function validateValue()
    {
        if (!$this->offsetExists('value')) {
            return "Property 'value' was not initialized.";
        }
            if ($this->offsetExists('value') && $this->offsetGet('value') < 0) {
                // uncomment after fix PLTFRM-247
                // return "invalid value for 'value', must be bigger than or equal to 0.";
                return false;
            }
        return false;
    }


    /**
     * Gets offering_item
     * @return \Acronis\Cloud\Client\Model\Usages\UsageOutputOfferingItem
     */
    public function getOfferingItem()
    {
        return $this->offsetGet('offering_item');
    }

    /**
     * Checks offering_item
     * @return boolean
     */
    public function hasOfferingItem()
    {
        return $this->offsetExists('offering_item');
    }

    /**
     * Sets offering_item
     * @param \Acronis\Cloud\Client\Model\Usages\UsageOutputOfferingItem $offering_item
     * @return $this
     */
    public function setOfferingItem($offering_item)
    {
        $this->offsetSet('offering_item', $offering_item);

        return $this;
    }

    /**
     * Unset offering_item
     */
    public function unsetOfferingItem() {
        $this->offsetUnset('offering_item');
    }

    /**
     * Valid offering_item
     * @return array|boolean
     */
    public function validateOfferingItem()
    {
        if (!$this->offsetExists('offering_item')) {
            return false;
        }
        return false;
    }

}


