<?php
/**
 * OttPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Idp;

use Acronis\Cloud\Client\BaseModel;
/**
 * OttPost Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OttPost extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Idp\OttPost';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'purpose' => 'string',
            'login' => 'string',
            'external_id' => 'string',
            'audit_data' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'purpose' => null,
            'login' => null,
            'external_id' => null,
            'audit_data' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'purpose' => 'purpose',
            'login' => 'login',
            'external_id' => 'external_id',
            'audit_data' => 'audit_data'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'purpose' => 'setPurpose',
            'login' => 'setLogin',
            'external_id' => 'setExternalId',
            'audit_data' => 'setAuditData'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'purpose' => 'getPurpose',
            'login' => 'getLogin',
            'external_id' => 'getExternalId',
            'audit_data' => 'getAuditData'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'purpose' => 'hasPurpose',
            'login' => 'hasLogin',
            'external_id' => 'hasExternalId',
            'audit_data' => 'hasAuditData'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'purpose' => 'validatePurpose',
            'login' => 'validateLogin',
            'external_id' => 'validateExternalId',
            'audit_data' => 'validateAuditData'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validatePurpose())) {
            $invalid_properties[] = $this->validatePurpose();
        }
        if (!empty($this->validateLogin())) {
            $invalid_properties[] = $this->validateLogin();
        }
        if (!empty($this->validateExternalId())) {
            $invalid_properties[] = $this->validateExternalId();
        }
        if (!empty($this->validateAuditData())) {
            $invalid_properties[] = $this->validateAuditData();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validatePurpose())) {
            return false;
        }
        if (!empty($this->validateLogin())) {
            return false;
        }
        if (!empty($this->validateExternalId())) {
            return false;
        }
        if (!empty($this->validateAuditData())) {
            return false;
        }
        return true;
    }


    /**
     * Gets purpose
     * @return string
     */
    public function getPurpose()
    {
        return $this->offsetGet('purpose');
    }

    /**
     * Checks purpose
     * @return boolean
     */
    public function hasPurpose()
    {
        return $this->offsetExists('purpose');
    }

    /**
     * Sets purpose
     * @param string $purpose Purposes of one-time tokens
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->offsetSet('purpose', $purpose);

        return $this;
    }

    /**
     * Unset purpose
     */
    public function unsetPurpose() {
        $this->offsetUnset('purpose');
    }

    /**
     * Valid purpose
     * @return array|boolean
     */
    public function validatePurpose()
    {
        if (!$this->offsetExists('purpose')) {
            return "Property 'purpose' was not initialized.";
        }
        return false;
    }


    /**
     * Gets login
     * @return string
     */
    public function getLogin()
    {
        return $this->offsetGet('login');
    }

    /**
     * Checks login
     * @return boolean
     */
    public function hasLogin()
    {
        return $this->offsetExists('login');
    }

    /**
     * Sets login
     * @param string $login
     * @return $this
     */
    public function setLogin($login)
    {
        $this->offsetSet('login', $login);

        return $this;
    }

    /**
     * Unset login
     */
    public function unsetLogin() {
        $this->offsetUnset('login');
    }

    /**
     * Valid login
     * @return array|boolean
     */
    public function validateLogin()
    {
        if (!$this->offsetExists('login')) {
            return false;
        }
        return false;
    }


    /**
     * Gets external_id
     * @return string
     */
    public function getExternalId()
    {
        return $this->offsetGet('external_id');
    }

    /**
     * Checks external_id
     * @return boolean
     */
    public function hasExternalId()
    {
        return $this->offsetExists('external_id');
    }

    /**
     * Sets external_id
     * @param string $external_id
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->offsetSet('external_id', $external_id);

        return $this;
    }

    /**
     * Unset external_id
     */
    public function unsetExternalId() {
        $this->offsetUnset('external_id');
    }

    /**
     * Valid external_id
     * @return array|boolean
     */
    public function validateExternalId()
    {
        if (!$this->offsetExists('external_id')) {
            return false;
        }
        return false;
    }


    /**
     * Gets audit_data
     * @return string
     */
    public function getAuditData()
    {
        return $this->offsetGet('audit_data');
    }

    /**
     * Checks audit_data
     * @return boolean
     */
    public function hasAuditData()
    {
        return $this->offsetExists('audit_data');
    }

    /**
     * Sets audit_data
     * @param string $audit_data
     * @return $this
     */
    public function setAuditData($audit_data)
    {
        $this->offsetSet('audit_data', $audit_data);

        return $this;
    }

    /**
     * Unset audit_data
     */
    public function unsetAuditData() {
        $this->offsetUnset('audit_data');
    }

    /**
     * Valid audit_data
     * @return array|boolean
     */
    public function validateAuditData()
    {
        if (!$this->offsetExists('audit_data')) {
            return false;
        }
        return false;
    }

}


