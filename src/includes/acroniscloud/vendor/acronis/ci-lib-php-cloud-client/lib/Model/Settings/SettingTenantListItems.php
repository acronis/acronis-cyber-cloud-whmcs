<?php
/**
 * SettingTenantListItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Settings;

use Acronis\Cloud\Client\BaseModel;
/**
 * SettingTenantListItems Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SettingTenantListItems extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Settings\SettingTenantListItems';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'tenant' => 'string',
            'settings' => '\Acronis\Cloud\Client\Model\Settings\Setting[]'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'tenant' => null,
            'settings' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'tenant' => 'tenant',
            'settings' => 'settings'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'tenant' => 'setTenant',
            'settings' => 'setSettings'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'tenant' => 'getTenant',
            'settings' => 'getSettings'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'tenant' => 'hasTenant',
            'settings' => 'hasSettings'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'tenant' => 'validateTenant',
            'settings' => 'validateSettings'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateTenant())) {
            $invalid_properties[] = $this->validateTenant();
        }
        if (!empty($this->validateSettings())) {
            $invalid_properties[] = $this->validateSettings();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateTenant())) {
            return false;
        }
        if (!empty($this->validateSettings())) {
            return false;
        }
        return true;
    }


    /**
     * Gets tenant
     * @return string
     */
    public function getTenant()
    {
        return $this->offsetGet('tenant');
    }

    /**
     * Checks tenant
     * @return boolean
     */
    public function hasTenant()
    {
        return $this->offsetExists('tenant');
    }

    /**
     * Sets tenant
     * @param string $tenant
     * @return $this
     */
    public function setTenant($tenant)
    {
        if ((strlen($tenant) > 36)) {
            throw new \InvalidArgumentException('invalid length for $tenant when calling SettingTenantListItems., must be smaller than or equal to 36.');
        }
        if ((strlen($tenant) < 36)) {
            throw new \InvalidArgumentException('invalid length for $tenant when calling SettingTenantListItems., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $tenant))) {
            throw new \InvalidArgumentException("invalid value for $tenant when calling SettingTenantListItems., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('tenant', $tenant);

        return $this;
    }

    /**
     * Unset tenant
     */
    public function unsetTenant() {
        $this->offsetUnset('tenant');
    }

    /**
     * Valid tenant
     * @return array|boolean
     */
    public function validateTenant()
    {
        if (!$this->offsetExists('tenant')) {
            return "Property 'tenant' was not initialized.";
        }
            if ($this->offsetExists('tenant') && strlen($this->offsetGet('tenant')) > 36) {
                return "invalid value for 'tenant', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('tenant') && strlen($this->offsetGet('tenant')) < 36) {
                return "invalid value for 'tenant', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('tenant') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('tenant'))) {
                return "invalid value for 'tenant', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets settings
     * @return \Acronis\Cloud\Client\Model\Settings\Setting[]
     */
    public function getSettings()
    {
        return $this->offsetGet('settings');
    }

    /**
     * Checks settings
     * @return boolean
     */
    public function hasSettings()
    {
        return $this->offsetExists('settings');
    }

    /**
     * Sets settings
     * @param \Acronis\Cloud\Client\Model\Settings\Setting[] $settings
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->offsetSet('settings', $settings);

        return $this;
    }

    /**
     * Unset settings
     */
    public function unsetSettings() {
        $this->offsetUnset('settings');
    }

    /**
     * Valid settings
     * @return array|boolean
     */
    public function validateSettings()
    {
        if (!$this->offsetExists('settings')) {
            return "Property 'settings' was not initialized.";
        }
        return false;
    }

}


