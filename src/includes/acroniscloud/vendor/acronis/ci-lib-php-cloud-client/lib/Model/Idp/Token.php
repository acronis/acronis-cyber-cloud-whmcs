<?php
/**
 * Token
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Idp;

use Acronis\Cloud\Client\BaseModel;
/**
 * Token Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Token extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Idp\Token';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'access_token' => 'string',
            'token_type' => 'string',
            'expires_on' => 'int',
            'id_token' => 'string',
            'refresh_token' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'access_token' => null,
            'token_type' => null,
            'expires_on' => 'int32',
            'id_token' => null,
            'refresh_token' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'access_token' => 'access_token',
            'token_type' => 'token_type',
            'expires_on' => 'expires_on',
            'id_token' => 'id_token',
            'refresh_token' => 'refresh_token'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'access_token' => 'setAccessToken',
            'token_type' => 'setTokenType',
            'expires_on' => 'setExpiresOn',
            'id_token' => 'setIdToken',
            'refresh_token' => 'setRefreshToken'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'access_token' => 'getAccessToken',
            'token_type' => 'getTokenType',
            'expires_on' => 'getExpiresOn',
            'id_token' => 'getIdToken',
            'refresh_token' => 'getRefreshToken'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'access_token' => 'hasAccessToken',
            'token_type' => 'hasTokenType',
            'expires_on' => 'hasExpiresOn',
            'id_token' => 'hasIdToken',
            'refresh_token' => 'hasRefreshToken'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'access_token' => 'validateAccessToken',
            'token_type' => 'validateTokenType',
            'expires_on' => 'validateExpiresOn',
            'id_token' => 'validateIdToken',
            'refresh_token' => 'validateRefreshToken'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateAccessToken())) {
            $invalid_properties[] = $this->validateAccessToken();
        }
        if (!empty($this->validateTokenType())) {
            $invalid_properties[] = $this->validateTokenType();
        }
        if (!empty($this->validateExpiresOn())) {
            $invalid_properties[] = $this->validateExpiresOn();
        }
        if (!empty($this->validateIdToken())) {
            $invalid_properties[] = $this->validateIdToken();
        }
        if (!empty($this->validateRefreshToken())) {
            $invalid_properties[] = $this->validateRefreshToken();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateAccessToken())) {
            return false;
        }
        if (!empty($this->validateTokenType())) {
            return false;
        }
        if (!empty($this->validateExpiresOn())) {
            return false;
        }
        if (!empty($this->validateIdToken())) {
            return false;
        }
        if (!empty($this->validateRefreshToken())) {
            return false;
        }
        return true;
    }


    /**
     * Gets access_token
     * @return string
     */
    public function getAccessToken()
    {
        return $this->offsetGet('access_token');
    }

    /**
     * Checks access_token
     * @return boolean
     */
    public function hasAccessToken()
    {
        return $this->offsetExists('access_token');
    }

    /**
     * Sets access_token
     * @param string $access_token
     * @return $this
     */
    public function setAccessToken($access_token)
    {
        $this->offsetSet('access_token', $access_token);

        return $this;
    }

    /**
     * Unset access_token
     */
    public function unsetAccessToken() {
        $this->offsetUnset('access_token');
    }

    /**
     * Valid access_token
     * @return array|boolean
     */
    public function validateAccessToken()
    {
        if (!$this->offsetExists('access_token')) {
            return "Property 'access_token' was not initialized.";
        }
        return false;
    }


    /**
     * Gets token_type
     * @return string
     */
    public function getTokenType()
    {
        return $this->offsetGet('token_type');
    }

    /**
     * Checks token_type
     * @return boolean
     */
    public function hasTokenType()
    {
        return $this->offsetExists('token_type');
    }

    /**
     * Sets token_type
     * @param string $token_type
     * @return $this
     */
    public function setTokenType($token_type)
    {
        $this->offsetSet('token_type', $token_type);

        return $this;
    }

    /**
     * Unset token_type
     */
    public function unsetTokenType() {
        $this->offsetUnset('token_type');
    }

    /**
     * Valid token_type
     * @return array|boolean
     */
    public function validateTokenType()
    {
        if (!$this->offsetExists('token_type')) {
            return "Property 'token_type' was not initialized.";
        }
        return false;
    }


    /**
     * Gets expires_on
     * @return int
     */
    public function getExpiresOn()
    {
        return $this->offsetGet('expires_on');
    }

    /**
     * Checks expires_on
     * @return boolean
     */
    public function hasExpiresOn()
    {
        return $this->offsetExists('expires_on');
    }

    /**
     * Sets expires_on
     * @param int $expires_on
     * @return $this
     */
    public function setExpiresOn($expires_on)
    {
        $this->offsetSet('expires_on', $expires_on);

        return $this;
    }

    /**
     * Unset expires_on
     */
    public function unsetExpiresOn() {
        $this->offsetUnset('expires_on');
    }

    /**
     * Valid expires_on
     * @return array|boolean
     */
    public function validateExpiresOn()
    {
        if (!$this->offsetExists('expires_on')) {
            return false;
        }
        return false;
    }


    /**
     * Gets id_token
     * @return string
     */
    public function getIdToken()
    {
        return $this->offsetGet('id_token');
    }

    /**
     * Checks id_token
     * @return boolean
     */
    public function hasIdToken()
    {
        return $this->offsetExists('id_token');
    }

    /**
     * Sets id_token
     * @param string $id_token
     * @return $this
     */
    public function setIdToken($id_token)
    {
        $this->offsetSet('id_token', $id_token);

        return $this;
    }

    /**
     * Unset id_token
     */
    public function unsetIdToken() {
        $this->offsetUnset('id_token');
    }

    /**
     * Valid id_token
     * @return array|boolean
     */
    public function validateIdToken()
    {
        if (!$this->offsetExists('id_token')) {
            return "Property 'id_token' was not initialized.";
        }
        return false;
    }


    /**
     * Gets refresh_token
     * @return string
     */
    public function getRefreshToken()
    {
        return $this->offsetGet('refresh_token');
    }

    /**
     * Checks refresh_token
     * @return boolean
     */
    public function hasRefreshToken()
    {
        return $this->offsetExists('refresh_token');
    }

    /**
     * Sets refresh_token
     * @param string $refresh_token
     * @return $this
     */
    public function setRefreshToken($refresh_token)
    {
        $this->offsetSet('refresh_token', $refresh_token);

        return $this;
    }

    /**
     * Unset refresh_token
     */
    public function unsetRefreshToken() {
        $this->offsetUnset('refresh_token');
    }

    /**
     * Valid refresh_token
     * @return array|boolean
     */
    public function validateRefreshToken()
    {
        if (!$this->offsetExists('refresh_token')) {
            return false;
        }
        return false;
    }

}


