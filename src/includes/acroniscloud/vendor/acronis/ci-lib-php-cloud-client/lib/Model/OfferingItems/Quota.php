<?php
/**
 * Quota
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\OfferingItems;

use Acronis\Cloud\Client\BaseModel;
/**
 * Quota Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Quota extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OfferingItems\Quota';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'value' => 'double',
            'overage' => 'double',
            'version' => 'double'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'value' => 'double',
            'overage' => 'double',
            'version' => 'double'
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'value' => 'value',
            'overage' => 'overage',
            'version' => 'version'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'value' => 'setValue',
            'overage' => 'setOverage',
            'version' => 'setVersion'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'value' => 'getValue',
            'overage' => 'getOverage',
            'version' => 'getVersion'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'value' => 'hasValue',
            'overage' => 'hasOverage',
            'version' => 'hasVersion'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'value' => 'validateValue',
            'overage' => 'validateOverage',
            'version' => 'validateVersion'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateValue())) {
            $invalid_properties[] = $this->validateValue();
        }
        if (!empty($this->validateOverage())) {
            $invalid_properties[] = $this->validateOverage();
        }
        if (!empty($this->validateVersion())) {
            $invalid_properties[] = $this->validateVersion();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateValue())) {
            return false;
        }
        if (!empty($this->validateOverage())) {
            return false;
        }
        if (!empty($this->validateVersion())) {
            return false;
        }
        return true;
    }


    /**
     * Gets value
     * @return double
     */
    public function getValue()
    {
        return $this->offsetGet('value');
    }

    /**
     * Checks value
     * @return boolean
     */
    public function hasValue()
    {
        return $this->offsetExists('value');
    }

    /**
     * Sets value
     * @param double $value
     * @return $this
     */
    public function setValue($value)
    {

        if (($value < 0)) {
            throw new \InvalidArgumentException('invalid value for $value when calling Quota., must be bigger than or equal to 0.');
        }

        $this->offsetSet('value', $value);

        return $this;
    }

    /**
     * Unset value
     */
    public function unsetValue() {
        $this->offsetUnset('value');
    }

    /**
     * Valid value
     * @return array|boolean
     */
    public function validateValue()
    {
        if (!$this->offsetExists('value')) {
            return "Property 'value' was not initialized.";
        }
            if ($this->offsetExists('value') && $this->offsetGet('value') < 0) {
                return "invalid value for 'value', must be bigger than or equal to 0.";
            }
        return false;
    }


    /**
     * Gets overage
     * @return double
     */
    public function getOverage()
    {
        return $this->offsetGet('overage');
    }

    /**
     * Checks overage
     * @return boolean
     */
    public function hasOverage()
    {
        return $this->offsetExists('overage');
    }

    /**
     * Sets overage
     * @param double $overage
     * @return $this
     */
    public function setOverage($overage)
    {

        if (($overage < 0)) {
            throw new \InvalidArgumentException('invalid value for $overage when calling Quota., must be bigger than or equal to 0.');
        }

        $this->offsetSet('overage', $overage);

        return $this;
    }

    /**
     * Unset overage
     */
    public function unsetOverage() {
        $this->offsetUnset('overage');
    }

    /**
     * Valid overage
     * @return array|boolean
     */
    public function validateOverage()
    {
        if (!$this->offsetExists('overage')) {
            return "Property 'overage' was not initialized.";
        }
            if ($this->offsetExists('overage') && $this->offsetGet('overage') < 0) {
                return "invalid value for 'overage', must be bigger than or equal to 0.";
            }
        return false;
    }


    /**
     * Gets version
     * @return double
     */
    public function getVersion()
    {
        return $this->offsetGet('version');
    }

    /**
     * Checks version
     * @return boolean
     */
    public function hasVersion()
    {
        return $this->offsetExists('version');
    }

    /**
     * Sets version
     * @param double $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->offsetSet('version', $version);

        return $this;
    }

    /**
     * Unset version
     */
    public function unsetVersion() {
        $this->offsetUnset('version');
    }

    /**
     * Valid version
     * @return array|boolean
     */
    public function validateVersion()
    {
        if (!$this->offsetExists('version')) {
            return "Property 'version' was not initialized.";
        }
        return false;
    }

}


