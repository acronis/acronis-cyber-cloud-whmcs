<?php
/**
 * UserLoginInfoPasswordExpiration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Users;

use Acronis\Cloud\Client\BaseModel;
/**
 * UserLoginInfoPasswordExpiration Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserLoginInfoPasswordExpiration extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Users\UserLoginInfoPasswordExpiration';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'status' => '\Acronis\Cloud\Client\Model\Users\UserLoginInfoStatus',
            'time' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'status' => null,
            'time' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'status' => 'status',
            'time' => 'time'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'status' => 'setStatus',
            'time' => 'setTime'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'status' => 'getStatus',
            'time' => 'getTime'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'status' => 'hasStatus',
            'time' => 'hasTime'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'status' => 'validateStatus',
            'time' => 'validateTime'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateStatus())) {
            $invalid_properties[] = $this->validateStatus();
        }
        if (!empty($this->validateTime())) {
            $invalid_properties[] = $this->validateTime();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateStatus())) {
            return false;
        }
        if (!empty($this->validateTime())) {
            return false;
        }
        return true;
    }


    /**
     * Gets status
     * @return \Acronis\Cloud\Client\Model\Users\UserLoginInfoStatus
     */
    public function getStatus()
    {
        return $this->offsetGet('status');
    }

    /**
     * Checks status
     * @return boolean
     */
    public function hasStatus()
    {
        return $this->offsetExists('status');
    }

    /**
     * Sets status
     * @param \Acronis\Cloud\Client\Model\Users\UserLoginInfoStatus $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->offsetSet('status', $status);

        return $this;
    }

    /**
     * Unset status
     */
    public function unsetStatus() {
        $this->offsetUnset('status');
    }

    /**
     * Valid status
     * @return array|boolean
     */
    public function validateStatus()
    {
        if (!$this->offsetExists('status')) {
            return "Property 'status' was not initialized.";
        }
        return false;
    }


    /**
     * Gets time
     * @return string
     */
    public function getTime()
    {
        return $this->offsetGet('time');
    }

    /**
     * Checks time
     * @return boolean
     */
    public function hasTime()
    {
        return $this->offsetExists('time');
    }

    /**
     * Sets time
     * @param string $time RFC3339 Formatted date
     * @return $this
     */
    public function setTime($time)
    {
        if (!is_null($time) && (strlen($time) > 32)) {
            throw new \InvalidArgumentException('invalid length for $time when calling UserLoginInfoPasswordExpiration., must be smaller than or equal to 32.');
        }
        if (!is_null($time) && (strlen($time) < 19)) {
            throw new \InvalidArgumentException('invalid length for $time when calling UserLoginInfoPasswordExpiration., must be bigger than or equal to 19.');
        }
        if (!is_null($time) && (!preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $time))) {
            throw new \InvalidArgumentException("invalid value for $time when calling UserLoginInfoPasswordExpiration., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.");
        }

        $this->offsetSet('time', $time);

        return $this;
    }

    /**
     * Unset time
     */
    public function unsetTime() {
        $this->offsetUnset('time');
    }

    /**
     * Valid time
     * @return array|boolean
     */
    public function validateTime()
    {
        if (!$this->offsetExists('time')) {
            return false;
        }
            if ($this->offsetExists('time') && strlen($this->offsetGet('time')) > 32) {
                return "invalid value for 'time', the character length must be smaller than or equal to 32.";
            }
            if ($this->offsetExists('time') && strlen($this->offsetGet('time')) < 19) {
                return "invalid value for 'time', the character length must be bigger than or equal to 19.";
            }
            if ($this->offsetExists('time') && !preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $this->offsetGet('time'))) {
                return "invalid value for 'time', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.";
            }
        return false;
    }

}


