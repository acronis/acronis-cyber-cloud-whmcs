<?php
/**
 * RoleListItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Applications;

use Acronis\Cloud\Client\BaseModel;
/**
 * RoleListItems Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RoleListItems extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Applications\RoleListItems';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'application_id' => 'string',
            'is_default' => 'bool',
            'role' => 'string',
            'type' => 'string',
            '_issues' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'application_id' => null,
            'is_default' => null,
            'role' => null,
            'type' => null,
            '_issues' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'application_id' => 'application_id',
            'is_default' => 'is_default',
            'role' => 'role',
            'type' => 'type',
            '_issues' => '_issues'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'application_id' => 'setApplicationId',
            'is_default' => 'setIsDefault',
            'role' => 'setRole',
            'type' => 'setType',
            '_issues' => 'setIssues'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'application_id' => 'getApplicationId',
            'is_default' => 'getIsDefault',
            'role' => 'getRole',
            'type' => 'getType',
            '_issues' => 'getIssues'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'application_id' => 'hasApplicationId',
            'is_default' => 'hasIsDefault',
            'role' => 'hasRole',
            'type' => 'hasType',
            '_issues' => 'hasIssues'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'application_id' => 'validateApplicationId',
            'is_default' => 'validateIsDefault',
            'role' => 'validateRole',
            'type' => 'validateType',
            '_issues' => 'validateIssues'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateApplicationId())) {
            $invalid_properties[] = $this->validateApplicationId();
        }
        if (!empty($this->validateIsDefault())) {
            $invalid_properties[] = $this->validateIsDefault();
        }
        if (!empty($this->validateRole())) {
            $invalid_properties[] = $this->validateRole();
        }
        if (!empty($this->validateType())) {
            $invalid_properties[] = $this->validateType();
        }
        if (!empty($this->validateIssues())) {
            $invalid_properties[] = $this->validateIssues();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateApplicationId())) {
            return false;
        }
        if (!empty($this->validateIsDefault())) {
            return false;
        }
        if (!empty($this->validateRole())) {
            return false;
        }
        if (!empty($this->validateType())) {
            return false;
        }
        if (!empty($this->validateIssues())) {
            return false;
        }
        return true;
    }


    /**
     * Gets application_id
     * @return string
     */
    public function getApplicationId()
    {
        return $this->offsetGet('application_id');
    }

    /**
     * Checks application_id
     * @return boolean
     */
    public function hasApplicationId()
    {
        return $this->offsetExists('application_id');
    }

    /**
     * Sets application_id
     * @param string $application_id
     * @return $this
     */
    public function setApplicationId($application_id)
    {
        if (!is_null($application_id) && (strlen($application_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $application_id when calling RoleListItems., must be smaller than or equal to 36.');
        }
        if (!is_null($application_id) && (strlen($application_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $application_id when calling RoleListItems., must be bigger than or equal to 36.');
        }
        if (!is_null($application_id) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $application_id))) {
            throw new \InvalidArgumentException("invalid value for $application_id when calling RoleListItems., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('application_id', $application_id);

        return $this;
    }

    /**
     * Unset application_id
     */
    public function unsetApplicationId() {
        $this->offsetUnset('application_id');
    }

    /**
     * Valid application_id
     * @return array|boolean
     */
    public function validateApplicationId()
    {
        if (!$this->offsetExists('application_id')) {
            return false;
        }
            if ($this->offsetExists('application_id') && strlen($this->offsetGet('application_id')) > 36) {
                return "invalid value for 'application_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('application_id') && strlen($this->offsetGet('application_id')) < 36) {
                return "invalid value for 'application_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('application_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('application_id'))) {
                return "invalid value for 'application_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets is_default
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->offsetGet('is_default');
    }

    /**
     * Checks is_default
     * @return boolean
     */
    public function hasIsDefault()
    {
        return $this->offsetExists('is_default');
    }

    /**
     * Sets is_default
     * @param bool $is_default
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->offsetSet('is_default', $is_default);

        return $this;
    }

    /**
     * Unset is_default
     */
    public function unsetIsDefault() {
        $this->offsetUnset('is_default');
    }

    /**
     * Valid is_default
     * @return array|boolean
     */
    public function validateIsDefault()
    {
        if (!$this->offsetExists('is_default')) {
            return false;
        }
        return false;
    }


    /**
     * Gets role
     * @return string
     */
    public function getRole()
    {
        return $this->offsetGet('role');
    }

    /**
     * Checks role
     * @return boolean
     */
    public function hasRole()
    {
        return $this->offsetExists('role');
    }

    /**
     * Sets role
     * @param string $role
     * @return $this
     */
    public function setRole($role)
    {
        $this->offsetSet('role', $role);

        return $this;
    }

    /**
     * Unset role
     */
    public function unsetRole() {
        $this->offsetUnset('role');
    }

    /**
     * Valid role
     * @return array|boolean
     */
    public function validateRole()
    {
        if (!$this->offsetExists('role')) {
            return "Property 'role' was not initialized.";
        }
        return false;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->offsetGet('type');
    }

    /**
     * Checks type
     * @return boolean
     */
    public function hasType()
    {
        return $this->offsetExists('type');
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->offsetSet('type', $type);

        return $this;
    }

    /**
     * Unset type
     */
    public function unsetType() {
        $this->offsetUnset('type');
    }

    /**
     * Valid type
     * @return array|boolean
     */
    public function validateType()
    {
        if (!$this->offsetExists('type')) {
            return "Property 'type' was not initialized.";
        }
        return false;
    }


    /**
     * Gets _issues
     * @return string
     */
    public function getIssues()
    {
        return $this->offsetGet('_issues');
    }

    /**
     * Checks _issues
     * @return boolean
     */
    public function hasIssues()
    {
        return $this->offsetExists('_issues');
    }

    /**
     * Sets _issues
     * @param string $_issues
     * @return $this
     */
    public function setIssues($_issues)
    {
        $this->offsetSet('_issues', $_issues);

        return $this;
    }

    /**
     * Unset _issues
     */
    public function unsetIssues() {
        $this->offsetUnset('_issues');
    }

    /**
     * Valid _issues
     * @return array|boolean
     */
    public function validateIssues()
    {
        if (!$this->offsetExists('_issues')) {
            return false;
        }
        return false;
    }

}


