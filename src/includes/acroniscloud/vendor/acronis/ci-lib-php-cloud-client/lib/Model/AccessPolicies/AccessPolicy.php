<?php
/**
 * AccessPolicy
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\AccessPolicies;

use Acronis\Cloud\Client\BaseModel;
/**
 * AccessPolicy Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AccessPolicy extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AccessPolicies\AccessPolicy';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'id' => 'string',
            'version' => 'int',
            'trustee_id' => 'string',
            'trustee_type' => '\Acronis\Cloud\Client\Model\AccessPolicies\AccessPolicyTrusteeType',
            'issuer_id' => 'string',
            'tenant_id' => 'string',
            'role_id' => '\Acronis\Cloud\Client\Model\Common\Types\Role',
            'resource' => '\Acronis\Cloud\Client\Model\AccessPolicies\AccessPolicyPostResource'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'id' => null,
            'version' => 'int32',
            'trustee_id' => null,
            'trustee_type' => null,
            'issuer_id' => null,
            'tenant_id' => null,
            'role_id' => null,
            'resource' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'id' => 'id',
            'version' => 'version',
            'trustee_id' => 'trustee_id',
            'trustee_type' => 'trustee_type',
            'issuer_id' => 'issuer_id',
            'tenant_id' => 'tenant_id',
            'role_id' => 'role_id',
            'resource' => 'resource'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'id' => 'setId',
            'version' => 'setVersion',
            'trustee_id' => 'setTrusteeId',
            'trustee_type' => 'setTrusteeType',
            'issuer_id' => 'setIssuerId',
            'tenant_id' => 'setTenantId',
            'role_id' => 'setRoleId',
            'resource' => 'setResource'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'id' => 'getId',
            'version' => 'getVersion',
            'trustee_id' => 'getTrusteeId',
            'trustee_type' => 'getTrusteeType',
            'issuer_id' => 'getIssuerId',
            'tenant_id' => 'getTenantId',
            'role_id' => 'getRoleId',
            'resource' => 'getResource'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'id' => 'hasId',
            'version' => 'hasVersion',
            'trustee_id' => 'hasTrusteeId',
            'trustee_type' => 'hasTrusteeType',
            'issuer_id' => 'hasIssuerId',
            'tenant_id' => 'hasTenantId',
            'role_id' => 'hasRoleId',
            'resource' => 'hasResource'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'id' => 'validateId',
            'version' => 'validateVersion',
            'trustee_id' => 'validateTrusteeId',
            'trustee_type' => 'validateTrusteeType',
            'issuer_id' => 'validateIssuerId',
            'tenant_id' => 'validateTenantId',
            'role_id' => 'validateRoleId',
            'resource' => 'validateResource'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateId())) {
            $invalid_properties[] = $this->validateId();
        }
        if (!empty($this->validateVersion())) {
            $invalid_properties[] = $this->validateVersion();
        }
        if (!empty($this->validateTrusteeId())) {
            $invalid_properties[] = $this->validateTrusteeId();
        }
        if (!empty($this->validateTrusteeType())) {
            $invalid_properties[] = $this->validateTrusteeType();
        }
        if (!empty($this->validateIssuerId())) {
            $invalid_properties[] = $this->validateIssuerId();
        }
        if (!empty($this->validateTenantId())) {
            $invalid_properties[] = $this->validateTenantId();
        }
        if (!empty($this->validateRoleId())) {
            $invalid_properties[] = $this->validateRoleId();
        }
        if (!empty($this->validateResource())) {
            $invalid_properties[] = $this->validateResource();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateId())) {
            return false;
        }
        if (!empty($this->validateVersion())) {
            return false;
        }
        if (!empty($this->validateTrusteeId())) {
            return false;
        }
        if (!empty($this->validateTrusteeType())) {
            return false;
        }
        if (!empty($this->validateIssuerId())) {
            return false;
        }
        if (!empty($this->validateTenantId())) {
            return false;
        }
        if (!empty($this->validateRoleId())) {
            return false;
        }
        if (!empty($this->validateResource())) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->offsetGet('id');
    }

    /**
     * Checks id
     * @return boolean
     */
    public function hasId()
    {
        return $this->offsetExists('id');
    }

    /**
     * Sets id
     * @param string $id Access policy unique identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->offsetSet('id', $id);

        return $this;
    }

    /**
     * Unset id
     */
    public function unsetId() {
        $this->offsetUnset('id');
    }

    /**
     * Valid id
     * @return array|boolean
     */
    public function validateId()
    {
        if (!$this->offsetExists('id')) {
            return "Property 'id' was not initialized.";
        }
        return false;
    }


    /**
     * Gets version
     * @return int
     */
    public function getVersion()
    {
        return $this->offsetGet('version');
    }

    /**
     * Checks version
     * @return boolean
     */
    public function hasVersion()
    {
        return $this->offsetExists('version');
    }

    /**
     * Sets version
     * @param int $version Auto-incremented entity version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->offsetSet('version', $version);

        return $this;
    }

    /**
     * Unset version
     */
    public function unsetVersion() {
        $this->offsetUnset('version');
    }

    /**
     * Valid version
     * @return array|boolean
     */
    public function validateVersion()
    {
        if (!$this->offsetExists('version')) {
            return "Property 'version' was not initialized.";
        }
        return false;
    }


    /**
     * Gets trustee_id
     * @return string
     */
    public function getTrusteeId()
    {
        return $this->offsetGet('trustee_id');
    }

    /**
     * Checks trustee_id
     * @return boolean
     */
    public function hasTrusteeId()
    {
        return $this->offsetExists('trustee_id');
    }

    /**
     * Sets trustee_id
     * @param string $trustee_id Unique identifier of the Subject for whom access policy is granted.
     * @return $this
     */
    public function setTrusteeId($trustee_id)
    {
        $this->offsetSet('trustee_id', $trustee_id);

        return $this;
    }

    /**
     * Unset trustee_id
     */
    public function unsetTrusteeId() {
        $this->offsetUnset('trustee_id');
    }

    /**
     * Valid trustee_id
     * @return array|boolean
     */
    public function validateTrusteeId()
    {
        if (!$this->offsetExists('trustee_id')) {
            return "Property 'trustee_id' was not initialized.";
        }
        return false;
    }


    /**
     * Gets trustee_type
     * @return \Acronis\Cloud\Client\Model\AccessPolicies\AccessPolicyTrusteeType
     */
    public function getTrusteeType()
    {
        return $this->offsetGet('trustee_type');
    }

    /**
     * Checks trustee_type
     * @return boolean
     */
    public function hasTrusteeType()
    {
        return $this->offsetExists('trustee_type');
    }

    /**
     * Sets trustee_type
     * @param \Acronis\Cloud\Client\Model\AccessPolicies\AccessPolicyTrusteeType $trustee_type
     * @return $this
     */
    public function setTrusteeType($trustee_type)
    {
        $this->offsetSet('trustee_type', $trustee_type);

        return $this;
    }

    /**
     * Unset trustee_type
     */
    public function unsetTrusteeType() {
        $this->offsetUnset('trustee_type');
    }

    /**
     * Valid trustee_type
     * @return array|boolean
     */
    public function validateTrusteeType()
    {
        if (!$this->offsetExists('trustee_type')) {
            return "Property 'trustee_type' was not initialized.";
        }
        return false;
    }


    /**
     * Gets issuer_id
     * @return string
     */
    public function getIssuerId()
    {
        return $this->offsetGet('issuer_id');
    }

    /**
     * Checks issuer_id
     * @return boolean
     */
    public function hasIssuerId()
    {
        return $this->offsetExists('issuer_id');
    }

    /**
     * Sets issuer_id
     * @param string $issuer_id
     * @return $this
     */
    public function setIssuerId($issuer_id)
    {
        if ((strlen($issuer_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $issuer_id when calling AccessPolicy., must be smaller than or equal to 36.');
        }
        if ((strlen($issuer_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $issuer_id when calling AccessPolicy., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $issuer_id))) {
            throw new \InvalidArgumentException("invalid value for $issuer_id when calling AccessPolicy., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('issuer_id', $issuer_id);

        return $this;
    }

    /**
     * Unset issuer_id
     */
    public function unsetIssuerId() {
        $this->offsetUnset('issuer_id');
    }

    /**
     * Valid issuer_id
     * @return array|boolean
     */
    public function validateIssuerId()
    {
        if (!$this->offsetExists('issuer_id')) {
            return "Property 'issuer_id' was not initialized.";
        }
            if ($this->offsetExists('issuer_id') && strlen($this->offsetGet('issuer_id')) > 36) {
                return "invalid value for 'issuer_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('issuer_id') && strlen($this->offsetGet('issuer_id')) < 36) {
                return "invalid value for 'issuer_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('issuer_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('issuer_id'))) {
                return "invalid value for 'issuer_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets tenant_id
     * @return string
     */
    public function getTenantId()
    {
        return $this->offsetGet('tenant_id');
    }

    /**
     * Checks tenant_id
     * @return boolean
     */
    public function hasTenantId()
    {
        return $this->offsetExists('tenant_id');
    }

    /**
     * Sets tenant_id
     * @param string $tenant_id
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        if ((strlen($tenant_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $tenant_id when calling AccessPolicy., must be smaller than or equal to 36.');
        }
        if ((strlen($tenant_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $tenant_id when calling AccessPolicy., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $tenant_id))) {
            throw new \InvalidArgumentException("invalid value for $tenant_id when calling AccessPolicy., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('tenant_id', $tenant_id);

        return $this;
    }

    /**
     * Unset tenant_id
     */
    public function unsetTenantId() {
        $this->offsetUnset('tenant_id');
    }

    /**
     * Valid tenant_id
     * @return array|boolean
     */
    public function validateTenantId()
    {
        if (!$this->offsetExists('tenant_id')) {
            return "Property 'tenant_id' was not initialized.";
        }
            if ($this->offsetExists('tenant_id') && strlen($this->offsetGet('tenant_id')) > 36) {
                return "invalid value for 'tenant_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('tenant_id') && strlen($this->offsetGet('tenant_id')) < 36) {
                return "invalid value for 'tenant_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('tenant_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('tenant_id'))) {
                return "invalid value for 'tenant_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets role_id
     * @return \Acronis\Cloud\Client\Model\Common\Types\Role
     */
    public function getRoleId()
    {
        return $this->offsetGet('role_id');
    }

    /**
     * Checks role_id
     * @return boolean
     */
    public function hasRoleId()
    {
        return $this->offsetExists('role_id');
    }

    /**
     * Sets role_id
     * @param \Acronis\Cloud\Client\Model\Common\Types\Role $role_id
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->offsetSet('role_id', $role_id);

        return $this;
    }

    /**
     * Unset role_id
     */
    public function unsetRoleId() {
        $this->offsetUnset('role_id');
    }

    /**
     * Valid role_id
     * @return array|boolean
     */
    public function validateRoleId()
    {
        if (!$this->offsetExists('role_id')) {
            return "Property 'role_id' was not initialized.";
        }
        return false;
    }


    /**
     * Gets resource
     * @return \Acronis\Cloud\Client\Model\AccessPolicies\AccessPolicyPostResource
     */
    public function getResource()
    {
        return $this->offsetGet('resource');
    }

    /**
     * Checks resource
     * @return boolean
     */
    public function hasResource()
    {
        return $this->offsetExists('resource');
    }

    /**
     * Sets resource
     * @param \Acronis\Cloud\Client\Model\AccessPolicies\AccessPolicyPostResource $resource
     * @return $this
     */
    public function setResource($resource)
    {
        $this->offsetSet('resource', $resource);

        return $this;
    }

    /**
     * Unset resource
     */
    public function unsetResource() {
        $this->offsetUnset('resource');
    }

    /**
     * Valid resource
     * @return array|boolean
     */
    public function validateResource()
    {
        if (!$this->offsetExists('resource')) {
            return false;
        }
        return false;
    }

}


