<?php
/**
 * ReportPut
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Reports;

use Acronis\Cloud\Client\BaseModel;
/**
 * ReportPut Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReportPut extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Reports\ReportPut';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'recipients' => 'string[]',
            'parameters' => '\Acronis\Cloud\Client\Model\Reports\ReportPutParameters',
            'schedule' => '\Acronis\Cloud\Client\Model\Reports\ReportPutSchedule'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'recipients' => null,
            'parameters' => null,
            'schedule' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'recipients' => 'recipients',
            'parameters' => 'parameters',
            'schedule' => 'schedule'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'recipients' => 'setRecipients',
            'parameters' => 'setParameters',
            'schedule' => 'setSchedule'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'recipients' => 'getRecipients',
            'parameters' => 'getParameters',
            'schedule' => 'getSchedule'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'recipients' => 'hasRecipients',
            'parameters' => 'hasParameters',
            'schedule' => 'hasSchedule'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'recipients' => 'validateRecipients',
            'parameters' => 'validateParameters',
            'schedule' => 'validateSchedule'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateRecipients())) {
            $invalid_properties[] = $this->validateRecipients();
        }
        if (!empty($this->validateParameters())) {
            $invalid_properties[] = $this->validateParameters();
        }
        if (!empty($this->validateSchedule())) {
            $invalid_properties[] = $this->validateSchedule();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateRecipients())) {
            return false;
        }
        if (!empty($this->validateParameters())) {
            return false;
        }
        if (!empty($this->validateSchedule())) {
            return false;
        }
        return true;
    }


    /**
     * Gets recipients
     * @return string[]
     */
    public function getRecipients()
    {
        return $this->offsetGet('recipients');
    }

    /**
     * Checks recipients
     * @return boolean
     */
    public function hasRecipients()
    {
        return $this->offsetExists('recipients');
    }

    /**
     * Sets recipients
     * @param string[] $recipients IDs of subscribed users
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->offsetSet('recipients', $recipients);

        return $this;
    }

    /**
     * Unset recipients
     */
    public function unsetRecipients() {
        $this->offsetUnset('recipients');
    }

    /**
     * Valid recipients
     * @return array|boolean
     */
    public function validateRecipients()
    {
        if (!$this->offsetExists('recipients')) {
            return false;
        }
        return false;
    }


    /**
     * Gets parameters
     * @return \Acronis\Cloud\Client\Model\Reports\ReportPutParameters
     */
    public function getParameters()
    {
        return $this->offsetGet('parameters');
    }

    /**
     * Checks parameters
     * @return boolean
     */
    public function hasParameters()
    {
        return $this->offsetExists('parameters');
    }

    /**
     * Sets parameters
     * @param \Acronis\Cloud\Client\Model\Reports\ReportPutParameters $parameters
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->offsetSet('parameters', $parameters);

        return $this;
    }

    /**
     * Unset parameters
     */
    public function unsetParameters() {
        $this->offsetUnset('parameters');
    }

    /**
     * Valid parameters
     * @return array|boolean
     */
    public function validateParameters()
    {
        if (!$this->offsetExists('parameters')) {
            return false;
        }
        return false;
    }


    /**
     * Gets schedule
     * @return \Acronis\Cloud\Client\Model\Reports\ReportPutSchedule
     */
    public function getSchedule()
    {
        return $this->offsetGet('schedule');
    }

    /**
     * Checks schedule
     * @return boolean
     */
    public function hasSchedule()
    {
        return $this->offsetExists('schedule');
    }

    /**
     * Sets schedule
     * @param \Acronis\Cloud\Client\Model\Reports\ReportPutSchedule $schedule
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->offsetSet('schedule', $schedule);

        return $this;
    }

    /**
     * Unset schedule
     */
    public function unsetSchedule() {
        $this->offsetUnset('schedule');
    }

    /**
     * Valid schedule
     * @return array|boolean
     */
    public function validateSchedule()
    {
        if (!$this->offsetExists('schedule')) {
            return false;
        }
        return false;
    }

}


