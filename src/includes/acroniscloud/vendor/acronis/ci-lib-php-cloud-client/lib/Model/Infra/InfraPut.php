<?php
/**
 * InfraPut
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Infra;

use Acronis\Cloud\Client\BaseModel;
/**
 * InfraPut Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InfraPut extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Infra\InfraPut';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'name' => 'string',
            'location_id' => 'string',
            'url' => 'string',
            'capabilities' => '\Acronis\Cloud\Client\Model\Infra\InfraCap[]',
            'content_url' => 'string',
            'content_mobile_url' => 'string',
            'backend_type' => 'object',
            'version' => 'int'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'name' => null,
            'location_id' => null,
            'url' => null,
            'capabilities' => null,
            'content_url' => null,
            'content_mobile_url' => null,
            'backend_type' => null,
            'version' => 'int32'
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'name' => 'name',
            'location_id' => 'location_id',
            'url' => 'url',
            'capabilities' => 'capabilities',
            'content_url' => 'content_url',
            'content_mobile_url' => 'content_mobile_url',
            'backend_type' => 'backend_type',
            'version' => 'version'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'name' => 'setName',
            'location_id' => 'setLocationId',
            'url' => 'setUrl',
            'capabilities' => 'setCapabilities',
            'content_url' => 'setContentUrl',
            'content_mobile_url' => 'setContentMobileUrl',
            'backend_type' => 'setBackendType',
            'version' => 'setVersion'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'name' => 'getName',
            'location_id' => 'getLocationId',
            'url' => 'getUrl',
            'capabilities' => 'getCapabilities',
            'content_url' => 'getContentUrl',
            'content_mobile_url' => 'getContentMobileUrl',
            'backend_type' => 'getBackendType',
            'version' => 'getVersion'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'name' => 'hasName',
            'location_id' => 'hasLocationId',
            'url' => 'hasUrl',
            'capabilities' => 'hasCapabilities',
            'content_url' => 'hasContentUrl',
            'content_mobile_url' => 'hasContentMobileUrl',
            'backend_type' => 'hasBackendType',
            'version' => 'hasVersion'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'name' => 'validateName',
            'location_id' => 'validateLocationId',
            'url' => 'validateUrl',
            'capabilities' => 'validateCapabilities',
            'content_url' => 'validateContentUrl',
            'content_mobile_url' => 'validateContentMobileUrl',
            'backend_type' => 'validateBackendType',
            'version' => 'validateVersion'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateName())) {
            $invalid_properties[] = $this->validateName();
        }
        if (!empty($this->validateLocationId())) {
            $invalid_properties[] = $this->validateLocationId();
        }
        if (!empty($this->validateUrl())) {
            $invalid_properties[] = $this->validateUrl();
        }
        if (!empty($this->validateCapabilities())) {
            $invalid_properties[] = $this->validateCapabilities();
        }
        if (!empty($this->validateContentUrl())) {
            $invalid_properties[] = $this->validateContentUrl();
        }
        if (!empty($this->validateContentMobileUrl())) {
            $invalid_properties[] = $this->validateContentMobileUrl();
        }
        if (!empty($this->validateBackendType())) {
            $invalid_properties[] = $this->validateBackendType();
        }
        if (!empty($this->validateVersion())) {
            $invalid_properties[] = $this->validateVersion();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateName())) {
            return false;
        }
        if (!empty($this->validateLocationId())) {
            return false;
        }
        if (!empty($this->validateUrl())) {
            return false;
        }
        if (!empty($this->validateCapabilities())) {
            return false;
        }
        if (!empty($this->validateContentUrl())) {
            return false;
        }
        if (!empty($this->validateContentMobileUrl())) {
            return false;
        }
        if (!empty($this->validateBackendType())) {
            return false;
        }
        if (!empty($this->validateVersion())) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->offsetGet('name');
    }

    /**
     * Checks name
     * @return boolean
     */
    public function hasName()
    {
        return $this->offsetExists('name');
    }

    /**
     * Sets name
     * @param string $name Human-readable name of infrastructure component that will be displayed to the users
     * @return $this
     */
    public function setName($name)
    {
        $this->offsetSet('name', $name);

        return $this;
    }

    /**
     * Unset name
     */
    public function unsetName() {
        $this->offsetUnset('name');
    }

    /**
     * Valid name
     * @return array|boolean
     */
    public function validateName()
    {
        if (!$this->offsetExists('name')) {
            return false;
        }
        return false;
    }


    /**
     * Gets location_id
     * @return string
     */
    public function getLocationId()
    {
        return $this->offsetGet('location_id');
    }

    /**
     * Checks location_id
     * @return boolean
     */
    public function hasLocationId()
    {
        return $this->offsetExists('location_id');
    }

    /**
     * Sets location_id
     * @param string $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        if (!is_null($location_id) && (strlen($location_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $location_id when calling InfraPut., must be smaller than or equal to 36.');
        }
        if (!is_null($location_id) && (strlen($location_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $location_id when calling InfraPut., must be bigger than or equal to 36.');
        }
        if (!is_null($location_id) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $location_id))) {
            throw new \InvalidArgumentException("invalid value for $location_id when calling InfraPut., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('location_id', $location_id);

        return $this;
    }

    /**
     * Unset location_id
     */
    public function unsetLocationId() {
        $this->offsetUnset('location_id');
    }

    /**
     * Valid location_id
     * @return array|boolean
     */
    public function validateLocationId()
    {
        if (!$this->offsetExists('location_id')) {
            return false;
        }
            if ($this->offsetExists('location_id') && strlen($this->offsetGet('location_id')) > 36) {
                return "invalid value for 'location_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('location_id') && strlen($this->offsetGet('location_id')) < 36) {
                return "invalid value for 'location_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('location_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('location_id'))) {
                return "invalid value for 'location_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->offsetGet('url');
    }

    /**
     * Checks url
     * @return boolean
     */
    public function hasUrl()
    {
        return $this->offsetExists('url');
    }

    /**
     * Sets url
     * @param string $url URL
     * @return $this
     */
    public function setUrl($url)
    {

        if (!is_null($url) && (!preg_match("/^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/", $url))) {
            throw new \InvalidArgumentException("invalid value for $url when calling InfraPut., must conform to the pattern /^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/.");
        }

        $this->offsetSet('url', $url);

        return $this;
    }

    /**
     * Unset url
     */
    public function unsetUrl() {
        $this->offsetUnset('url');
    }

    /**
     * Valid url
     * @return array|boolean
     */
    public function validateUrl()
    {
        if (!$this->offsetExists('url')) {
            return false;
        }
            if ($this->offsetExists('url') && !preg_match("/^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/", $this->offsetGet('url'))) {
                return "invalid value for 'url', must be conform to the pattern /^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/.";
            }
        return false;
    }


    /**
     * Gets capabilities
     * @return \Acronis\Cloud\Client\Model\Infra\InfraCap[]
     */
    public function getCapabilities()
    {
        return $this->offsetGet('capabilities');
    }

    /**
     * Checks capabilities
     * @return boolean
     */
    public function hasCapabilities()
    {
        return $this->offsetExists('capabilities');
    }

    /**
     * Sets capabilities
     * @param \Acronis\Cloud\Client\Model\Infra\InfraCap[] $capabilities Capabilities of infrastructure component
     * @return $this
     */
    public function setCapabilities($capabilities)
    {
        $this->offsetSet('capabilities', $capabilities);

        return $this;
    }

    /**
     * Unset capabilities
     */
    public function unsetCapabilities() {
        $this->offsetUnset('capabilities');
    }

    /**
     * Valid capabilities
     * @return array|boolean
     */
    public function validateCapabilities()
    {
        if (!$this->offsetExists('capabilities')) {
            return false;
        }
        return false;
    }


    /**
     * Gets content_url
     * @return string
     */
    public function getContentUrl()
    {
        return $this->offsetGet('content_url');
    }

    /**
     * Checks content_url
     * @return boolean
     */
    public function hasContentUrl()
    {
        return $this->offsetExists('content_url');
    }

    /**
     * Sets content_url
     * @param string $content_url URL
     * @return $this
     */
    public function setContentUrl($content_url)
    {

        if (!is_null($content_url) && (!preg_match("/^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/", $content_url))) {
            throw new \InvalidArgumentException("invalid value for $content_url when calling InfraPut., must conform to the pattern /^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/.");
        }

        $this->offsetSet('content_url', $content_url);

        return $this;
    }

    /**
     * Unset content_url
     */
    public function unsetContentUrl() {
        $this->offsetUnset('content_url');
    }

    /**
     * Valid content_url
     * @return array|boolean
     */
    public function validateContentUrl()
    {
        if (!$this->offsetExists('content_url')) {
            return false;
        }
            if ($this->offsetExists('content_url') && !preg_match("/^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/", $this->offsetGet('content_url'))) {
                return "invalid value for 'content_url', must be conform to the pattern /^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/.";
            }
        return false;
    }


    /**
     * Gets content_mobile_url
     * @return string
     */
    public function getContentMobileUrl()
    {
        return $this->offsetGet('content_mobile_url');
    }

    /**
     * Checks content_mobile_url
     * @return boolean
     */
    public function hasContentMobileUrl()
    {
        return $this->offsetExists('content_mobile_url');
    }

    /**
     * Sets content_mobile_url
     * @param string $content_mobile_url URL
     * @return $this
     */
    public function setContentMobileUrl($content_mobile_url)
    {

        if (!is_null($content_mobile_url) && (!preg_match("/^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/", $content_mobile_url))) {
            throw new \InvalidArgumentException("invalid value for $content_mobile_url when calling InfraPut., must conform to the pattern /^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/.");
        }

        $this->offsetSet('content_mobile_url', $content_mobile_url);

        return $this;
    }

    /**
     * Unset content_mobile_url
     */
    public function unsetContentMobileUrl() {
        $this->offsetUnset('content_mobile_url');
    }

    /**
     * Valid content_mobile_url
     * @return array|boolean
     */
    public function validateContentMobileUrl()
    {
        if (!$this->offsetExists('content_mobile_url')) {
            return false;
        }
            if ($this->offsetExists('content_mobile_url') && !preg_match("/^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/", $this->offsetGet('content_mobile_url'))) {
                return "invalid value for 'content_mobile_url', must be conform to the pattern /^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/.";
            }
        return false;
    }


    /**
     * Gets backend_type
     * @return object
     */
    public function getBackendType()
    {
        return $this->offsetGet('backend_type');
    }

    /**
     * Checks backend_type
     * @return boolean
     */
    public function hasBackendType()
    {
        return $this->offsetExists('backend_type');
    }

    /**
     * Sets backend_type
     * @param object $backend_type
     * @return $this
     */
    public function setBackendType($backend_type)
    {
        $this->offsetSet('backend_type', $backend_type);

        return $this;
    }

    /**
     * Unset backend_type
     */
    public function unsetBackendType() {
        $this->offsetUnset('backend_type');
    }

    /**
     * Valid backend_type
     * @return array|boolean
     */
    public function validateBackendType()
    {
        if (!$this->offsetExists('backend_type')) {
            return false;
        }
        return false;
    }


    /**
     * Gets version
     * @return int
     */
    public function getVersion()
    {
        return $this->offsetGet('version');
    }

    /**
     * Checks version
     * @return boolean
     */
    public function hasVersion()
    {
        return $this->offsetExists('version');
    }

    /**
     * Sets version
     * @param int $version Auto-incremented infrastructure component version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->offsetSet('version', $version);

        return $this;
    }

    /**
     * Unset version
     */
    public function unsetVersion() {
        $this->offsetUnset('version');
    }

    /**
     * Valid version
     * @return array|boolean
     */
    public function validateVersion()
    {
        if (!$this->offsetExists('version')) {
            return "Property 'version' was not initialized.";
        }
        return false;
    }

}


