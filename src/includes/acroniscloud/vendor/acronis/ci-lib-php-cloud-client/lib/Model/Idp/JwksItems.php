<?php
/**
 * JwksItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Idp;

use Acronis\Cloud\Client\BaseModel;
/**
 * JwksItems Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JwksItems extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Idp\JwksItems';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'kty' => 'string',
            'use' => 'string',
            'kid' => 'string',
            'alg' => 'string',
            'n' => 'string',
            'e' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'kty' => null,
            'use' => null,
            'kid' => null,
            'alg' => null,
            'n' => null,
            'e' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'kty' => 'kty',
            'use' => 'use',
            'kid' => 'kid',
            'alg' => 'alg',
            'n' => 'n',
            'e' => 'e'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'kty' => 'setKty',
            'use' => 'setUse',
            'kid' => 'setKid',
            'alg' => 'setAlg',
            'n' => 'setN',
            'e' => 'setE'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'kty' => 'getKty',
            'use' => 'getUse',
            'kid' => 'getKid',
            'alg' => 'getAlg',
            'n' => 'getN',
            'e' => 'getE'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'kty' => 'hasKty',
            'use' => 'hasUse',
            'kid' => 'hasKid',
            'alg' => 'hasAlg',
            'n' => 'hasN',
            'e' => 'hasE'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'kty' => 'validateKty',
            'use' => 'validateUse',
            'kid' => 'validateKid',
            'alg' => 'validateAlg',
            'n' => 'validateN',
            'e' => 'validateE'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateKty())) {
            $invalid_properties[] = $this->validateKty();
        }
        if (!empty($this->validateUse())) {
            $invalid_properties[] = $this->validateUse();
        }
        if (!empty($this->validateKid())) {
            $invalid_properties[] = $this->validateKid();
        }
        if (!empty($this->validateAlg())) {
            $invalid_properties[] = $this->validateAlg();
        }
        if (!empty($this->validateN())) {
            $invalid_properties[] = $this->validateN();
        }
        if (!empty($this->validateE())) {
            $invalid_properties[] = $this->validateE();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateKty())) {
            return false;
        }
        if (!empty($this->validateUse())) {
            return false;
        }
        if (!empty($this->validateKid())) {
            return false;
        }
        if (!empty($this->validateAlg())) {
            return false;
        }
        if (!empty($this->validateN())) {
            return false;
        }
        if (!empty($this->validateE())) {
            return false;
        }
        return true;
    }


    /**
     * Gets kty
     * @return string
     */
    public function getKty()
    {
        return $this->offsetGet('kty');
    }

    /**
     * Checks kty
     * @return boolean
     */
    public function hasKty()
    {
        return $this->offsetExists('kty');
    }

    /**
     * Sets kty
     * @param string $kty
     * @return $this
     */
    public function setKty($kty)
    {
        $this->offsetSet('kty', $kty);

        return $this;
    }

    /**
     * Unset kty
     */
    public function unsetKty() {
        $this->offsetUnset('kty');
    }

    /**
     * Valid kty
     * @return array|boolean
     */
    public function validateKty()
    {
        if (!$this->offsetExists('kty')) {
            return false;
        }
        return false;
    }


    /**
     * Gets use
     * @return string
     */
    public function getUse()
    {
        return $this->offsetGet('use');
    }

    /**
     * Checks use
     * @return boolean
     */
    public function hasUse()
    {
        return $this->offsetExists('use');
    }

    /**
     * Sets use
     * @param string $use
     * @return $this
     */
    public function setUse($use)
    {
        $this->offsetSet('use', $use);

        return $this;
    }

    /**
     * Unset use
     */
    public function unsetUse() {
        $this->offsetUnset('use');
    }

    /**
     * Valid use
     * @return array|boolean
     */
    public function validateUse()
    {
        if (!$this->offsetExists('use')) {
            return false;
        }
        return false;
    }


    /**
     * Gets kid
     * @return string
     */
    public function getKid()
    {
        return $this->offsetGet('kid');
    }

    /**
     * Checks kid
     * @return boolean
     */
    public function hasKid()
    {
        return $this->offsetExists('kid');
    }

    /**
     * Sets kid
     * @param string $kid
     * @return $this
     */
    public function setKid($kid)
    {
        $this->offsetSet('kid', $kid);

        return $this;
    }

    /**
     * Unset kid
     */
    public function unsetKid() {
        $this->offsetUnset('kid');
    }

    /**
     * Valid kid
     * @return array|boolean
     */
    public function validateKid()
    {
        if (!$this->offsetExists('kid')) {
            return false;
        }
        return false;
    }


    /**
     * Gets alg
     * @return string
     */
    public function getAlg()
    {
        return $this->offsetGet('alg');
    }

    /**
     * Checks alg
     * @return boolean
     */
    public function hasAlg()
    {
        return $this->offsetExists('alg');
    }

    /**
     * Sets alg
     * @param string $alg
     * @return $this
     */
    public function setAlg($alg)
    {
        $this->offsetSet('alg', $alg);

        return $this;
    }

    /**
     * Unset alg
     */
    public function unsetAlg() {
        $this->offsetUnset('alg');
    }

    /**
     * Valid alg
     * @return array|boolean
     */
    public function validateAlg()
    {
        if (!$this->offsetExists('alg')) {
            return false;
        }
        return false;
    }


    /**
     * Gets n
     * @return string
     */
    public function getN()
    {
        return $this->offsetGet('n');
    }

    /**
     * Checks n
     * @return boolean
     */
    public function hasN()
    {
        return $this->offsetExists('n');
    }

    /**
     * Sets n
     * @param string $n
     * @return $this
     */
    public function setN($n)
    {
        $this->offsetSet('n', $n);

        return $this;
    }

    /**
     * Unset n
     */
    public function unsetN() {
        $this->offsetUnset('n');
    }

    /**
     * Valid n
     * @return array|boolean
     */
    public function validateN()
    {
        if (!$this->offsetExists('n')) {
            return false;
        }
        return false;
    }


    /**
     * Gets e
     * @return string
     */
    public function getE()
    {
        return $this->offsetGet('e');
    }

    /**
     * Checks e
     * @return boolean
     */
    public function hasE()
    {
        return $this->offsetExists('e');
    }

    /**
     * Sets e
     * @param string $e
     * @return $this
     */
    public function setE($e)
    {
        $this->offsetSet('e', $e);

        return $this;
    }

    /**
     * Unset e
     */
    public function unsetE() {
        $this->offsetUnset('e');
    }

    /**
     * Valid e
     * @return array|boolean
     */
    public function validateE()
    {
        if (!$this->offsetExists('e')) {
            return false;
        }
        return false;
    }

}


