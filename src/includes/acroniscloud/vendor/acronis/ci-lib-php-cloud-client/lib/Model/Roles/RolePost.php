<?php
/**
 * RolePost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Roles;

use Acronis\Cloud\Client\BaseModel;
/**
 * RolePost Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RolePost extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Roles\RolePost';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'name' => 'string',
            'owner_tenant_id' => 'string',
            'application_id' => 'string',
            'scopes' => '\Acronis\Cloud\Client\Model\Roles\RolePostItems[]',
            'implied_well_known_scope' => 'bool'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'name' => null,
            'owner_tenant_id' => null,
            'application_id' => null,
            'scopes' => null,
            'implied_well_known_scope' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'name' => 'name',
            'owner_tenant_id' => 'owner_tenant_id',
            'application_id' => 'application_id',
            'scopes' => 'scopes',
            'implied_well_known_scope' => 'implied_well_known_scope'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'name' => 'setName',
            'owner_tenant_id' => 'setOwnerTenantId',
            'application_id' => 'setApplicationId',
            'scopes' => 'setScopes',
            'implied_well_known_scope' => 'setImpliedWellKnownScope'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'name' => 'getName',
            'owner_tenant_id' => 'getOwnerTenantId',
            'application_id' => 'getApplicationId',
            'scopes' => 'getScopes',
            'implied_well_known_scope' => 'getImpliedWellKnownScope'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'name' => 'hasName',
            'owner_tenant_id' => 'hasOwnerTenantId',
            'application_id' => 'hasApplicationId',
            'scopes' => 'hasScopes',
            'implied_well_known_scope' => 'hasImpliedWellKnownScope'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'name' => 'validateName',
            'owner_tenant_id' => 'validateOwnerTenantId',
            'application_id' => 'validateApplicationId',
            'scopes' => 'validateScopes',
            'implied_well_known_scope' => 'validateImpliedWellKnownScope'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateName())) {
            $invalid_properties[] = $this->validateName();
        }
        if (!empty($this->validateOwnerTenantId())) {
            $invalid_properties[] = $this->validateOwnerTenantId();
        }
        if (!empty($this->validateApplicationId())) {
            $invalid_properties[] = $this->validateApplicationId();
        }
        if (!empty($this->validateScopes())) {
            $invalid_properties[] = $this->validateScopes();
        }
        if (!empty($this->validateImpliedWellKnownScope())) {
            $invalid_properties[] = $this->validateImpliedWellKnownScope();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateName())) {
            return false;
        }
        if (!empty($this->validateOwnerTenantId())) {
            return false;
        }
        if (!empty($this->validateApplicationId())) {
            return false;
        }
        if (!empty($this->validateScopes())) {
            return false;
        }
        if (!empty($this->validateImpliedWellKnownScope())) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->offsetGet('name');
    }

    /**
     * Checks name
     * @return boolean
     */
    public function hasName()
    {
        return $this->offsetExists('name');
    }

    /**
     * Sets name
     * @param string $name Human-readable name that will be displayed to the users
     * @return $this
     */
    public function setName($name)
    {
        $this->offsetSet('name', $name);

        return $this;
    }

    /**
     * Unset name
     */
    public function unsetName() {
        $this->offsetUnset('name');
    }

    /**
     * Valid name
     * @return array|boolean
     */
    public function validateName()
    {
        if (!$this->offsetExists('name')) {
            return "Property 'name' was not initialized.";
        }
        return false;
    }


    /**
     * Gets owner_tenant_id
     * @return string
     */
    public function getOwnerTenantId()
    {
        return $this->offsetGet('owner_tenant_id');
    }

    /**
     * Checks owner_tenant_id
     * @return boolean
     */
    public function hasOwnerTenantId()
    {
        return $this->offsetExists('owner_tenant_id');
    }

    /**
     * Sets owner_tenant_id
     * @param string $owner_tenant_id
     * @return $this
     */
    public function setOwnerTenantId($owner_tenant_id)
    {
        if ((strlen($owner_tenant_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $owner_tenant_id when calling RolePost., must be smaller than or equal to 36.');
        }
        if ((strlen($owner_tenant_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $owner_tenant_id when calling RolePost., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $owner_tenant_id))) {
            throw new \InvalidArgumentException("invalid value for $owner_tenant_id when calling RolePost., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('owner_tenant_id', $owner_tenant_id);

        return $this;
    }

    /**
     * Unset owner_tenant_id
     */
    public function unsetOwnerTenantId() {
        $this->offsetUnset('owner_tenant_id');
    }

    /**
     * Valid owner_tenant_id
     * @return array|boolean
     */
    public function validateOwnerTenantId()
    {
        if (!$this->offsetExists('owner_tenant_id')) {
            return "Property 'owner_tenant_id' was not initialized.";
        }
            if ($this->offsetExists('owner_tenant_id') && strlen($this->offsetGet('owner_tenant_id')) > 36) {
                return "invalid value for 'owner_tenant_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('owner_tenant_id') && strlen($this->offsetGet('owner_tenant_id')) < 36) {
                return "invalid value for 'owner_tenant_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('owner_tenant_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('owner_tenant_id'))) {
                return "invalid value for 'owner_tenant_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets application_id
     * @return string
     */
    public function getApplicationId()
    {
        return $this->offsetGet('application_id');
    }

    /**
     * Checks application_id
     * @return boolean
     */
    public function hasApplicationId()
    {
        return $this->offsetExists('application_id');
    }

    /**
     * Sets application_id
     * @param string $application_id
     * @return $this
     */
    public function setApplicationId($application_id)
    {
        if (!is_null($application_id) && (strlen($application_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $application_id when calling RolePost., must be smaller than or equal to 36.');
        }
        if (!is_null($application_id) && (strlen($application_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $application_id when calling RolePost., must be bigger than or equal to 36.');
        }
        if (!is_null($application_id) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $application_id))) {
            throw new \InvalidArgumentException("invalid value for $application_id when calling RolePost., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('application_id', $application_id);

        return $this;
    }

    /**
     * Unset application_id
     */
    public function unsetApplicationId() {
        $this->offsetUnset('application_id');
    }

    /**
     * Valid application_id
     * @return array|boolean
     */
    public function validateApplicationId()
    {
        if (!$this->offsetExists('application_id')) {
            return false;
        }
            if ($this->offsetExists('application_id') && strlen($this->offsetGet('application_id')) > 36) {
                return "invalid value for 'application_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('application_id') && strlen($this->offsetGet('application_id')) < 36) {
                return "invalid value for 'application_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('application_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('application_id'))) {
                return "invalid value for 'application_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets scopes
     * @return \Acronis\Cloud\Client\Model\Roles\RolePostItems[]
     */
    public function getScopes()
    {
        return $this->offsetGet('scopes');
    }

    /**
     * Checks scopes
     * @return boolean
     */
    public function hasScopes()
    {
        return $this->offsetExists('scopes');
    }

    /**
     * Sets scopes
     * @param \Acronis\Cloud\Client\Model\Roles\RolePostItems[] $scopes
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->offsetSet('scopes', $scopes);

        return $this;
    }

    /**
     * Unset scopes
     */
    public function unsetScopes() {
        $this->offsetUnset('scopes');
    }

    /**
     * Valid scopes
     * @return array|boolean
     */
    public function validateScopes()
    {
        if (!$this->offsetExists('scopes')) {
            return "Property 'scopes' was not initialized.";
        }
        return false;
    }


    /**
     * Gets implied_well_known_scope
     * @return bool
     */
    public function getImpliedWellKnownScope()
    {
        return $this->offsetGet('implied_well_known_scope');
    }

    /**
     * Checks implied_well_known_scope
     * @return boolean
     */
    public function hasImpliedWellKnownScope()
    {
        return $this->offsetExists('implied_well_known_scope');
    }

    /**
     * Sets implied_well_known_scope
     * @param bool $implied_well_known_scope Some roles defines implied well known scope rather then define resources for which role is defined
     * @return $this
     */
    public function setImpliedWellKnownScope($implied_well_known_scope)
    {
        $this->offsetSet('implied_well_known_scope', $implied_well_known_scope);

        return $this;
    }

    /**
     * Unset implied_well_known_scope
     */
    public function unsetImpliedWellKnownScope() {
        $this->offsetUnset('implied_well_known_scope');
    }

    /**
     * Valid implied_well_known_scope
     * @return array|boolean
     */
    public function validateImpliedWellKnownScope()
    {
        if (!$this->offsetExists('implied_well_known_scope')) {
            return false;
        }
        return false;
    }

}


