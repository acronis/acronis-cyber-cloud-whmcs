<?php
/**
 * BillingPeriodsPutItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Billing;

use Acronis\Cloud\Client\BaseModel;
/**
 * BillingPeriodsPutItems Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BillingPeriodsPutItems extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Billing\BillingPeriodsPutItems';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'offering_item' => '\Acronis\Cloud\Client\Model\Billing\BillingPeriodsPutOfferingItem',
            'current_period' => 'object'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'offering_item' => null,
            'current_period' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'offering_item' => 'offering_item',
            'current_period' => 'current_period'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'offering_item' => 'setOfferingItem',
            'current_period' => 'setCurrentPeriod'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'offering_item' => 'getOfferingItem',
            'current_period' => 'getCurrentPeriod'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'offering_item' => 'hasOfferingItem',
            'current_period' => 'hasCurrentPeriod'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'offering_item' => 'validateOfferingItem',
            'current_period' => 'validateCurrentPeriod'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateOfferingItem())) {
            $invalid_properties[] = $this->validateOfferingItem();
        }
        if (!empty($this->validateCurrentPeriod())) {
            $invalid_properties[] = $this->validateCurrentPeriod();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateOfferingItem())) {
            return false;
        }
        if (!empty($this->validateCurrentPeriod())) {
            return false;
        }
        return true;
    }


    /**
     * Gets offering_item
     * @return \Acronis\Cloud\Client\Model\Billing\BillingPeriodsPutOfferingItem
     */
    public function getOfferingItem()
    {
        return $this->offsetGet('offering_item');
    }

    /**
     * Checks offering_item
     * @return boolean
     */
    public function hasOfferingItem()
    {
        return $this->offsetExists('offering_item');
    }

    /**
     * Sets offering_item
     * @param \Acronis\Cloud\Client\Model\Billing\BillingPeriodsPutOfferingItem $offering_item
     * @return $this
     */
    public function setOfferingItem($offering_item)
    {
        $this->offsetSet('offering_item', $offering_item);

        return $this;
    }

    /**
     * Unset offering_item
     */
    public function unsetOfferingItem() {
        $this->offsetUnset('offering_item');
    }

    /**
     * Valid offering_item
     * @return array|boolean
     */
    public function validateOfferingItem()
    {
        if (!$this->offsetExists('offering_item')) {
            return "Property 'offering_item' was not initialized.";
        }
        return false;
    }


    /**
     * Gets current_period
     * @return object
     */
    public function getCurrentPeriod()
    {
        return $this->offsetGet('current_period');
    }

    /**
     * Checks current_period
     * @return boolean
     */
    public function hasCurrentPeriod()
    {
        return $this->offsetExists('current_period');
    }

    /**
     * Sets current_period
     * @param object $current_period
     * @return $this
     */
    public function setCurrentPeriod($current_period)
    {
        $this->offsetSet('current_period', $current_period);

        return $this;
    }

    /**
     * Unset current_period
     */
    public function unsetCurrentPeriod() {
        $this->offsetUnset('current_period');
    }

    /**
     * Valid current_period
     * @return array|boolean
     */
    public function validateCurrentPeriod()
    {
        if (!$this->offsetExists('current_period')) {
            return "Property 'current_period' was not initialized.";
        }
        return false;
    }

}


