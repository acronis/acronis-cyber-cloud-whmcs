<?php
/**
 * UserPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Users;

use Acronis\Cloud\Client\BaseModel;
/**
 * UserPost Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserPost extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Users\UserPost';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'tenant_id' => 'string',
            'login' => 'string',
            'external_id' => 'string',
            'idp_id' => 'string',
            'contact' => '\Acronis\Cloud\Client\Model\Common\Contact\Contact',
            'enabled' => 'bool',
            'language' => 'string',
            'business_types' => '\Acronis\Cloud\Client\Model\Common\Types\BusinessType[]',
            'notifications' => '\Acronis\Cloud\Client\Model\Common\Types\UserNotification[]'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'tenant_id' => null,
            'login' => null,
            'external_id' => null,
            'idp_id' => null,
            'contact' => null,
            'enabled' => null,
            'language' => null,
            'business_types' => null,
            'notifications' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'tenant_id' => 'tenant_id',
            'login' => 'login',
            'external_id' => 'external_id',
            'idp_id' => 'idp_id',
            'contact' => 'contact',
            'enabled' => 'enabled',
            'language' => 'language',
            'business_types' => 'business_types',
            'notifications' => 'notifications'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'tenant_id' => 'setTenantId',
            'login' => 'setLogin',
            'external_id' => 'setExternalId',
            'idp_id' => 'setIdpId',
            'contact' => 'setContact',
            'enabled' => 'setEnabled',
            'language' => 'setLanguage',
            'business_types' => 'setBusinessTypes',
            'notifications' => 'setNotifications'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'tenant_id' => 'getTenantId',
            'login' => 'getLogin',
            'external_id' => 'getExternalId',
            'idp_id' => 'getIdpId',
            'contact' => 'getContact',
            'enabled' => 'getEnabled',
            'language' => 'getLanguage',
            'business_types' => 'getBusinessTypes',
            'notifications' => 'getNotifications'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'tenant_id' => 'hasTenantId',
            'login' => 'hasLogin',
            'external_id' => 'hasExternalId',
            'idp_id' => 'hasIdpId',
            'contact' => 'hasContact',
            'enabled' => 'hasEnabled',
            'language' => 'hasLanguage',
            'business_types' => 'hasBusinessTypes',
            'notifications' => 'hasNotifications'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'tenant_id' => 'validateTenantId',
            'login' => 'validateLogin',
            'external_id' => 'validateExternalId',
            'idp_id' => 'validateIdpId',
            'contact' => 'validateContact',
            'enabled' => 'validateEnabled',
            'language' => 'validateLanguage',
            'business_types' => 'validateBusinessTypes',
            'notifications' => 'validateNotifications'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateTenantId())) {
            $invalid_properties[] = $this->validateTenantId();
        }
        if (!empty($this->validateLogin())) {
            $invalid_properties[] = $this->validateLogin();
        }
        if (!empty($this->validateExternalId())) {
            $invalid_properties[] = $this->validateExternalId();
        }
        if (!empty($this->validateIdpId())) {
            $invalid_properties[] = $this->validateIdpId();
        }
        if (!empty($this->validateContact())) {
            $invalid_properties[] = $this->validateContact();
        }
        if (!empty($this->validateEnabled())) {
            $invalid_properties[] = $this->validateEnabled();
        }
        if (!empty($this->validateLanguage())) {
            $invalid_properties[] = $this->validateLanguage();
        }
        if (!empty($this->validateBusinessTypes())) {
            $invalid_properties[] = $this->validateBusinessTypes();
        }
        if (!empty($this->validateNotifications())) {
            $invalid_properties[] = $this->validateNotifications();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateTenantId())) {
            return false;
        }
        if (!empty($this->validateLogin())) {
            return false;
        }
        if (!empty($this->validateExternalId())) {
            return false;
        }
        if (!empty($this->validateIdpId())) {
            return false;
        }
        if (!empty($this->validateContact())) {
            return false;
        }
        if (!empty($this->validateEnabled())) {
            return false;
        }
        if (!empty($this->validateLanguage())) {
            return false;
        }
        if (!empty($this->validateBusinessTypes())) {
            return false;
        }
        if (!empty($this->validateNotifications())) {
            return false;
        }
        return true;
    }


    /**
     * Gets tenant_id
     * @return string
     */
    public function getTenantId()
    {
        return $this->offsetGet('tenant_id');
    }

    /**
     * Checks tenant_id
     * @return boolean
     */
    public function hasTenantId()
    {
        return $this->offsetExists('tenant_id');
    }

    /**
     * Sets tenant_id
     * @param string $tenant_id ID of tenant this user belongs to
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->offsetSet('tenant_id', $tenant_id);

        return $this;
    }

    /**
     * Unset tenant_id
     */
    public function unsetTenantId() {
        $this->offsetUnset('tenant_id');
    }

    /**
     * Valid tenant_id
     * @return array|boolean
     */
    public function validateTenantId()
    {
        if (!$this->offsetExists('tenant_id')) {
            return "Property 'tenant_id' was not initialized.";
        }
        return false;
    }


    /**
     * Gets login
     * @return string
     */
    public function getLogin()
    {
        return $this->offsetGet('login');
    }

    /**
     * Checks login
     * @return boolean
     */
    public function hasLogin()
    {
        return $this->offsetExists('login');
    }

    /**
     * Sets login
     * @param string $login User's login
     * @return $this
     */
    public function setLogin($login)
    {
        $this->offsetSet('login', $login);

        return $this;
    }

    /**
     * Unset login
     */
    public function unsetLogin() {
        $this->offsetUnset('login');
    }

    /**
     * Valid login
     * @return array|boolean
     */
    public function validateLogin()
    {
        if (!$this->offsetExists('login')) {
            return false;
        }
        return false;
    }


    /**
     * Gets external_id
     * @return string
     */
    public function getExternalId()
    {
        return $this->offsetGet('external_id');
    }

    /**
     * Checks external_id
     * @return boolean
     */
    public function hasExternalId()
    {
        return $this->offsetExists('external_id');
    }

    /**
     * Sets external_id
     * @param string $external_id User's ID in external identity provider (e.g. SID in AD)
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->offsetSet('external_id', $external_id);

        return $this;
    }

    /**
     * Unset external_id
     */
    public function unsetExternalId() {
        $this->offsetUnset('external_id');
    }

    /**
     * Valid external_id
     * @return array|boolean
     */
    public function validateExternalId()
    {
        if (!$this->offsetExists('external_id')) {
            return false;
        }
        return false;
    }


    /**
     * Gets idp_id
     * @return string
     */
    public function getIdpId()
    {
        return $this->offsetGet('idp_id');
    }

    /**
     * Checks idp_id
     * @return boolean
     */
    public function hasIdpId()
    {
        return $this->offsetExists('idp_id');
    }

    /**
     * Sets idp_id
     * @param string $idp_id
     * @return $this
     */
    public function setIdpId($idp_id)
    {
        if (!is_null($idp_id) && (strlen($idp_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $idp_id when calling UserPost., must be smaller than or equal to 36.');
        }
        if (!is_null($idp_id) && (strlen($idp_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $idp_id when calling UserPost., must be bigger than or equal to 36.');
        }
        if (!is_null($idp_id) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $idp_id))) {
            throw new \InvalidArgumentException("invalid value for $idp_id when calling UserPost., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('idp_id', $idp_id);

        return $this;
    }

    /**
     * Unset idp_id
     */
    public function unsetIdpId() {
        $this->offsetUnset('idp_id');
    }

    /**
     * Valid idp_id
     * @return array|boolean
     */
    public function validateIdpId()
    {
        if (!$this->offsetExists('idp_id')) {
            return false;
        }
            if ($this->offsetExists('idp_id') && strlen($this->offsetGet('idp_id')) > 36) {
                return "invalid value for 'idp_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('idp_id') && strlen($this->offsetGet('idp_id')) < 36) {
                return "invalid value for 'idp_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('idp_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('idp_id'))) {
                return "invalid value for 'idp_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets contact
     * @return \Acronis\Cloud\Client\Model\Common\Contact\Contact
     */
    public function getContact()
    {
        return $this->offsetGet('contact');
    }

    /**
     * Checks contact
     * @return boolean
     */
    public function hasContact()
    {
        return $this->offsetExists('contact');
    }

    /**
     * Sets contact
     * @param \Acronis\Cloud\Client\Model\Common\Contact\Contact $contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->offsetSet('contact', $contact);

        return $this;
    }

    /**
     * Unset contact
     */
    public function unsetContact() {
        $this->offsetUnset('contact');
    }

    /**
     * Valid contact
     * @return array|boolean
     */
    public function validateContact()
    {
        if (!$this->offsetExists('contact')) {
            return false;
        }
        return false;
    }


    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->offsetGet('enabled');
    }

    /**
     * Checks enabled
     * @return boolean
     */
    public function hasEnabled()
    {
        return $this->offsetExists('enabled');
    }

    /**
     * Sets enabled
     * @param bool $enabled Flag, indicates whether the user is enabled or disabled
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->offsetSet('enabled', $enabled);

        return $this;
    }

    /**
     * Unset enabled
     */
    public function unsetEnabled() {
        $this->offsetUnset('enabled');
    }

    /**
     * Valid enabled
     * @return array|boolean
     */
    public function validateEnabled()
    {
        if (!$this->offsetExists('enabled')) {
            return false;
        }
        return false;
    }


    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->offsetGet('language');
    }

    /**
     * Checks language
     * @return boolean
     */
    public function hasLanguage()
    {
        return $this->offsetExists('language');
    }

    /**
     * Sets language
     * @param string $language Preferred locale
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->offsetSet('language', $language);

        return $this;
    }

    /**
     * Unset language
     */
    public function unsetLanguage() {
        $this->offsetUnset('language');
    }

    /**
     * Valid language
     * @return array|boolean
     */
    public function validateLanguage()
    {
        if (!$this->offsetExists('language')) {
            return false;
        }
        return false;
    }


    /**
     * Gets business_types
     * @return \Acronis\Cloud\Client\Model\Common\Types\BusinessType[]
     */
    public function getBusinessTypes()
    {
        return $this->offsetGet('business_types');
    }

    /**
     * Checks business_types
     * @return boolean
     */
    public function hasBusinessTypes()
    {
        return $this->offsetExists('business_types');
    }

    /**
     * Sets business_types
     * @param \Acronis\Cloud\Client\Model\Common\Types\BusinessType[] $business_types Business types
     * @return $this
     */
    public function setBusinessTypes($business_types)
    {
        $this->offsetSet('business_types', $business_types);

        return $this;
    }

    /**
     * Unset business_types
     */
    public function unsetBusinessTypes() {
        $this->offsetUnset('business_types');
    }

    /**
     * Valid business_types
     * @return array|boolean
     */
    public function validateBusinessTypes()
    {
        if (!$this->offsetExists('business_types')) {
            return false;
        }
        return false;
    }


    /**
     * Gets notifications
     * @return \Acronis\Cloud\Client\Model\Common\Types\UserNotification[]
     */
    public function getNotifications()
    {
        return $this->offsetGet('notifications');
    }

    /**
     * Checks notifications
     * @return boolean
     */
    public function hasNotifications()
    {
        return $this->offsetExists('notifications');
    }

    /**
     * Sets notifications
     * @param \Acronis\Cloud\Client\Model\Common\Types\UserNotification[] $notifications User notifications
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->offsetSet('notifications', $notifications);

        return $this;
    }

    /**
     * Unset notifications
     */
    public function unsetNotifications() {
        $this->offsetUnset('notifications');
    }

    /**
     * Valid notifications
     * @return array|boolean
     */
    public function validateNotifications()
    {
        if (!$this->offsetExists('notifications')) {
            return false;
        }
        return false;
    }

}


