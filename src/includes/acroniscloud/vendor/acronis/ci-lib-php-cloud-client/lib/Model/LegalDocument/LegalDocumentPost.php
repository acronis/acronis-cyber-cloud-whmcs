<?php
/**
 * LegalDocumentPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\LegalDocument;

use Acronis\Cloud\Client\BaseModel;
/**
 * LegalDocumentPost Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LegalDocumentPost extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LegalDocument\LegalDocumentPost';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'document_type' => 'string',
            'comment' => 'string',
            'common_part_update' => 'bool',
            'changed_items' => '\Acronis\Cloud\Client\Model\LegalDocument\LegalDocumentPostChangedItems',
            'link' => 'string',
            'grace_period' => 'int'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'document_type' => null,
            'comment' => null,
            'common_part_update' => null,
            'changed_items' => null,
            'link' => null,
            'grace_period' => 'int32'
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'document_type' => 'document_type',
            'comment' => 'comment',
            'common_part_update' => 'common_part_update',
            'changed_items' => 'changed_items',
            'link' => 'link',
            'grace_period' => 'grace_period'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'document_type' => 'setDocumentType',
            'comment' => 'setComment',
            'common_part_update' => 'setCommonPartUpdate',
            'changed_items' => 'setChangedItems',
            'link' => 'setLink',
            'grace_period' => 'setGracePeriod'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'document_type' => 'getDocumentType',
            'comment' => 'getComment',
            'common_part_update' => 'getCommonPartUpdate',
            'changed_items' => 'getChangedItems',
            'link' => 'getLink',
            'grace_period' => 'getGracePeriod'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'document_type' => 'hasDocumentType',
            'comment' => 'hasComment',
            'common_part_update' => 'hasCommonPartUpdate',
            'changed_items' => 'hasChangedItems',
            'link' => 'hasLink',
            'grace_period' => 'hasGracePeriod'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'document_type' => 'validateDocumentType',
            'comment' => 'validateComment',
            'common_part_update' => 'validateCommonPartUpdate',
            'changed_items' => 'validateChangedItems',
            'link' => 'validateLink',
            'grace_period' => 'validateGracePeriod'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateDocumentType())) {
            $invalid_properties[] = $this->validateDocumentType();
        }
        if (!empty($this->validateComment())) {
            $invalid_properties[] = $this->validateComment();
        }
        if (!empty($this->validateCommonPartUpdate())) {
            $invalid_properties[] = $this->validateCommonPartUpdate();
        }
        if (!empty($this->validateChangedItems())) {
            $invalid_properties[] = $this->validateChangedItems();
        }
        if (!empty($this->validateLink())) {
            $invalid_properties[] = $this->validateLink();
        }
        if (!empty($this->validateGracePeriod())) {
            $invalid_properties[] = $this->validateGracePeriod();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateDocumentType())) {
            return false;
        }
        if (!empty($this->validateComment())) {
            return false;
        }
        if (!empty($this->validateCommonPartUpdate())) {
            return false;
        }
        if (!empty($this->validateChangedItems())) {
            return false;
        }
        if (!empty($this->validateLink())) {
            return false;
        }
        if (!empty($this->validateGracePeriod())) {
            return false;
        }
        return true;
    }


    /**
     * Gets document_type
     * @return string
     */
    public function getDocumentType()
    {
        return $this->offsetGet('document_type');
    }

    /**
     * Checks document_type
     * @return boolean
     */
    public function hasDocumentType()
    {
        return $this->offsetExists('document_type');
    }

    /**
     * Sets document_type
     * @param string $document_type Type of a document
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->offsetSet('document_type', $document_type);

        return $this;
    }

    /**
     * Unset document_type
     */
    public function unsetDocumentType() {
        $this->offsetUnset('document_type');
    }

    /**
     * Valid document_type
     * @return array|boolean
     */
    public function validateDocumentType()
    {
        if (!$this->offsetExists('document_type')) {
            return "Property 'document_type' was not initialized.";
        }
        return false;
    }


    /**
     * Gets comment
     * @return string
     */
    public function getComment()
    {
        return $this->offsetGet('comment');
    }

    /**
     * Checks comment
     * @return boolean
     */
    public function hasComment()
    {
        return $this->offsetExists('comment');
    }

    /**
     * Sets comment
     * @param string $comment Document description
     * @return $this
     */
    public function setComment($comment)
    {
        $this->offsetSet('comment', $comment);

        return $this;
    }

    /**
     * Unset comment
     */
    public function unsetComment() {
        $this->offsetUnset('comment');
    }

    /**
     * Valid comment
     * @return array|boolean
     */
    public function validateComment()
    {
        if (!$this->offsetExists('comment')) {
            return false;
        }
        return false;
    }


    /**
     * Gets common_part_update
     * @return bool
     */
    public function getCommonPartUpdate()
    {
        return $this->offsetGet('common_part_update');
    }

    /**
     * Checks common_part_update
     * @return boolean
     */
    public function hasCommonPartUpdate()
    {
        return $this->offsetExists('common_part_update');
    }

    /**
     * Sets common_part_update
     * @param bool $common_part_update Flag that represents if document contains common part update
     * @return $this
     */
    public function setCommonPartUpdate($common_part_update)
    {
        $this->offsetSet('common_part_update', $common_part_update);

        return $this;
    }

    /**
     * Unset common_part_update
     */
    public function unsetCommonPartUpdate() {
        $this->offsetUnset('common_part_update');
    }

    /**
     * Valid common_part_update
     * @return array|boolean
     */
    public function validateCommonPartUpdate()
    {
        if (!$this->offsetExists('common_part_update')) {
            return "Property 'common_part_update' was not initialized.";
        }
        return false;
    }


    /**
     * Gets changed_items
     * @return \Acronis\Cloud\Client\Model\LegalDocument\LegalDocumentPostChangedItems
     */
    public function getChangedItems()
    {
        return $this->offsetGet('changed_items');
    }

    /**
     * Checks changed_items
     * @return boolean
     */
    public function hasChangedItems()
    {
        return $this->offsetExists('changed_items');
    }

    /**
     * Sets changed_items
     * @param \Acronis\Cloud\Client\Model\LegalDocument\LegalDocumentPostChangedItems $changed_items
     * @return $this
     */
    public function setChangedItems($changed_items)
    {
        $this->offsetSet('changed_items', $changed_items);

        return $this;
    }

    /**
     * Unset changed_items
     */
    public function unsetChangedItems() {
        $this->offsetUnset('changed_items');
    }

    /**
     * Valid changed_items
     * @return array|boolean
     */
    public function validateChangedItems()
    {
        if (!$this->offsetExists('changed_items')) {
            return "Property 'changed_items' was not initialized.";
        }
        return false;
    }


    /**
     * Gets link
     * @return string
     */
    public function getLink()
    {
        return $this->offsetGet('link');
    }

    /**
     * Checks link
     * @return boolean
     */
    public function hasLink()
    {
        return $this->offsetExists('link');
    }

    /**
     * Sets link
     * @param string $link URL
     * @return $this
     */
    public function setLink($link)
    {

        if ((!preg_match("/^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/", $link))) {
            throw new \InvalidArgumentException("invalid value for $link when calling LegalDocumentPost., must conform to the pattern /^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/.");
        }

        $this->offsetSet('link', $link);

        return $this;
    }

    /**
     * Unset link
     */
    public function unsetLink() {
        $this->offsetUnset('link');
    }

    /**
     * Valid link
     * @return array|boolean
     */
    public function validateLink()
    {
        if (!$this->offsetExists('link')) {
            return "Property 'link' was not initialized.";
        }
            if ($this->offsetExists('link') && !preg_match("/^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/", $this->offsetGet('link'))) {
                return "invalid value for 'link', must be conform to the pattern /^[a-z0-9\\+]+:\/\/[^\\s\/$.?#].[^\\s]*/.";
            }
        return false;
    }


    /**
     * Gets grace_period
     * @return int
     */
    public function getGracePeriod()
    {
        return $this->offsetGet('grace_period');
    }

    /**
     * Checks grace_period
     * @return boolean
     */
    public function hasGracePeriod()
    {
        return $this->offsetExists('grace_period');
    }

    /**
     * Sets grace_period
     * @param int $grace_period Grace period for accepting given document. Countdown will start after a first preposition to sign it
     * @return $this
     */
    public function setGracePeriod($grace_period)
    {
        $this->offsetSet('grace_period', $grace_period);

        return $this;
    }

    /**
     * Unset grace_period
     */
    public function unsetGracePeriod() {
        $this->offsetUnset('grace_period');
    }

    /**
     * Valid grace_period
     * @return array|boolean
     */
    public function validateGracePeriod()
    {
        if (!$this->offsetExists('grace_period')) {
            return false;
        }
        return false;
    }

}


