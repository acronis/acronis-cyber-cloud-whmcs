<?php
/**
 * TenantPut
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Tenants;

use Acronis\Cloud\Client\BaseModel;
/**
 * TenantPut Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TenantPut extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Tenants\TenantPut';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'name' => 'string',
            'customer_type' => 'string',
            'parent_id' => 'string',
            'kind' => 'string',
            'contact' => '\Acronis\Cloud\Client\Model\Common\Contact\Contact',
            'enabled' => 'bool',
            'customer_id' => 'string',
            'version' => 'int',
            'brand_id' => 'int',
            'internal_tag' => 'string',
            'language' => 'string',
            'default_idp_id' => 'string',
            'update_lock' => '\Acronis\Cloud\Client\Model\Tenants\TenantPutUpdateLock',
            'ancestral_access' => 'bool'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'name' => null,
            'customer_type' => null,
            'parent_id' => null,
            'kind' => null,
            'contact' => null,
            'enabled' => null,
            'customer_id' => null,
            'version' => 'int32',
            'brand_id' => 'int32',
            'internal_tag' => null,
            'language' => null,
            'default_idp_id' => null,
            'update_lock' => null,
            'ancestral_access' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'name' => 'name',
            'customer_type' => 'customer_type',
            'parent_id' => 'parent_id',
            'kind' => 'kind',
            'contact' => 'contact',
            'enabled' => 'enabled',
            'customer_id' => 'customer_id',
            'version' => 'version',
            'brand_id' => 'brand_id',
            'internal_tag' => 'internal_tag',
            'language' => 'language',
            'default_idp_id' => 'default_idp_id',
            'update_lock' => 'update_lock',
            'ancestral_access' => 'ancestral_access'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'name' => 'setName',
            'customer_type' => 'setCustomerType',
            'parent_id' => 'setParentId',
            'kind' => 'setKind',
            'contact' => 'setContact',
            'enabled' => 'setEnabled',
            'customer_id' => 'setCustomerId',
            'version' => 'setVersion',
            'brand_id' => 'setBrandId',
            'internal_tag' => 'setInternalTag',
            'language' => 'setLanguage',
            'default_idp_id' => 'setDefaultIdpId',
            'update_lock' => 'setUpdateLock',
            'ancestral_access' => 'setAncestralAccess'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'name' => 'getName',
            'customer_type' => 'getCustomerType',
            'parent_id' => 'getParentId',
            'kind' => 'getKind',
            'contact' => 'getContact',
            'enabled' => 'getEnabled',
            'customer_id' => 'getCustomerId',
            'version' => 'getVersion',
            'brand_id' => 'getBrandId',
            'internal_tag' => 'getInternalTag',
            'language' => 'getLanguage',
            'default_idp_id' => 'getDefaultIdpId',
            'update_lock' => 'getUpdateLock',
            'ancestral_access' => 'getAncestralAccess'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'name' => 'hasName',
            'customer_type' => 'hasCustomerType',
            'parent_id' => 'hasParentId',
            'kind' => 'hasKind',
            'contact' => 'hasContact',
            'enabled' => 'hasEnabled',
            'customer_id' => 'hasCustomerId',
            'version' => 'hasVersion',
            'brand_id' => 'hasBrandId',
            'internal_tag' => 'hasInternalTag',
            'language' => 'hasLanguage',
            'default_idp_id' => 'hasDefaultIdpId',
            'update_lock' => 'hasUpdateLock',
            'ancestral_access' => 'hasAncestralAccess'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'name' => 'validateName',
            'customer_type' => 'validateCustomerType',
            'parent_id' => 'validateParentId',
            'kind' => 'validateKind',
            'contact' => 'validateContact',
            'enabled' => 'validateEnabled',
            'customer_id' => 'validateCustomerId',
            'version' => 'validateVersion',
            'brand_id' => 'validateBrandId',
            'internal_tag' => 'validateInternalTag',
            'language' => 'validateLanguage',
            'default_idp_id' => 'validateDefaultIdpId',
            'update_lock' => 'validateUpdateLock',
            'ancestral_access' => 'validateAncestralAccess'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateName())) {
            $invalid_properties[] = $this->validateName();
        }
        if (!empty($this->validateCustomerType())) {
            $invalid_properties[] = $this->validateCustomerType();
        }
        if (!empty($this->validateParentId())) {
            $invalid_properties[] = $this->validateParentId();
        }
        if (!empty($this->validateKind())) {
            $invalid_properties[] = $this->validateKind();
        }
        if (!empty($this->validateContact())) {
            $invalid_properties[] = $this->validateContact();
        }
        if (!empty($this->validateEnabled())) {
            $invalid_properties[] = $this->validateEnabled();
        }
        if (!empty($this->validateCustomerId())) {
            $invalid_properties[] = $this->validateCustomerId();
        }
        if (!empty($this->validateVersion())) {
            $invalid_properties[] = $this->validateVersion();
        }
        if (!empty($this->validateBrandId())) {
            $invalid_properties[] = $this->validateBrandId();
        }
        if (!empty($this->validateInternalTag())) {
            $invalid_properties[] = $this->validateInternalTag();
        }
        if (!empty($this->validateLanguage())) {
            $invalid_properties[] = $this->validateLanguage();
        }
        if (!empty($this->validateDefaultIdpId())) {
            $invalid_properties[] = $this->validateDefaultIdpId();
        }
        if (!empty($this->validateUpdateLock())) {
            $invalid_properties[] = $this->validateUpdateLock();
        }
        if (!empty($this->validateAncestralAccess())) {
            $invalid_properties[] = $this->validateAncestralAccess();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateName())) {
            return false;
        }
        if (!empty($this->validateCustomerType())) {
            return false;
        }
        if (!empty($this->validateParentId())) {
            return false;
        }
        if (!empty($this->validateKind())) {
            return false;
        }
        if (!empty($this->validateContact())) {
            return false;
        }
        if (!empty($this->validateEnabled())) {
            return false;
        }
        if (!empty($this->validateCustomerId())) {
            return false;
        }
        if (!empty($this->validateVersion())) {
            return false;
        }
        if (!empty($this->validateBrandId())) {
            return false;
        }
        if (!empty($this->validateInternalTag())) {
            return false;
        }
        if (!empty($this->validateLanguage())) {
            return false;
        }
        if (!empty($this->validateDefaultIdpId())) {
            return false;
        }
        if (!empty($this->validateUpdateLock())) {
            return false;
        }
        if (!empty($this->validateAncestralAccess())) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->offsetGet('name');
    }

    /**
     * Checks name
     * @return boolean
     */
    public function hasName()
    {
        return $this->offsetExists('name');
    }

    /**
     * Sets name
     * @param string $name Human-readable name that will be displayed to the users
     * @return $this
     */
    public function setName($name)
    {
        $this->offsetSet('name', $name);

        return $this;
    }

    /**
     * Unset name
     */
    public function unsetName() {
        $this->offsetUnset('name');
    }

    /**
     * Valid name
     * @return array|boolean
     */
    public function validateName()
    {
        if (!$this->offsetExists('name')) {
            return false;
        }
        return false;
    }


    /**
     * Gets customer_type
     * @return string
     */
    public function getCustomerType()
    {
        return $this->offsetGet('customer_type');
    }

    /**
     * Checks customer_type
     * @return boolean
     */
    public function hasCustomerType()
    {
        return $this->offsetExists('customer_type');
    }

    /**
     * Sets customer_type
     * @param string $customer_type Current implementations supports following values: enterprise, consumer, small_office
     * @return $this
     */
    public function setCustomerType($customer_type)
    {
        $this->offsetSet('customer_type', $customer_type);

        return $this;
    }

    /**
     * Unset customer_type
     */
    public function unsetCustomerType() {
        $this->offsetUnset('customer_type');
    }

    /**
     * Valid customer_type
     * @return array|boolean
     */
    public function validateCustomerType()
    {
        if (!$this->offsetExists('customer_type')) {
            return false;
        }
        return false;
    }


    /**
     * Gets parent_id
     * @return string
     */
    public function getParentId()
    {
        return $this->offsetGet('parent_id');
    }

    /**
     * Checks parent_id
     * @return boolean
     */
    public function hasParentId()
    {
        return $this->offsetExists('parent_id');
    }

    /**
     * Sets parent_id
     * @param string $parent_id
     * @return $this
     */
    public function setParentId($parent_id)
    {
        if (!is_null($parent_id) && (strlen($parent_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $parent_id when calling TenantPut., must be smaller than or equal to 36.');
        }
        if (!is_null($parent_id) && (strlen($parent_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $parent_id when calling TenantPut., must be bigger than or equal to 36.');
        }
        if (!is_null($parent_id) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $parent_id))) {
            throw new \InvalidArgumentException("invalid value for $parent_id when calling TenantPut., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('parent_id', $parent_id);

        return $this;
    }

    /**
     * Unset parent_id
     */
    public function unsetParentId() {
        $this->offsetUnset('parent_id');
    }

    /**
     * Valid parent_id
     * @return array|boolean
     */
    public function validateParentId()
    {
        if (!$this->offsetExists('parent_id')) {
            return false;
        }
            if ($this->offsetExists('parent_id') && strlen($this->offsetGet('parent_id')) > 36) {
                return "invalid value for 'parent_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('parent_id') && strlen($this->offsetGet('parent_id')) < 36) {
                return "invalid value for 'parent_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('parent_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('parent_id'))) {
                return "invalid value for 'parent_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets kind
     * @return string
     */
    public function getKind()
    {
        return $this->offsetGet('kind');
    }

    /**
     * Checks kind
     * @return boolean
     */
    public function hasKind()
    {
        return $this->offsetExists('kind');
    }

    /**
     * Sets kind
     * @param string $kind Current implementations supports following values: root, partner, folder, customer, unit
     * @return $this
     */
    public function setKind($kind)
    {
        $this->offsetSet('kind', $kind);

        return $this;
    }

    /**
     * Unset kind
     */
    public function unsetKind() {
        $this->offsetUnset('kind');
    }

    /**
     * Valid kind
     * @return array|boolean
     */
    public function validateKind()
    {
        if (!$this->offsetExists('kind')) {
            return false;
        }
        return false;
    }


    /**
     * Gets contact
     * @return \Acronis\Cloud\Client\Model\Common\Contact\Contact
     */
    public function getContact()
    {
        return $this->offsetGet('contact');
    }

    /**
     * Checks contact
     * @return boolean
     */
    public function hasContact()
    {
        return $this->offsetExists('contact');
    }

    /**
     * Sets contact
     * @param \Acronis\Cloud\Client\Model\Common\Contact\Contact $contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->offsetSet('contact', $contact);

        return $this;
    }

    /**
     * Unset contact
     */
    public function unsetContact() {
        $this->offsetUnset('contact');
    }

    /**
     * Valid contact
     * @return array|boolean
     */
    public function validateContact()
    {
        if (!$this->offsetExists('contact')) {
            return false;
        }
        return false;
    }


    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->offsetGet('enabled');
    }

    /**
     * Checks enabled
     * @return boolean
     */
    public function hasEnabled()
    {
        return $this->offsetExists('enabled');
    }

    /**
     * Sets enabled
     * @param bool $enabled Flag, indicates whether the tenant is enabled or disabled
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->offsetSet('enabled', $enabled);

        return $this;
    }

    /**
     * Unset enabled
     */
    public function unsetEnabled() {
        $this->offsetUnset('enabled');
    }

    /**
     * Valid enabled
     * @return array|boolean
     */
    public function validateEnabled()
    {
        if (!$this->offsetExists('enabled')) {
            return false;
        }
        return false;
    }


    /**
     * Gets customer_id
     * @return string
     */
    public function getCustomerId()
    {
        return $this->offsetGet('customer_id');
    }

    /**
     * Checks customer_id
     * @return boolean
     */
    public function hasCustomerId()
    {
        return $this->offsetExists('customer_id');
    }

    /**
     * Sets customer_id
     * @param string $customer_id ID from external system; for reporting purposes
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->offsetSet('customer_id', $customer_id);

        return $this;
    }

    /**
     * Unset customer_id
     */
    public function unsetCustomerId() {
        $this->offsetUnset('customer_id');
    }

    /**
     * Valid customer_id
     * @return array|boolean
     */
    public function validateCustomerId()
    {
        if (!$this->offsetExists('customer_id')) {
            return false;
        }
        return false;
    }


    /**
     * Gets version
     * @return int
     */
    public function getVersion()
    {
        return $this->offsetGet('version');
    }

    /**
     * Checks version
     * @return boolean
     */
    public function hasVersion()
    {
        return $this->offsetExists('version');
    }

    /**
     * Sets version
     * @param int $version Tenant`s version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->offsetSet('version', $version);

        return $this;
    }

    /**
     * Unset version
     */
    public function unsetVersion() {
        $this->offsetUnset('version');
    }

    /**
     * Valid version
     * @return array|boolean
     */
    public function validateVersion()
    {
        if (!$this->offsetExists('version')) {
            return "Property 'version' was not initialized.";
        }
        return false;
    }


    /**
     * Gets brand_id
     * @return int
     */
    public function getBrandId()
    {
        return $this->offsetGet('brand_id');
    }

    /**
     * Checks brand_id
     * @return boolean
     */
    public function hasBrandId()
    {
        return $this->offsetExists('brand_id');
    }

    /**
     * Sets brand_id
     * @param int $brand_id Brand id
     * @return $this
     */
    public function setBrandId($brand_id)
    {
        $this->offsetSet('brand_id', $brand_id);

        return $this;
    }

    /**
     * Unset brand_id
     */
    public function unsetBrandId() {
        $this->offsetUnset('brand_id');
    }

    /**
     * Valid brand_id
     * @return array|boolean
     */
    public function validateBrandId()
    {
        if (!$this->offsetExists('brand_id')) {
            return false;
        }
        return false;
    }


    /**
     * Gets internal_tag
     * @return string
     */
    public function getInternalTag()
    {
        return $this->offsetGet('internal_tag');
    }

    /**
     * Checks internal_tag
     * @return boolean
     */
    public function hasInternalTag()
    {
        return $this->offsetExists('internal_tag');
    }

    /**
     * Sets internal_tag
     * @param string $internal_tag Internal tag
     * @return $this
     */
    public function setInternalTag($internal_tag)
    {
        $this->offsetSet('internal_tag', $internal_tag);

        return $this;
    }

    /**
     * Unset internal_tag
     */
    public function unsetInternalTag() {
        $this->offsetUnset('internal_tag');
    }

    /**
     * Valid internal_tag
     * @return array|boolean
     */
    public function validateInternalTag()
    {
        if (!$this->offsetExists('internal_tag')) {
            return false;
        }
        return false;
    }


    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->offsetGet('language');
    }

    /**
     * Checks language
     * @return boolean
     */
    public function hasLanguage()
    {
        return $this->offsetExists('language');
    }

    /**
     * Sets language
     * @param string $language Tenant`s preferred language
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->offsetSet('language', $language);

        return $this;
    }

    /**
     * Unset language
     */
    public function unsetLanguage() {
        $this->offsetUnset('language');
    }

    /**
     * Valid language
     * @return array|boolean
     */
    public function validateLanguage()
    {
        if (!$this->offsetExists('language')) {
            return false;
        }
        return false;
    }


    /**
     * Gets default_idp_id
     * @return string
     */
    public function getDefaultIdpId()
    {
        return $this->offsetGet('default_idp_id');
    }

    /**
     * Checks default_idp_id
     * @return boolean
     */
    public function hasDefaultIdpId()
    {
        return $this->offsetExists('default_idp_id');
    }

    /**
     * Sets default_idp_id
     * @param string $default_idp_id
     * @return $this
     */
    public function setDefaultIdpId($default_idp_id)
    {
        if (!is_null($default_idp_id) && (strlen($default_idp_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $default_idp_id when calling TenantPut., must be smaller than or equal to 36.');
        }
        if (!is_null($default_idp_id) && (strlen($default_idp_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $default_idp_id when calling TenantPut., must be bigger than or equal to 36.');
        }
        if (!is_null($default_idp_id) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $default_idp_id))) {
            throw new \InvalidArgumentException("invalid value for $default_idp_id when calling TenantPut., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('default_idp_id', $default_idp_id);

        return $this;
    }

    /**
     * Unset default_idp_id
     */
    public function unsetDefaultIdpId() {
        $this->offsetUnset('default_idp_id');
    }

    /**
     * Valid default_idp_id
     * @return array|boolean
     */
    public function validateDefaultIdpId()
    {
        if (!$this->offsetExists('default_idp_id')) {
            return false;
        }
            if ($this->offsetExists('default_idp_id') && strlen($this->offsetGet('default_idp_id')) > 36) {
                return "invalid value for 'default_idp_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('default_idp_id') && strlen($this->offsetGet('default_idp_id')) < 36) {
                return "invalid value for 'default_idp_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('default_idp_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('default_idp_id'))) {
                return "invalid value for 'default_idp_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets update_lock
     * @return \Acronis\Cloud\Client\Model\Tenants\TenantPutUpdateLock
     */
    public function getUpdateLock()
    {
        return $this->offsetGet('update_lock');
    }

    /**
     * Checks update_lock
     * @return boolean
     */
    public function hasUpdateLock()
    {
        return $this->offsetExists('update_lock');
    }

    /**
     * Sets update_lock
     * @param \Acronis\Cloud\Client\Model\Tenants\TenantPutUpdateLock $update_lock
     * @return $this
     */
    public function setUpdateLock($update_lock)
    {
        $this->offsetSet('update_lock', $update_lock);

        return $this;
    }

    /**
     * Unset update_lock
     */
    public function unsetUpdateLock() {
        $this->offsetUnset('update_lock');
    }

    /**
     * Valid update_lock
     * @return array|boolean
     */
    public function validateUpdateLock()
    {
        if (!$this->offsetExists('update_lock')) {
            return false;
        }
        return false;
    }


    /**
     * Gets ancestral_access
     * @return bool
     */
    public function getAncestralAccess()
    {
        return $this->offsetGet('ancestral_access');
    }

    /**
     * Checks ancestral_access
     * @return boolean
     */
    public function hasAncestralAccess()
    {
        return $this->offsetExists('ancestral_access');
    }

    /**
     * Sets ancestral_access
     * @param bool $ancestral_access Indicates whether tenant's indirect ancestors have access to it
     * @return $this
     */
    public function setAncestralAccess($ancestral_access)
    {
        $this->offsetSet('ancestral_access', $ancestral_access);

        return $this;
    }

    /**
     * Unset ancestral_access
     */
    public function unsetAncestralAccess() {
        $this->offsetUnset('ancestral_access');
    }

    /**
     * Valid ancestral_access
     * @return array|boolean
     */
    public function validateAncestralAccess()
    {
        if (!$this->offsetExists('ancestral_access')) {
            return false;
        }
        return false;
    }

}


