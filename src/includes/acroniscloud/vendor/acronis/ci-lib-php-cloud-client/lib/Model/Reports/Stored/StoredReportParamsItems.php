<?php
/**
 * StoredReportParamsItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Reports\Stored;

use Acronis\Cloud\Client\BaseModel;
/**
 * StoredReportParamsItems Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StoredReportParamsItems extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Reports\Stored\StoredReportParamsItems';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'id' => 'string',
            'report_format' => '\Acronis\Cloud\Client\Model\Reports\Stored\StoredReportParamsReportFormat',
            'size' => 'int',
            'created_at' => 'string',
            'status' => '\Acronis\Cloud\Client\Model\Reports\Stored\StoredReportParamsStatus'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'id' => null,
            'report_format' => null,
            'size' => 'int32',
            'created_at' => null,
            'status' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'id' => 'id',
            'report_format' => 'report_format',
            'size' => 'size',
            'created_at' => 'created_at',
            'status' => 'status'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'id' => 'setId',
            'report_format' => 'setReportFormat',
            'size' => 'setSize',
            'created_at' => 'setCreatedAt',
            'status' => 'setStatus'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'id' => 'getId',
            'report_format' => 'getReportFormat',
            'size' => 'getSize',
            'created_at' => 'getCreatedAt',
            'status' => 'getStatus'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'id' => 'hasId',
            'report_format' => 'hasReportFormat',
            'size' => 'hasSize',
            'created_at' => 'hasCreatedAt',
            'status' => 'hasStatus'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'id' => 'validateId',
            'report_format' => 'validateReportFormat',
            'size' => 'validateSize',
            'created_at' => 'validateCreatedAt',
            'status' => 'validateStatus'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateId())) {
            $invalid_properties[] = $this->validateId();
        }
        if (!empty($this->validateReportFormat())) {
            $invalid_properties[] = $this->validateReportFormat();
        }
        if (!empty($this->validateSize())) {
            $invalid_properties[] = $this->validateSize();
        }
        if (!empty($this->validateCreatedAt())) {
            $invalid_properties[] = $this->validateCreatedAt();
        }
        if (!empty($this->validateStatus())) {
            $invalid_properties[] = $this->validateStatus();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateId())) {
            return false;
        }
        if (!empty($this->validateReportFormat())) {
            return false;
        }
        if (!empty($this->validateSize())) {
            return false;
        }
        if (!empty($this->validateCreatedAt())) {
            return false;
        }
        if (!empty($this->validateStatus())) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->offsetGet('id');
    }

    /**
     * Checks id
     * @return boolean
     */
    public function hasId()
    {
        return $this->offsetExists('id');
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        if (!is_null($id) && (strlen($id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling StoredReportParamsItems., must be smaller than or equal to 36.');
        }
        if (!is_null($id) && (strlen($id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling StoredReportParamsItems., must be bigger than or equal to 36.');
        }
        if (!is_null($id) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling StoredReportParamsItems., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('id', $id);

        return $this;
    }

    /**
     * Unset id
     */
    public function unsetId() {
        $this->offsetUnset('id');
    }

    /**
     * Valid id
     * @return array|boolean
     */
    public function validateId()
    {
        if (!$this->offsetExists('id')) {
            return false;
        }
            if ($this->offsetExists('id') && strlen($this->offsetGet('id')) > 36) {
                return "invalid value for 'id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('id') && strlen($this->offsetGet('id')) < 36) {
                return "invalid value for 'id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('id'))) {
                return "invalid value for 'id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets report_format
     * @return \Acronis\Cloud\Client\Model\Reports\Stored\StoredReportParamsReportFormat
     */
    public function getReportFormat()
    {
        return $this->offsetGet('report_format');
    }

    /**
     * Checks report_format
     * @return boolean
     */
    public function hasReportFormat()
    {
        return $this->offsetExists('report_format');
    }

    /**
     * Sets report_format
     * @param \Acronis\Cloud\Client\Model\Reports\Stored\StoredReportParamsReportFormat $report_format
     * @return $this
     */
    public function setReportFormat($report_format)
    {
        $this->offsetSet('report_format', $report_format);

        return $this;
    }

    /**
     * Unset report_format
     */
    public function unsetReportFormat() {
        $this->offsetUnset('report_format');
    }

    /**
     * Valid report_format
     * @return array|boolean
     */
    public function validateReportFormat()
    {
        if (!$this->offsetExists('report_format')) {
            return "Property 'report_format' was not initialized.";
        }
        return false;
    }


    /**
     * Gets size
     * @return int
     */
    public function getSize()
    {
        return $this->offsetGet('size');
    }

    /**
     * Checks size
     * @return boolean
     */
    public function hasSize()
    {
        return $this->offsetExists('size');
    }

    /**
     * Sets size
     * @param int $size Stored report compressed size in bytes
     * @return $this
     */
    public function setSize($size)
    {
        $this->offsetSet('size', $size);

        return $this;
    }

    /**
     * Unset size
     */
    public function unsetSize() {
        $this->offsetUnset('size');
    }

    /**
     * Valid size
     * @return array|boolean
     */
    public function validateSize()
    {
        if (!$this->offsetExists('size')) {
            return false;
        }
        return false;
    }


    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->offsetGet('created_at');
    }

    /**
     * Checks created_at
     * @return boolean
     */
    public function hasCreatedAt()
    {
        return $this->offsetExists('created_at');
    }

    /**
     * Sets created_at
     * @param string $created_at RFC3339 Formatted date
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        if ((strlen($created_at) > 32)) {
            throw new \InvalidArgumentException('invalid length for $created_at when calling StoredReportParamsItems., must be smaller than or equal to 32.');
        }
        if ((strlen($created_at) < 19)) {
            throw new \InvalidArgumentException('invalid length for $created_at when calling StoredReportParamsItems., must be bigger than or equal to 19.');
        }
        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $created_at))) {
            throw new \InvalidArgumentException("invalid value for $created_at when calling StoredReportParamsItems., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.");
        }

        $this->offsetSet('created_at', $created_at);

        return $this;
    }

    /**
     * Unset created_at
     */
    public function unsetCreatedAt() {
        $this->offsetUnset('created_at');
    }

    /**
     * Valid created_at
     * @return array|boolean
     */
    public function validateCreatedAt()
    {
        if (!$this->offsetExists('created_at')) {
            return "Property 'created_at' was not initialized.";
        }
            if ($this->offsetExists('created_at') && strlen($this->offsetGet('created_at')) > 32) {
                return "invalid value for 'created_at', the character length must be smaller than or equal to 32.";
            }
            if ($this->offsetExists('created_at') && strlen($this->offsetGet('created_at')) < 19) {
                return "invalid value for 'created_at', the character length must be bigger than or equal to 19.";
            }
            if ($this->offsetExists('created_at') && !preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $this->offsetGet('created_at'))) {
                return "invalid value for 'created_at', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.";
            }
        return false;
    }


    /**
     * Gets status
     * @return \Acronis\Cloud\Client\Model\Reports\Stored\StoredReportParamsStatus
     */
    public function getStatus()
    {
        return $this->offsetGet('status');
    }

    /**
     * Checks status
     * @return boolean
     */
    public function hasStatus()
    {
        return $this->offsetExists('status');
    }

    /**
     * Sets status
     * @param \Acronis\Cloud\Client\Model\Reports\Stored\StoredReportParamsStatus $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->offsetSet('status', $status);

        return $this;
    }

    /**
     * Unset status
     */
    public function unsetStatus() {
        $this->offsetUnset('status');
    }

    /**
     * Valid status
     * @return array|boolean
     */
    public function validateStatus()
    {
        if (!$this->offsetExists('status')) {
            return "Property 'status' was not initialized.";
        }
        return false;
    }

}


