<?php
/**
 * OpenIdConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\OpenIdConfiguration;

use Acronis\Cloud\Client\BaseModel;
/**
 * OpenIdConfiguration Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OpenIdConfiguration extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OpenIdConfiguration\OpenIdConfiguration';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'issuer' => 'string',
            'authorization_endpoint' => 'string',
            'token_endpoint' => 'string',
            'jwks_uri' => 'string',
            'response_types_supported' => 'string[]',
            'subject_types_supported' => 'string[]',
            'id_token_signing_alg_values_supported' => 'string[]',
            'device_authorization_endpoint' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'issuer' => null,
            'authorization_endpoint' => null,
            'token_endpoint' => null,
            'jwks_uri' => null,
            'response_types_supported' => null,
            'subject_types_supported' => null,
            'id_token_signing_alg_values_supported' => null,
            'device_authorization_endpoint' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'issuer' => 'issuer',
            'authorization_endpoint' => 'authorization_endpoint',
            'token_endpoint' => 'token_endpoint',
            'jwks_uri' => 'jwks_uri',
            'response_types_supported' => 'response_types_supported',
            'subject_types_supported' => 'subject_types_supported',
            'id_token_signing_alg_values_supported' => 'id_token_signing_alg_values_supported',
            'device_authorization_endpoint' => 'device_authorization_endpoint'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'issuer' => 'setIssuer',
            'authorization_endpoint' => 'setAuthorizationEndpoint',
            'token_endpoint' => 'setTokenEndpoint',
            'jwks_uri' => 'setJwksUri',
            'response_types_supported' => 'setResponseTypesSupported',
            'subject_types_supported' => 'setSubjectTypesSupported',
            'id_token_signing_alg_values_supported' => 'setIdTokenSigningAlgValuesSupported',
            'device_authorization_endpoint' => 'setDeviceAuthorizationEndpoint'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'issuer' => 'getIssuer',
            'authorization_endpoint' => 'getAuthorizationEndpoint',
            'token_endpoint' => 'getTokenEndpoint',
            'jwks_uri' => 'getJwksUri',
            'response_types_supported' => 'getResponseTypesSupported',
            'subject_types_supported' => 'getSubjectTypesSupported',
            'id_token_signing_alg_values_supported' => 'getIdTokenSigningAlgValuesSupported',
            'device_authorization_endpoint' => 'getDeviceAuthorizationEndpoint'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'issuer' => 'hasIssuer',
            'authorization_endpoint' => 'hasAuthorizationEndpoint',
            'token_endpoint' => 'hasTokenEndpoint',
            'jwks_uri' => 'hasJwksUri',
            'response_types_supported' => 'hasResponseTypesSupported',
            'subject_types_supported' => 'hasSubjectTypesSupported',
            'id_token_signing_alg_values_supported' => 'hasIdTokenSigningAlgValuesSupported',
            'device_authorization_endpoint' => 'hasDeviceAuthorizationEndpoint'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'issuer' => 'validateIssuer',
            'authorization_endpoint' => 'validateAuthorizationEndpoint',
            'token_endpoint' => 'validateTokenEndpoint',
            'jwks_uri' => 'validateJwksUri',
            'response_types_supported' => 'validateResponseTypesSupported',
            'subject_types_supported' => 'validateSubjectTypesSupported',
            'id_token_signing_alg_values_supported' => 'validateIdTokenSigningAlgValuesSupported',
            'device_authorization_endpoint' => 'validateDeviceAuthorizationEndpoint'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateIssuer())) {
            $invalid_properties[] = $this->validateIssuer();
        }
        if (!empty($this->validateAuthorizationEndpoint())) {
            $invalid_properties[] = $this->validateAuthorizationEndpoint();
        }
        if (!empty($this->validateTokenEndpoint())) {
            $invalid_properties[] = $this->validateTokenEndpoint();
        }
        if (!empty($this->validateJwksUri())) {
            $invalid_properties[] = $this->validateJwksUri();
        }
        if (!empty($this->validateResponseTypesSupported())) {
            $invalid_properties[] = $this->validateResponseTypesSupported();
        }
        if (!empty($this->validateSubjectTypesSupported())) {
            $invalid_properties[] = $this->validateSubjectTypesSupported();
        }
        if (!empty($this->validateIdTokenSigningAlgValuesSupported())) {
            $invalid_properties[] = $this->validateIdTokenSigningAlgValuesSupported();
        }
        if (!empty($this->validateDeviceAuthorizationEndpoint())) {
            $invalid_properties[] = $this->validateDeviceAuthorizationEndpoint();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateIssuer())) {
            return false;
        }
        if (!empty($this->validateAuthorizationEndpoint())) {
            return false;
        }
        if (!empty($this->validateTokenEndpoint())) {
            return false;
        }
        if (!empty($this->validateJwksUri())) {
            return false;
        }
        if (!empty($this->validateResponseTypesSupported())) {
            return false;
        }
        if (!empty($this->validateSubjectTypesSupported())) {
            return false;
        }
        if (!empty($this->validateIdTokenSigningAlgValuesSupported())) {
            return false;
        }
        if (!empty($this->validateDeviceAuthorizationEndpoint())) {
            return false;
        }
        return true;
    }


    /**
     * Gets issuer
     * @return string
     */
    public function getIssuer()
    {
        return $this->offsetGet('issuer');
    }

    /**
     * Checks issuer
     * @return boolean
     */
    public function hasIssuer()
    {
        return $this->offsetExists('issuer');
    }

    /**
     * Sets issuer
     * @param string $issuer
     * @return $this
     */
    public function setIssuer($issuer)
    {
        $this->offsetSet('issuer', $issuer);

        return $this;
    }

    /**
     * Unset issuer
     */
    public function unsetIssuer() {
        $this->offsetUnset('issuer');
    }

    /**
     * Valid issuer
     * @return array|boolean
     */
    public function validateIssuer()
    {
        if (!$this->offsetExists('issuer')) {
            return "Property 'issuer' was not initialized.";
        }
        return false;
    }


    /**
     * Gets authorization_endpoint
     * @return string
     */
    public function getAuthorizationEndpoint()
    {
        return $this->offsetGet('authorization_endpoint');
    }

    /**
     * Checks authorization_endpoint
     * @return boolean
     */
    public function hasAuthorizationEndpoint()
    {
        return $this->offsetExists('authorization_endpoint');
    }

    /**
     * Sets authorization_endpoint
     * @param string $authorization_endpoint
     * @return $this
     */
    public function setAuthorizationEndpoint($authorization_endpoint)
    {
        $this->offsetSet('authorization_endpoint', $authorization_endpoint);

        return $this;
    }

    /**
     * Unset authorization_endpoint
     */
    public function unsetAuthorizationEndpoint() {
        $this->offsetUnset('authorization_endpoint');
    }

    /**
     * Valid authorization_endpoint
     * @return array|boolean
     */
    public function validateAuthorizationEndpoint()
    {
        if (!$this->offsetExists('authorization_endpoint')) {
            return "Property 'authorization_endpoint' was not initialized.";
        }
        return false;
    }


    /**
     * Gets token_endpoint
     * @return string
     */
    public function getTokenEndpoint()
    {
        return $this->offsetGet('token_endpoint');
    }

    /**
     * Checks token_endpoint
     * @return boolean
     */
    public function hasTokenEndpoint()
    {
        return $this->offsetExists('token_endpoint');
    }

    /**
     * Sets token_endpoint
     * @param string $token_endpoint
     * @return $this
     */
    public function setTokenEndpoint($token_endpoint)
    {
        $this->offsetSet('token_endpoint', $token_endpoint);

        return $this;
    }

    /**
     * Unset token_endpoint
     */
    public function unsetTokenEndpoint() {
        $this->offsetUnset('token_endpoint');
    }

    /**
     * Valid token_endpoint
     * @return array|boolean
     */
    public function validateTokenEndpoint()
    {
        if (!$this->offsetExists('token_endpoint')) {
            return "Property 'token_endpoint' was not initialized.";
        }
        return false;
    }


    /**
     * Gets jwks_uri
     * @return string
     */
    public function getJwksUri()
    {
        return $this->offsetGet('jwks_uri');
    }

    /**
     * Checks jwks_uri
     * @return boolean
     */
    public function hasJwksUri()
    {
        return $this->offsetExists('jwks_uri');
    }

    /**
     * Sets jwks_uri
     * @param string $jwks_uri
     * @return $this
     */
    public function setJwksUri($jwks_uri)
    {
        $this->offsetSet('jwks_uri', $jwks_uri);

        return $this;
    }

    /**
     * Unset jwks_uri
     */
    public function unsetJwksUri() {
        $this->offsetUnset('jwks_uri');
    }

    /**
     * Valid jwks_uri
     * @return array|boolean
     */
    public function validateJwksUri()
    {
        if (!$this->offsetExists('jwks_uri')) {
            return "Property 'jwks_uri' was not initialized.";
        }
        return false;
    }


    /**
     * Gets response_types_supported
     * @return string[]
     */
    public function getResponseTypesSupported()
    {
        return $this->offsetGet('response_types_supported');
    }

    /**
     * Checks response_types_supported
     * @return boolean
     */
    public function hasResponseTypesSupported()
    {
        return $this->offsetExists('response_types_supported');
    }

    /**
     * Sets response_types_supported
     * @param string[] $response_types_supported
     * @return $this
     */
    public function setResponseTypesSupported($response_types_supported)
    {
        $this->offsetSet('response_types_supported', $response_types_supported);

        return $this;
    }

    /**
     * Unset response_types_supported
     */
    public function unsetResponseTypesSupported() {
        $this->offsetUnset('response_types_supported');
    }

    /**
     * Valid response_types_supported
     * @return array|boolean
     */
    public function validateResponseTypesSupported()
    {
        if (!$this->offsetExists('response_types_supported')) {
            return "Property 'response_types_supported' was not initialized.";
        }
        return false;
    }


    /**
     * Gets subject_types_supported
     * @return string[]
     */
    public function getSubjectTypesSupported()
    {
        return $this->offsetGet('subject_types_supported');
    }

    /**
     * Checks subject_types_supported
     * @return boolean
     */
    public function hasSubjectTypesSupported()
    {
        return $this->offsetExists('subject_types_supported');
    }

    /**
     * Sets subject_types_supported
     * @param string[] $subject_types_supported
     * @return $this
     */
    public function setSubjectTypesSupported($subject_types_supported)
    {
        $this->offsetSet('subject_types_supported', $subject_types_supported);

        return $this;
    }

    /**
     * Unset subject_types_supported
     */
    public function unsetSubjectTypesSupported() {
        $this->offsetUnset('subject_types_supported');
    }

    /**
     * Valid subject_types_supported
     * @return array|boolean
     */
    public function validateSubjectTypesSupported()
    {
        if (!$this->offsetExists('subject_types_supported')) {
            return "Property 'subject_types_supported' was not initialized.";
        }
        return false;
    }


    /**
     * Gets id_token_signing_alg_values_supported
     * @return string[]
     */
    public function getIdTokenSigningAlgValuesSupported()
    {
        return $this->offsetGet('id_token_signing_alg_values_supported');
    }

    /**
     * Checks id_token_signing_alg_values_supported
     * @return boolean
     */
    public function hasIdTokenSigningAlgValuesSupported()
    {
        return $this->offsetExists('id_token_signing_alg_values_supported');
    }

    /**
     * Sets id_token_signing_alg_values_supported
     * @param string[] $id_token_signing_alg_values_supported
     * @return $this
     */
    public function setIdTokenSigningAlgValuesSupported($id_token_signing_alg_values_supported)
    {
        $this->offsetSet('id_token_signing_alg_values_supported', $id_token_signing_alg_values_supported);

        return $this;
    }

    /**
     * Unset id_token_signing_alg_values_supported
     */
    public function unsetIdTokenSigningAlgValuesSupported() {
        $this->offsetUnset('id_token_signing_alg_values_supported');
    }

    /**
     * Valid id_token_signing_alg_values_supported
     * @return array|boolean
     */
    public function validateIdTokenSigningAlgValuesSupported()
    {
        if (!$this->offsetExists('id_token_signing_alg_values_supported')) {
            return "Property 'id_token_signing_alg_values_supported' was not initialized.";
        }
        return false;
    }


    /**
     * Gets device_authorization_endpoint
     * @return string
     */
    public function getDeviceAuthorizationEndpoint()
    {
        return $this->offsetGet('device_authorization_endpoint');
    }

    /**
     * Checks device_authorization_endpoint
     * @return boolean
     */
    public function hasDeviceAuthorizationEndpoint()
    {
        return $this->offsetExists('device_authorization_endpoint');
    }

    /**
     * Sets device_authorization_endpoint
     * @param string $device_authorization_endpoint
     * @return $this
     */
    public function setDeviceAuthorizationEndpoint($device_authorization_endpoint)
    {
        $this->offsetSet('device_authorization_endpoint', $device_authorization_endpoint);

        return $this;
    }

    /**
     * Unset device_authorization_endpoint
     */
    public function unsetDeviceAuthorizationEndpoint() {
        $this->offsetUnset('device_authorization_endpoint');
    }

    /**
     * Valid device_authorization_endpoint
     * @return array|boolean
     */
    public function validateDeviceAuthorizationEndpoint()
    {
        if (!$this->offsetExists('device_authorization_endpoint')) {
            return false;
        }
        return false;
    }

}


