<?php
/**
 * Identity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Idp;

use Acronis\Cloud\Client\BaseModel;
/**
 * Identity Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Identity extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Idp\Identity';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'id' => 'string',
            'version' => 'int',
            'login' => 'string',
            'email' => 'string',
            'created' => 'string',
            'modified' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'id' => null,
            'version' => 'int32',
            'login' => null,
            'email' => null,
            'created' => null,
            'modified' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'id' => 'id',
            'version' => 'version',
            'login' => 'login',
            'email' => 'email',
            'created' => 'created',
            'modified' => 'modified'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'id' => 'setId',
            'version' => 'setVersion',
            'login' => 'setLogin',
            'email' => 'setEmail',
            'created' => 'setCreated',
            'modified' => 'setModified'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'id' => 'getId',
            'version' => 'getVersion',
            'login' => 'getLogin',
            'email' => 'getEmail',
            'created' => 'getCreated',
            'modified' => 'getModified'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'id' => 'hasId',
            'version' => 'hasVersion',
            'login' => 'hasLogin',
            'email' => 'hasEmail',
            'created' => 'hasCreated',
            'modified' => 'hasModified'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'id' => 'validateId',
            'version' => 'validateVersion',
            'login' => 'validateLogin',
            'email' => 'validateEmail',
            'created' => 'validateCreated',
            'modified' => 'validateModified'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateId())) {
            $invalid_properties[] = $this->validateId();
        }
        if (!empty($this->validateVersion())) {
            $invalid_properties[] = $this->validateVersion();
        }
        if (!empty($this->validateLogin())) {
            $invalid_properties[] = $this->validateLogin();
        }
        if (!empty($this->validateEmail())) {
            $invalid_properties[] = $this->validateEmail();
        }
        if (!empty($this->validateCreated())) {
            $invalid_properties[] = $this->validateCreated();
        }
        if (!empty($this->validateModified())) {
            $invalid_properties[] = $this->validateModified();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateId())) {
            return false;
        }
        if (!empty($this->validateVersion())) {
            return false;
        }
        if (!empty($this->validateLogin())) {
            return false;
        }
        if (!empty($this->validateEmail())) {
            return false;
        }
        if (!empty($this->validateCreated())) {
            return false;
        }
        if (!empty($this->validateModified())) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->offsetGet('id');
    }

    /**
     * Checks id
     * @return boolean
     */
    public function hasId()
    {
        return $this->offsetExists('id');
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        if ((strlen($id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Identity., must be smaller than or equal to 36.');
        }
        if ((strlen($id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Identity., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling Identity., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('id', $id);

        return $this;
    }

    /**
     * Unset id
     */
    public function unsetId() {
        $this->offsetUnset('id');
    }

    /**
     * Valid id
     * @return array|boolean
     */
    public function validateId()
    {
        if (!$this->offsetExists('id')) {
            return "Property 'id' was not initialized.";
        }
            if ($this->offsetExists('id') && strlen($this->offsetGet('id')) > 36) {
                return "invalid value for 'id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('id') && strlen($this->offsetGet('id')) < 36) {
                return "invalid value for 'id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('id'))) {
                return "invalid value for 'id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets version
     * @return int
     */
    public function getVersion()
    {
        return $this->offsetGet('version');
    }

    /**
     * Checks version
     * @return boolean
     */
    public function hasVersion()
    {
        return $this->offsetExists('version');
    }

    /**
     * Sets version
     * @param int $version Auto-incremented entity version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->offsetSet('version', $version);

        return $this;
    }

    /**
     * Unset version
     */
    public function unsetVersion() {
        $this->offsetUnset('version');
    }

    /**
     * Valid version
     * @return array|boolean
     */
    public function validateVersion()
    {
        if (!$this->offsetExists('version')) {
            return "Property 'version' was not initialized.";
        }
        return false;
    }


    /**
     * Gets login
     * @return string
     */
    public function getLogin()
    {
        return $this->offsetGet('login');
    }

    /**
     * Checks login
     * @return boolean
     */
    public function hasLogin()
    {
        return $this->offsetExists('login');
    }

    /**
     * Sets login
     * @param string $login
     * @return $this
     */
    public function setLogin($login)
    {
        $this->offsetSet('login', $login);

        return $this;
    }

    /**
     * Unset login
     */
    public function unsetLogin() {
        $this->offsetUnset('login');
    }

    /**
     * Valid login
     * @return array|boolean
     */
    public function validateLogin()
    {
        if (!$this->offsetExists('login')) {
            return "Property 'login' was not initialized.";
        }
        return false;
    }


    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->offsetGet('email');
    }

    /**
     * Checks email
     * @return boolean
     */
    public function hasEmail()
    {
        return $this->offsetExists('email');
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {

        if ((strlen($email) < 3)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Identity., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/\\S+@\\S+/", $email))) {
            throw new \InvalidArgumentException("invalid value for $email when calling Identity., must conform to the pattern /\\S+@\\S+/.");
        }

        $this->offsetSet('email', $email);

        return $this;
    }

    /**
     * Unset email
     */
    public function unsetEmail() {
        $this->offsetUnset('email');
    }

    /**
     * Valid email
     * @return array|boolean
     */
    public function validateEmail()
    {
        if (!$this->offsetExists('email')) {
            return "Property 'email' was not initialized.";
        }
            if ($this->offsetExists('email') && strlen($this->offsetGet('email')) < 3) {
                return "invalid value for 'email', the character length must be bigger than or equal to 3.";
            }
            if ($this->offsetExists('email') && !preg_match("/\\S+@\\S+/", $this->offsetGet('email'))) {
                return "invalid value for 'email', must be conform to the pattern /\\S+@\\S+/.";
            }
        return false;
    }


    /**
     * Gets created
     * @return string
     */
    public function getCreated()
    {
        return $this->offsetGet('created');
    }

    /**
     * Checks created
     * @return boolean
     */
    public function hasCreated()
    {
        return $this->offsetExists('created');
    }

    /**
     * Sets created
     * @param string $created RFC3339 Formatted date
     * @return $this
     */
    public function setCreated($created)
    {
        if ((strlen($created) > 32)) {
            throw new \InvalidArgumentException('invalid length for $created when calling Identity., must be smaller than or equal to 32.');
        }
        if ((strlen($created) < 19)) {
            throw new \InvalidArgumentException('invalid length for $created when calling Identity., must be bigger than or equal to 19.');
        }
        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $created))) {
            throw new \InvalidArgumentException("invalid value for $created when calling Identity., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.");
        }

        $this->offsetSet('created', $created);

        return $this;
    }

    /**
     * Unset created
     */
    public function unsetCreated() {
        $this->offsetUnset('created');
    }

    /**
     * Valid created
     * @return array|boolean
     */
    public function validateCreated()
    {
        if (!$this->offsetExists('created')) {
            return "Property 'created' was not initialized.";
        }
            if ($this->offsetExists('created') && strlen($this->offsetGet('created')) > 32) {
                return "invalid value for 'created', the character length must be smaller than or equal to 32.";
            }
            if ($this->offsetExists('created') && strlen($this->offsetGet('created')) < 19) {
                return "invalid value for 'created', the character length must be bigger than or equal to 19.";
            }
            if ($this->offsetExists('created') && !preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $this->offsetGet('created'))) {
                return "invalid value for 'created', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.";
            }
        return false;
    }


    /**
     * Gets modified
     * @return string
     */
    public function getModified()
    {
        return $this->offsetGet('modified');
    }

    /**
     * Checks modified
     * @return boolean
     */
    public function hasModified()
    {
        return $this->offsetExists('modified');
    }

    /**
     * Sets modified
     * @param string $modified RFC3339 Formatted date
     * @return $this
     */
    public function setModified($modified)
    {
        if ((strlen($modified) > 32)) {
            throw new \InvalidArgumentException('invalid length for $modified when calling Identity., must be smaller than or equal to 32.');
        }
        if ((strlen($modified) < 19)) {
            throw new \InvalidArgumentException('invalid length for $modified when calling Identity., must be bigger than or equal to 19.');
        }
        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $modified))) {
            throw new \InvalidArgumentException("invalid value for $modified when calling Identity., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.");
        }

        $this->offsetSet('modified', $modified);

        return $this;
    }

    /**
     * Unset modified
     */
    public function unsetModified() {
        $this->offsetUnset('modified');
    }

    /**
     * Valid modified
     * @return array|boolean
     */
    public function validateModified()
    {
        if (!$this->offsetExists('modified')) {
            return "Property 'modified' was not initialized.";
        }
            if ($this->offsetExists('modified') && strlen($this->offsetGet('modified')) > 32) {
                return "invalid value for 'modified', the character length must be smaller than or equal to 32.";
            }
            if ($this->offsetExists('modified') && strlen($this->offsetGet('modified')) < 19) {
                return "invalid value for 'modified', the character length must be bigger than or equal to 19.";
            }
            if ($this->offsetExists('modified') && !preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $this->offsetGet('modified'))) {
                return "invalid value for 'modified', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.";
            }
        return false;
    }

}


