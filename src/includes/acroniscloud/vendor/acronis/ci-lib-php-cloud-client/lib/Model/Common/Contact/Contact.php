<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Common\Contact;

use Acronis\Cloud\Client\BaseModel;
/**
 * Contact Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Contact extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Common\Contact\Contact';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'email' => 'string',
            'address1' => 'string',
            'address2' => 'string',
            'country' => 'string',
            'state' => 'string',
            'city' => 'string',
            'zipcode' => 'string',
            'phone' => 'string',
            'firstname' => 'string',
            'lastname' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'email' => null,
            'address1' => null,
            'address2' => null,
            'country' => null,
            'state' => null,
            'city' => null,
            'zipcode' => null,
            'phone' => null,
            'firstname' => null,
            'lastname' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'email' => 'email',
            'address1' => 'address1',
            'address2' => 'address2',
            'country' => 'country',
            'state' => 'state',
            'city' => 'city',
            'zipcode' => 'zipcode',
            'phone' => 'phone',
            'firstname' => 'firstname',
            'lastname' => 'lastname'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'email' => 'setEmail',
            'address1' => 'setAddress1',
            'address2' => 'setAddress2',
            'country' => 'setCountry',
            'state' => 'setState',
            'city' => 'setCity',
            'zipcode' => 'setZipcode',
            'phone' => 'setPhone',
            'firstname' => 'setFirstname',
            'lastname' => 'setLastname'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'email' => 'getEmail',
            'address1' => 'getAddress1',
            'address2' => 'getAddress2',
            'country' => 'getCountry',
            'state' => 'getState',
            'city' => 'getCity',
            'zipcode' => 'getZipcode',
            'phone' => 'getPhone',
            'firstname' => 'getFirstname',
            'lastname' => 'getLastname'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'email' => 'hasEmail',
            'address1' => 'hasAddress1',
            'address2' => 'hasAddress2',
            'country' => 'hasCountry',
            'state' => 'hasState',
            'city' => 'hasCity',
            'zipcode' => 'hasZipcode',
            'phone' => 'hasPhone',
            'firstname' => 'hasFirstname',
            'lastname' => 'hasLastname'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'email' => 'validateEmail',
            'address1' => 'validateAddress1',
            'address2' => 'validateAddress2',
            'country' => 'validateCountry',
            'state' => 'validateState',
            'city' => 'validateCity',
            'zipcode' => 'validateZipcode',
            'phone' => 'validatePhone',
            'firstname' => 'validateFirstname',
            'lastname' => 'validateLastname'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateEmail())) {
            $invalid_properties[] = $this->validateEmail();
        }
        if (!empty($this->validateAddress1())) {
            $invalid_properties[] = $this->validateAddress1();
        }
        if (!empty($this->validateAddress2())) {
            $invalid_properties[] = $this->validateAddress2();
        }
        if (!empty($this->validateCountry())) {
            $invalid_properties[] = $this->validateCountry();
        }
        if (!empty($this->validateState())) {
            $invalid_properties[] = $this->validateState();
        }
        if (!empty($this->validateCity())) {
            $invalid_properties[] = $this->validateCity();
        }
        if (!empty($this->validateZipcode())) {
            $invalid_properties[] = $this->validateZipcode();
        }
        if (!empty($this->validatePhone())) {
            $invalid_properties[] = $this->validatePhone();
        }
        if (!empty($this->validateFirstname())) {
            $invalid_properties[] = $this->validateFirstname();
        }
        if (!empty($this->validateLastname())) {
            $invalid_properties[] = $this->validateLastname();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateEmail())) {
            return false;
        }
        if (!empty($this->validateAddress1())) {
            return false;
        }
        if (!empty($this->validateAddress2())) {
            return false;
        }
        if (!empty($this->validateCountry())) {
            return false;
        }
        if (!empty($this->validateState())) {
            return false;
        }
        if (!empty($this->validateCity())) {
            return false;
        }
        if (!empty($this->validateZipcode())) {
            return false;
        }
        if (!empty($this->validatePhone())) {
            return false;
        }
        if (!empty($this->validateFirstname())) {
            return false;
        }
        if (!empty($this->validateLastname())) {
            return false;
        }
        return true;
    }


    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->offsetGet('email');
    }

    /**
     * Checks email
     * @return boolean
     */
    public function hasEmail()
    {
        return $this->offsetExists('email');
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        // todo remove `&& $email !== ''` after fixing PLTFRM-12158
        if (!is_null($email) && $email !== '' && (strlen($email) < 3)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Contact., must be bigger than or equal to 3.');
        }
        if (!is_null($email) && $email !== '' && (!preg_match("/\\S+@\\S+/", $email))) {
            throw new \InvalidArgumentException("invalid value for $email when calling Contact., must conform to the pattern /\\S+@\\S+/.");
        }

        $this->offsetSet('email', $email);

        return $this;
    }

    /**
     * Unset email
     */
    public function unsetEmail() {
        $this->offsetUnset('email');
    }

    /**
     * Valid email
     * @return array|boolean
     */
    public function validateEmail()
    {
        // todo remove `|| $this->offsetGet('email') === ''` after fixing PLTFRM-12158
        if (!$this->offsetExists('email') || $this->offsetGet('email') === '') {
            return false;
        }
            if ($this->offsetExists('email') && strlen($this->offsetGet('email')) < 3) {
                return "invalid value for 'email', the character length must be bigger than or equal to 3.";
            }
            if ($this->offsetExists('email') && !preg_match("/\\S+@\\S+/", $this->offsetGet('email'))) {
                return "invalid value for 'email', must be conform to the pattern /\\S+@\\S+/.";
            }
        return false;
    }


    /**
     * Gets address1
     * @return string
     */
    public function getAddress1()
    {
        return $this->offsetGet('address1');
    }

    /**
     * Checks address1
     * @return boolean
     */
    public function hasAddress1()
    {
        return $this->offsetExists('address1');
    }

    /**
     * Sets address1
     * @param string $address1
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->offsetSet('address1', $address1);

        return $this;
    }

    /**
     * Unset address1
     */
    public function unsetAddress1() {
        $this->offsetUnset('address1');
    }

    /**
     * Valid address1
     * @return array|boolean
     */
    public function validateAddress1()
    {
        if (!$this->offsetExists('address1')) {
            return false;
        }
        return false;
    }


    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->offsetGet('address2');
    }

    /**
     * Checks address2
     * @return boolean
     */
    public function hasAddress2()
    {
        return $this->offsetExists('address2');
    }

    /**
     * Sets address2
     * @param string $address2
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->offsetSet('address2', $address2);

        return $this;
    }

    /**
     * Unset address2
     */
    public function unsetAddress2() {
        $this->offsetUnset('address2');
    }

    /**
     * Valid address2
     * @return array|boolean
     */
    public function validateAddress2()
    {
        if (!$this->offsetExists('address2')) {
            return false;
        }
        return false;
    }


    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->offsetGet('country');
    }

    /**
     * Checks country
     * @return boolean
     */
    public function hasCountry()
    {
        return $this->offsetExists('country');
    }

    /**
     * Sets country
     * @param string $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->offsetSet('country', $country);

        return $this;
    }

    /**
     * Unset country
     */
    public function unsetCountry() {
        $this->offsetUnset('country');
    }

    /**
     * Valid country
     * @return array|boolean
     */
    public function validateCountry()
    {
        if (!$this->offsetExists('country')) {
            return false;
        }
        return false;
    }


    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->offsetGet('state');
    }

    /**
     * Checks state
     * @return boolean
     */
    public function hasState()
    {
        return $this->offsetExists('state');
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $this->offsetSet('state', $state);

        return $this;
    }

    /**
     * Unset state
     */
    public function unsetState() {
        $this->offsetUnset('state');
    }

    /**
     * Valid state
     * @return array|boolean
     */
    public function validateState()
    {
        if (!$this->offsetExists('state')) {
            return false;
        }
        return false;
    }


    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->offsetGet('city');
    }

    /**
     * Checks city
     * @return boolean
     */
    public function hasCity()
    {
        return $this->offsetExists('city');
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        $this->offsetSet('city', $city);

        return $this;
    }

    /**
     * Unset city
     */
    public function unsetCity() {
        $this->offsetUnset('city');
    }

    /**
     * Valid city
     * @return array|boolean
     */
    public function validateCity()
    {
        if (!$this->offsetExists('city')) {
            return false;
        }
        return false;
    }


    /**
     * Gets zipcode
     * @return string
     */
    public function getZipcode()
    {
        return $this->offsetGet('zipcode');
    }

    /**
     * Checks zipcode
     * @return boolean
     */
    public function hasZipcode()
    {
        return $this->offsetExists('zipcode');
    }

    /**
     * Sets zipcode
     * @param string $zipcode
     * @return $this
     */
    public function setZipcode($zipcode)
    {
        $this->offsetSet('zipcode', $zipcode);

        return $this;
    }

    /**
     * Unset zipcode
     */
    public function unsetZipcode() {
        $this->offsetUnset('zipcode');
    }

    /**
     * Valid zipcode
     * @return array|boolean
     */
    public function validateZipcode()
    {
        if (!$this->offsetExists('zipcode')) {
            return false;
        }
        return false;
    }


    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->offsetGet('phone');
    }

    /**
     * Checks phone
     * @return boolean
     */
    public function hasPhone()
    {
        return $this->offsetExists('phone');
    }

    /**
     * Sets phone
     * @param string $phone
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->offsetSet('phone', $phone);

        return $this;
    }

    /**
     * Unset phone
     */
    public function unsetPhone() {
        $this->offsetUnset('phone');
    }

    /**
     * Valid phone
     * @return array|boolean
     */
    public function validatePhone()
    {
        if (!$this->offsetExists('phone')) {
            return false;
        }
        return false;
    }


    /**
     * Gets firstname
     * @return string
     */
    public function getFirstname()
    {
        return $this->offsetGet('firstname');
    }

    /**
     * Checks firstname
     * @return boolean
     */
    public function hasFirstname()
    {
        return $this->offsetExists('firstname');
    }

    /**
     * Sets firstname
     * @param string $firstname
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->offsetSet('firstname', $firstname);

        return $this;
    }

    /**
     * Unset firstname
     */
    public function unsetFirstname() {
        $this->offsetUnset('firstname');
    }

    /**
     * Valid firstname
     * @return array|boolean
     */
    public function validateFirstname()
    {
        if (!$this->offsetExists('firstname')) {
            return false;
        }
        return false;
    }


    /**
     * Gets lastname
     * @return string
     */
    public function getLastname()
    {
        return $this->offsetGet('lastname');
    }

    /**
     * Checks lastname
     * @return boolean
     */
    public function hasLastname()
    {
        return $this->offsetExists('lastname');
    }

    /**
     * Sets lastname
     * @param string $lastname
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->offsetSet('lastname', $lastname);

        return $this;
    }

    /**
     * Unset lastname
     */
    public function unsetLastname() {
        $this->offsetUnset('lastname');
    }

    /**
     * Valid lastname
     * @return array|boolean
     */
    public function validateLastname()
    {
        if (!$this->offsetExists('lastname')) {
            return false;
        }
        return false;
    }

}


