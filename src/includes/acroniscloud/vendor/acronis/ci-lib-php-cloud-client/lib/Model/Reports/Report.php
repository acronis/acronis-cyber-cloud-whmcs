<?php
/**
 * Report
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Reports;

use Acronis\Cloud\Client\BaseModel;
/**
 * Report Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Report extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Reports\Report';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'id' => 'string',
            'version' => 'int',
            'result_action' => '\Acronis\Cloud\Client\Model\Reports\ReportResultAction',
            'recipients' => 'string[]',
            'parameters' => '\Acronis\Cloud\Client\Model\Reports\ReportParameters',
            'schedule' => '\Acronis\Cloud\Client\Model\Reports\ReportSchedule',
            'generation_date' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'id' => null,
            'version' => 'int32',
            'result_action' => null,
            'recipients' => null,
            'parameters' => null,
            'schedule' => null,
            'generation_date' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'id' => 'id',
            'version' => 'version',
            'result_action' => 'result_action',
            'recipients' => 'recipients',
            'parameters' => 'parameters',
            'schedule' => 'schedule',
            'generation_date' => 'generation_date'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'id' => 'setId',
            'version' => 'setVersion',
            'result_action' => 'setResultAction',
            'recipients' => 'setRecipients',
            'parameters' => 'setParameters',
            'schedule' => 'setSchedule',
            'generation_date' => 'setGenerationDate'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'id' => 'getId',
            'version' => 'getVersion',
            'result_action' => 'getResultAction',
            'recipients' => 'getRecipients',
            'parameters' => 'getParameters',
            'schedule' => 'getSchedule',
            'generation_date' => 'getGenerationDate'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'id' => 'hasId',
            'version' => 'hasVersion',
            'result_action' => 'hasResultAction',
            'recipients' => 'hasRecipients',
            'parameters' => 'hasParameters',
            'schedule' => 'hasSchedule',
            'generation_date' => 'hasGenerationDate'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'id' => 'validateId',
            'version' => 'validateVersion',
            'result_action' => 'validateResultAction',
            'recipients' => 'validateRecipients',
            'parameters' => 'validateParameters',
            'schedule' => 'validateSchedule',
            'generation_date' => 'validateGenerationDate'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateId())) {
            $invalid_properties[] = $this->validateId();
        }
        if (!empty($this->validateVersion())) {
            $invalid_properties[] = $this->validateVersion();
        }
        if (!empty($this->validateResultAction())) {
            $invalid_properties[] = $this->validateResultAction();
        }
        if (!empty($this->validateRecipients())) {
            $invalid_properties[] = $this->validateRecipients();
        }
        if (!empty($this->validateParameters())) {
            $invalid_properties[] = $this->validateParameters();
        }
        if (!empty($this->validateSchedule())) {
            $invalid_properties[] = $this->validateSchedule();
        }
        if (!empty($this->validateGenerationDate())) {
            $invalid_properties[] = $this->validateGenerationDate();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateId())) {
            return false;
        }
        if (!empty($this->validateVersion())) {
            return false;
        }
        if (!empty($this->validateResultAction())) {
            return false;
        }
        if (!empty($this->validateRecipients())) {
            return false;
        }
        if (!empty($this->validateParameters())) {
            return false;
        }
        if (!empty($this->validateSchedule())) {
            return false;
        }
        if (!empty($this->validateGenerationDate())) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->offsetGet('id');
    }

    /**
     * Checks id
     * @return boolean
     */
    public function hasId()
    {
        return $this->offsetExists('id');
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        if ((strlen($id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Report., must be smaller than or equal to 36.');
        }
        if ((strlen($id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Report., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling Report., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('id', $id);

        return $this;
    }

    /**
     * Unset id
     */
    public function unsetId() {
        $this->offsetUnset('id');
    }

    /**
     * Valid id
     * @return array|boolean
     */
    public function validateId()
    {
        if (!$this->offsetExists('id')) {
            return "Property 'id' was not initialized.";
        }
            if ($this->offsetExists('id') && strlen($this->offsetGet('id')) > 36) {
                return "invalid value for 'id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('id') && strlen($this->offsetGet('id')) < 36) {
                return "invalid value for 'id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('id'))) {
                return "invalid value for 'id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets version
     * @return int
     */
    public function getVersion()
    {
        return $this->offsetGet('version');
    }

    /**
     * Checks version
     * @return boolean
     */
    public function hasVersion()
    {
        return $this->offsetExists('version');
    }

    /**
     * Sets version
     * @param int $version Auto-incremented entity version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->offsetSet('version', $version);

        return $this;
    }

    /**
     * Unset version
     */
    public function unsetVersion() {
        $this->offsetUnset('version');
    }

    /**
     * Valid version
     * @return array|boolean
     */
    public function validateVersion()
    {
        if (!$this->offsetExists('version')) {
            return "Property 'version' was not initialized.";
        }
        return false;
    }


    /**
     * Gets result_action
     * @return \Acronis\Cloud\Client\Model\Reports\ReportResultAction
     */
    public function getResultAction()
    {
        return $this->offsetGet('result_action');
    }

    /**
     * Checks result_action
     * @return boolean
     */
    public function hasResultAction()
    {
        return $this->offsetExists('result_action');
    }

    /**
     * Sets result_action
     * @param \Acronis\Cloud\Client\Model\Reports\ReportResultAction $result_action
     * @return $this
     */
    public function setResultAction($result_action)
    {
        $this->offsetSet('result_action', $result_action);

        return $this;
    }

    /**
     * Unset result_action
     */
    public function unsetResultAction() {
        $this->offsetUnset('result_action');
    }

    /**
     * Valid result_action
     * @return array|boolean
     */
    public function validateResultAction()
    {
        if (!$this->offsetExists('result_action')) {
            return "Property 'result_action' was not initialized.";
        }
        return false;
    }


    /**
     * Gets recipients
     * @return string[]
     */
    public function getRecipients()
    {
        return $this->offsetGet('recipients');
    }

    /**
     * Checks recipients
     * @return boolean
     */
    public function hasRecipients()
    {
        return $this->offsetExists('recipients');
    }

    /**
     * Sets recipients
     * @param string[] $recipients IDs of subscribed users
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->offsetSet('recipients', $recipients);

        return $this;
    }

    /**
     * Unset recipients
     */
    public function unsetRecipients() {
        $this->offsetUnset('recipients');
    }

    /**
     * Valid recipients
     * @return array|boolean
     */
    public function validateRecipients()
    {
        if (!$this->offsetExists('recipients')) {
            return "Property 'recipients' was not initialized.";
        }
        return false;
    }


    /**
     * Gets parameters
     * @return \Acronis\Cloud\Client\Model\Reports\ReportParameters
     */
    public function getParameters()
    {
        return $this->offsetGet('parameters');
    }

    /**
     * Checks parameters
     * @return boolean
     */
    public function hasParameters()
    {
        return $this->offsetExists('parameters');
    }

    /**
     * Sets parameters
     * @param \Acronis\Cloud\Client\Model\Reports\ReportParameters $parameters
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->offsetSet('parameters', $parameters);

        return $this;
    }

    /**
     * Unset parameters
     */
    public function unsetParameters() {
        $this->offsetUnset('parameters');
    }

    /**
     * Valid parameters
     * @return array|boolean
     */
    public function validateParameters()
    {
        if (!$this->offsetExists('parameters')) {
            return "Property 'parameters' was not initialized.";
        }
        return false;
    }


    /**
     * Gets schedule
     * @return \Acronis\Cloud\Client\Model\Reports\ReportSchedule
     */
    public function getSchedule()
    {
        return $this->offsetGet('schedule');
    }

    /**
     * Checks schedule
     * @return boolean
     */
    public function hasSchedule()
    {
        return $this->offsetExists('schedule');
    }

    /**
     * Sets schedule
     * @param \Acronis\Cloud\Client\Model\Reports\ReportSchedule $schedule
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->offsetSet('schedule', $schedule);

        return $this;
    }

    /**
     * Unset schedule
     */
    public function unsetSchedule() {
        $this->offsetUnset('schedule');
    }

    /**
     * Valid schedule
     * @return array|boolean
     */
    public function validateSchedule()
    {
        if (!$this->offsetExists('schedule')) {
            return "Property 'schedule' was not initialized.";
        }
        return false;
    }


    /**
     * Gets generation_date
     * @return string
     */
    public function getGenerationDate()
    {
        return $this->offsetGet('generation_date');
    }

    /**
     * Checks generation_date
     * @return boolean
     */
    public function hasGenerationDate()
    {
        return $this->offsetExists('generation_date');
    }

    /**
     * Sets generation_date
     * @param string $generation_date Formatted date: YYYY-MM-DD
     * @return $this
     */
    public function setGenerationDate($generation_date)
    {
        if ((strlen($generation_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $generation_date when calling Report., must be smaller than or equal to 10.');
        }
        if ((strlen($generation_date) < 10)) {
            throw new \InvalidArgumentException('invalid length for $generation_date when calling Report., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}/", $generation_date))) {
            throw new \InvalidArgumentException("invalid value for $generation_date when calling Report., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}/.");
        }

        $this->offsetSet('generation_date', $generation_date);

        return $this;
    }

    /**
     * Unset generation_date
     */
    public function unsetGenerationDate() {
        $this->offsetUnset('generation_date');
    }

    /**
     * Valid generation_date
     * @return array|boolean
     */
    public function validateGenerationDate()
    {
        if (!$this->offsetExists('generation_date')) {
            return "Property 'generation_date' was not initialized.";
        }
            if ($this->offsetExists('generation_date') && strlen($this->offsetGet('generation_date')) > 10) {
                return "invalid value for 'generation_date', the character length must be smaller than or equal to 10.";
            }
            if ($this->offsetExists('generation_date') && strlen($this->offsetGet('generation_date')) < 10) {
                return "invalid value for 'generation_date', the character length must be bigger than or equal to 10.";
            }
            if ($this->offsetExists('generation_date') && !preg_match("/\\d{4}-\\d{2}-\\d{2}/", $this->offsetGet('generation_date'))) {
                return "invalid value for 'generation_date', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}/.";
            }
        return false;
    }

}


