<?php
/**
 * AppConfigurationItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\AppConfiguration;

use Acronis\Cloud\Client\BaseModel;
/**
 * AppConfigurationItems Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AppConfigurationItems extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AppConfiguration\AppConfigurationItems';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'uuid' => 'string',
            'type' => 'string',
            'url' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'uuid' => null,
            'type' => null,
            'url' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'uuid' => 'uuid',
            'type' => 'type',
            'url' => 'url'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'uuid' => 'setUuid',
            'type' => 'setType',
            'url' => 'setUrl'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'uuid' => 'getUuid',
            'type' => 'getType',
            'url' => 'getUrl'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'uuid' => 'hasUuid',
            'type' => 'hasType',
            'url' => 'hasUrl'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'uuid' => 'validateUuid',
            'type' => 'validateType',
            'url' => 'validateUrl'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateUuid())) {
            $invalid_properties[] = $this->validateUuid();
        }
        if (!empty($this->validateType())) {
            $invalid_properties[] = $this->validateType();
        }
        if (!empty($this->validateUrl())) {
            $invalid_properties[] = $this->validateUrl();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateUuid())) {
            return false;
        }
        if (!empty($this->validateType())) {
            return false;
        }
        if (!empty($this->validateUrl())) {
            return false;
        }
        return true;
    }


    /**
     * Gets uuid
     * @return string
     */
    public function getUuid()
    {
        return $this->offsetGet('uuid');
    }

    /**
     * Checks uuid
     * @return boolean
     */
    public function hasUuid()
    {
        return $this->offsetExists('uuid');
    }

    /**
     * Sets uuid
     * @param string $uuid
     * @return $this
     */
    public function setUuid($uuid)
    {
        if (!is_null($uuid) && (strlen($uuid) > 36)) {
            throw new \InvalidArgumentException('invalid length for $uuid when calling AppConfigurationItems., must be smaller than or equal to 36.');
        }
        if (!is_null($uuid) && (strlen($uuid) < 36)) {
            throw new \InvalidArgumentException('invalid length for $uuid when calling AppConfigurationItems., must be bigger than or equal to 36.');
        }
        if (!is_null($uuid) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $uuid))) {
            throw new \InvalidArgumentException("invalid value for $uuid when calling AppConfigurationItems., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('uuid', $uuid);

        return $this;
    }

    /**
     * Unset uuid
     */
    public function unsetUuid() {
        $this->offsetUnset('uuid');
    }

    /**
     * Valid uuid
     * @return array|boolean
     */
    public function validateUuid()
    {
        if (!$this->offsetExists('uuid')) {
            return false;
        }
            if ($this->offsetExists('uuid') && strlen($this->offsetGet('uuid')) > 36) {
                return "invalid value for 'uuid', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('uuid') && strlen($this->offsetGet('uuid')) < 36) {
                return "invalid value for 'uuid', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('uuid') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('uuid'))) {
                return "invalid value for 'uuid', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->offsetGet('type');
    }

    /**
     * Checks type
     * @return boolean
     */
    public function hasType()
    {
        return $this->offsetExists('type');
    }

    /**
     * Sets type
     * @param string $type Current implementations supports following values: backup, files-cloud, monitoring, storage
     * @return $this
     */
    public function setType($type)
    {
        $this->offsetSet('type', $type);

        return $this;
    }

    /**
     * Unset type
     */
    public function unsetType() {
        $this->offsetUnset('type');
    }

    /**
     * Valid type
     * @return array|boolean
     */
    public function validateType()
    {
        if (!$this->offsetExists('type')) {
            return false;
        }
        return false;
    }


    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->offsetGet('url');
    }

    /**
     * Checks url
     * @return boolean
     */
    public function hasUrl()
    {
        return $this->offsetExists('url');
    }

    /**
     * Sets url
     * @param string $url Application URL
     * @return $this
     */
    public function setUrl($url)
    {
        $this->offsetSet('url', $url);

        return $this;
    }

    /**
     * Unset url
     */
    public function unsetUrl() {
        $this->offsetUnset('url');
    }

    /**
     * Valid url
     * @return array|boolean
     */
    public function validateUrl()
    {
        if (!$this->offsetExists('url')) {
            return false;
        }
        return false;
    }

}


