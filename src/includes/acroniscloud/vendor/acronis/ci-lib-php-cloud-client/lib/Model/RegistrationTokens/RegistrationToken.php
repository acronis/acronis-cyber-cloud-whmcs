<?php
/**
 * RegistrationToken
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\RegistrationTokens;

use Acronis\Cloud\Client\BaseModel;
/**
 * RegistrationToken Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RegistrationToken extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RegistrationTokens\RegistrationToken';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'id' => 'int',
            'token' => 'string',
            'created_at' => 'string',
            'expires_at' => 'string',
            'tenant_id' => 'string',
            'scopes' => 'string[]'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'id' => 'int32',
            'token' => null,
            'created_at' => null,
            'expires_at' => null,
            'tenant_id' => null,
            'scopes' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'id' => 'id',
            'token' => 'token',
            'created_at' => 'created_at',
            'expires_at' => 'expires_at',
            'tenant_id' => 'tenant_id',
            'scopes' => 'scopes'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'id' => 'setId',
            'token' => 'setToken',
            'created_at' => 'setCreatedAt',
            'expires_at' => 'setExpiresAt',
            'tenant_id' => 'setTenantId',
            'scopes' => 'setScopes'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'id' => 'getId',
            'token' => 'getToken',
            'created_at' => 'getCreatedAt',
            'expires_at' => 'getExpiresAt',
            'tenant_id' => 'getTenantId',
            'scopes' => 'getScopes'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'id' => 'hasId',
            'token' => 'hasToken',
            'created_at' => 'hasCreatedAt',
            'expires_at' => 'hasExpiresAt',
            'tenant_id' => 'hasTenantId',
            'scopes' => 'hasScopes'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'id' => 'validateId',
            'token' => 'validateToken',
            'created_at' => 'validateCreatedAt',
            'expires_at' => 'validateExpiresAt',
            'tenant_id' => 'validateTenantId',
            'scopes' => 'validateScopes'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateId())) {
            $invalid_properties[] = $this->validateId();
        }
        if (!empty($this->validateToken())) {
            $invalid_properties[] = $this->validateToken();
        }
        if (!empty($this->validateCreatedAt())) {
            $invalid_properties[] = $this->validateCreatedAt();
        }
        if (!empty($this->validateExpiresAt())) {
            $invalid_properties[] = $this->validateExpiresAt();
        }
        if (!empty($this->validateTenantId())) {
            $invalid_properties[] = $this->validateTenantId();
        }
        if (!empty($this->validateScopes())) {
            $invalid_properties[] = $this->validateScopes();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateId())) {
            return false;
        }
        if (!empty($this->validateToken())) {
            return false;
        }
        if (!empty($this->validateCreatedAt())) {
            return false;
        }
        if (!empty($this->validateExpiresAt())) {
            return false;
        }
        if (!empty($this->validateTenantId())) {
            return false;
        }
        if (!empty($this->validateScopes())) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->offsetGet('id');
    }

    /**
     * Checks id
     * @return boolean
     */
    public function hasId()
    {
        return $this->offsetExists('id');
    }

    /**
     * Sets id
     * @param int $id Initial registration token unique identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->offsetSet('id', $id);

        return $this;
    }

    /**
     * Unset id
     */
    public function unsetId() {
        $this->offsetUnset('id');
    }

    /**
     * Valid id
     * @return array|boolean
     */
    public function validateId()
    {
        if (!$this->offsetExists('id')) {
            return "Property 'id' was not initialized.";
        }
        return false;
    }


    /**
     * Gets token
     * @return string
     */
    public function getToken()
    {
        return $this->offsetGet('token');
    }

    /**
     * Checks token
     * @return boolean
     */
    public function hasToken()
    {
        return $this->offsetExists('token');
    }

    /**
     * Sets token
     * @param string $token Initial registration token
     * @return $this
     */
    public function setToken($token)
    {
        $this->offsetSet('token', $token);

        return $this;
    }

    /**
     * Unset token
     */
    public function unsetToken() {
        $this->offsetUnset('token');
    }

    /**
     * Valid token
     * @return array|boolean
     */
    public function validateToken()
    {
        if (!$this->offsetExists('token')) {
            return "Property 'token' was not initialized.";
        }
        return false;
    }


    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->offsetGet('created_at');
    }

    /**
     * Checks created_at
     * @return boolean
     */
    public function hasCreatedAt()
    {
        return $this->offsetExists('created_at');
    }

    /**
     * Sets created_at
     * @param string $created_at RFC3339 Formatted date
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        if ((strlen($created_at) > 32)) {
            throw new \InvalidArgumentException('invalid length for $created_at when calling RegistrationToken., must be smaller than or equal to 32.');
        }
        if ((strlen($created_at) < 19)) {
            throw new \InvalidArgumentException('invalid length for $created_at when calling RegistrationToken., must be bigger than or equal to 19.');
        }
        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $created_at))) {
            throw new \InvalidArgumentException("invalid value for $created_at when calling RegistrationToken., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.");
        }

        $this->offsetSet('created_at', $created_at);

        return $this;
    }

    /**
     * Unset created_at
     */
    public function unsetCreatedAt() {
        $this->offsetUnset('created_at');
    }

    /**
     * Valid created_at
     * @return array|boolean
     */
    public function validateCreatedAt()
    {
        if (!$this->offsetExists('created_at')) {
            return "Property 'created_at' was not initialized.";
        }
            if ($this->offsetExists('created_at') && strlen($this->offsetGet('created_at')) > 32) {
                return "invalid value for 'created_at', the character length must be smaller than or equal to 32.";
            }
            if ($this->offsetExists('created_at') && strlen($this->offsetGet('created_at')) < 19) {
                return "invalid value for 'created_at', the character length must be bigger than or equal to 19.";
            }
            if ($this->offsetExists('created_at') && !preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $this->offsetGet('created_at'))) {
                return "invalid value for 'created_at', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.";
            }
        return false;
    }


    /**
     * Gets expires_at
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->offsetGet('expires_at');
    }

    /**
     * Checks expires_at
     * @return boolean
     */
    public function hasExpiresAt()
    {
        return $this->offsetExists('expires_at');
    }

    /**
     * Sets expires_at
     * @param string $expires_at RFC3339 Formatted date
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        if ((strlen($expires_at) > 32)) {
            throw new \InvalidArgumentException('invalid length for $expires_at when calling RegistrationToken., must be smaller than or equal to 32.');
        }
        if ((strlen($expires_at) < 19)) {
            throw new \InvalidArgumentException('invalid length for $expires_at when calling RegistrationToken., must be bigger than or equal to 19.');
        }
        if ((!preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $expires_at))) {
            throw new \InvalidArgumentException("invalid value for $expires_at when calling RegistrationToken., must conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.");
        }

        $this->offsetSet('expires_at', $expires_at);

        return $this;
    }

    /**
     * Unset expires_at
     */
    public function unsetExpiresAt() {
        $this->offsetUnset('expires_at');
    }

    /**
     * Valid expires_at
     * @return array|boolean
     */
    public function validateExpiresAt()
    {
        if (!$this->offsetExists('expires_at')) {
            return "Property 'expires_at' was not initialized.";
        }
            if ($this->offsetExists('expires_at') && strlen($this->offsetGet('expires_at')) > 32) {
                return "invalid value for 'expires_at', the character length must be smaller than or equal to 32.";
            }
            if ($this->offsetExists('expires_at') && strlen($this->offsetGet('expires_at')) < 19) {
                return "invalid value for 'expires_at', the character length must be bigger than or equal to 19.";
            }
            if ($this->offsetExists('expires_at') && !preg_match("/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/", $this->offsetGet('expires_at'))) {
                return "invalid value for 'expires_at', must be conform to the pattern /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?([\\+\\-]\\d{2}\\:\\d{2})?/.";
            }
        return false;
    }


    /**
     * Gets tenant_id
     * @return string
     */
    public function getTenantId()
    {
        return $this->offsetGet('tenant_id');
    }

    /**
     * Checks tenant_id
     * @return boolean
     */
    public function hasTenantId()
    {
        return $this->offsetExists('tenant_id');
    }

    /**
     * Sets tenant_id
     * @param string $tenant_id
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        if ((strlen($tenant_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $tenant_id when calling RegistrationToken., must be smaller than or equal to 36.');
        }
        if ((strlen($tenant_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $tenant_id when calling RegistrationToken., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $tenant_id))) {
            throw new \InvalidArgumentException("invalid value for $tenant_id when calling RegistrationToken., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('tenant_id', $tenant_id);

        return $this;
    }

    /**
     * Unset tenant_id
     */
    public function unsetTenantId() {
        $this->offsetUnset('tenant_id');
    }

    /**
     * Valid tenant_id
     * @return array|boolean
     */
    public function validateTenantId()
    {
        if (!$this->offsetExists('tenant_id')) {
            return "Property 'tenant_id' was not initialized.";
        }
            if ($this->offsetExists('tenant_id') && strlen($this->offsetGet('tenant_id')) > 36) {
                return "invalid value for 'tenant_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('tenant_id') && strlen($this->offsetGet('tenant_id')) < 36) {
                return "invalid value for 'tenant_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('tenant_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('tenant_id'))) {
                return "invalid value for 'tenant_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets scopes
     * @return string[]
     */
    public function getScopes()
    {
        return $this->offsetGet('scopes');
    }

    /**
     * Checks scopes
     * @return boolean
     */
    public function hasScopes()
    {
        return $this->offsetExists('scopes');
    }

    /**
     * Sets scopes
     * @param string[] $scopes Initial registration token access scope
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->offsetSet('scopes', $scopes);

        return $this;
    }

    /**
     * Unset scopes
     */
    public function unsetScopes() {
        $this->offsetUnset('scopes');
    }

    /**
     * Valid scopes
     * @return array|boolean
     */
    public function validateScopes()
    {
        if (!$this->offsetExists('scopes')) {
            return "Property 'scopes' was not initialized.";
        }
        return false;
    }

}


