<?php
/**
 * RegistrationTokenPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\RegistrationTokens;

use Acronis\Cloud\Client\BaseModel;
/**
 * RegistrationTokenPost Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RegistrationTokenPost extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RegistrationTokens\RegistrationTokenPost';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'tenant_id' => 'string',
            'expires_in' => 'int',
            'scopes' => 'string[]'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'tenant_id' => null,
            'expires_in' => 'int32',
            'scopes' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'tenant_id' => 'tenant_id',
            'expires_in' => 'expires_in',
            'scopes' => 'scopes'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'tenant_id' => 'setTenantId',
            'expires_in' => 'setExpiresIn',
            'scopes' => 'setScopes'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'tenant_id' => 'getTenantId',
            'expires_in' => 'getExpiresIn',
            'scopes' => 'getScopes'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'tenant_id' => 'hasTenantId',
            'expires_in' => 'hasExpiresIn',
            'scopes' => 'hasScopes'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'tenant_id' => 'validateTenantId',
            'expires_in' => 'validateExpiresIn',
            'scopes' => 'validateScopes'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateTenantId())) {
            $invalid_properties[] = $this->validateTenantId();
        }
        if (!empty($this->validateExpiresIn())) {
            $invalid_properties[] = $this->validateExpiresIn();
        }
        if (!empty($this->validateScopes())) {
            $invalid_properties[] = $this->validateScopes();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateTenantId())) {
            return false;
        }
        if (!empty($this->validateExpiresIn())) {
            return false;
        }
        if (!empty($this->validateScopes())) {
            return false;
        }
        return true;
    }


    /**
     * Gets tenant_id
     * @return string
     */
    public function getTenantId()
    {
        return $this->offsetGet('tenant_id');
    }

    /**
     * Checks tenant_id
     * @return boolean
     */
    public function hasTenantId()
    {
        return $this->offsetExists('tenant_id');
    }

    /**
     * Sets tenant_id
     * @param string $tenant_id
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        if (!is_null($tenant_id) && (strlen($tenant_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $tenant_id when calling RegistrationTokenPost., must be smaller than or equal to 36.');
        }
        if (!is_null($tenant_id) && (strlen($tenant_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $tenant_id when calling RegistrationTokenPost., must be bigger than or equal to 36.');
        }
        if (!is_null($tenant_id) && (!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $tenant_id))) {
            throw new \InvalidArgumentException("invalid value for $tenant_id when calling RegistrationTokenPost., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('tenant_id', $tenant_id);

        return $this;
    }

    /**
     * Unset tenant_id
     */
    public function unsetTenantId() {
        $this->offsetUnset('tenant_id');
    }

    /**
     * Valid tenant_id
     * @return array|boolean
     */
    public function validateTenantId()
    {
        if (!$this->offsetExists('tenant_id')) {
            return false;
        }
            if ($this->offsetExists('tenant_id') && strlen($this->offsetGet('tenant_id')) > 36) {
                return "invalid value for 'tenant_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('tenant_id') && strlen($this->offsetGet('tenant_id')) < 36) {
                return "invalid value for 'tenant_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('tenant_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('tenant_id'))) {
                return "invalid value for 'tenant_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets expires_in
     * @return int
     */
    public function getExpiresIn()
    {
        return $this->offsetGet('expires_in');
    }

    /**
     * Checks expires_in
     * @return boolean
     */
    public function hasExpiresIn()
    {
        return $this->offsetExists('expires_in');
    }

    /**
     * Sets expires_in
     * @param int $expires_in Token expiration time in seconds
     * @return $this
     */
    public function setExpiresIn($expires_in)
    {
        $this->offsetSet('expires_in', $expires_in);

        return $this;
    }

    /**
     * Unset expires_in
     */
    public function unsetExpiresIn() {
        $this->offsetUnset('expires_in');
    }

    /**
     * Valid expires_in
     * @return array|boolean
     */
    public function validateExpiresIn()
    {
        if (!$this->offsetExists('expires_in')) {
            return "Property 'expires_in' was not initialized.";
        }
        return false;
    }


    /**
     * Gets scopes
     * @return string[]
     */
    public function getScopes()
    {
        return $this->offsetGet('scopes');
    }

    /**
     * Checks scopes
     * @return boolean
     */
    public function hasScopes()
    {
        return $this->offsetExists('scopes');
    }

    /**
     * Sets scopes
     * @param string[] $scopes Initial registration token access scope
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->offsetSet('scopes', $scopes);

        return $this;
    }

    /**
     * Unset scopes
     */
    public function unsetScopes() {
        $this->offsetUnset('scopes');
    }

    /**
     * Valid scopes
     * @return array|boolean
     */
    public function validateScopes()
    {
        if (!$this->offsetExists('scopes')) {
            return "Property 'scopes' was not initialized.";
        }
        return false;
    }

}


