<?php
/**
 * SettingEffective
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Settings;

use Acronis\Cloud\Client\BaseModel;
/**
 * SettingEffective Class Doc Comment
 *
 * @category    Class
 * @description Inherited data
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SettingEffective extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Settings\SettingEffective';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'owner' => '\Acronis\Cloud\Client\Model\Settings\SettingOwner',
            'value' => 'string',
            'lock' => 'bool'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'owner' => null,
            'value' => null,
            'lock' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'owner' => 'owner',
            'value' => 'value',
            'lock' => 'lock'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'owner' => 'setOwner',
            'value' => 'setValue',
            'lock' => 'setLock'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'owner' => 'getOwner',
            'value' => 'getValue',
            'lock' => 'getLock'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'owner' => 'hasOwner',
            'value' => 'hasValue',
            'lock' => 'hasLock'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'owner' => 'validateOwner',
            'value' => 'validateValue',
            'lock' => 'validateLock'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateOwner())) {
            $invalid_properties[] = $this->validateOwner();
        }
        if (!empty($this->validateValue())) {
            $invalid_properties[] = $this->validateValue();
        }
        if (!empty($this->validateLock())) {
            $invalid_properties[] = $this->validateLock();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateOwner())) {
            return false;
        }
        if (!empty($this->validateValue())) {
            return false;
        }
        if (!empty($this->validateLock())) {
            return false;
        }
        return true;
    }


    /**
     * Gets owner
     * @return \Acronis\Cloud\Client\Model\Settings\SettingOwner
     */
    public function getOwner()
    {
        return $this->offsetGet('owner');
    }

    /**
     * Checks owner
     * @return boolean
     */
    public function hasOwner()
    {
        return $this->offsetExists('owner');
    }

    /**
     * Sets owner
     * @param \Acronis\Cloud\Client\Model\Settings\SettingOwner $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->offsetSet('owner', $owner);

        return $this;
    }

    /**
     * Unset owner
     */
    public function unsetOwner() {
        $this->offsetUnset('owner');
    }

    /**
     * Valid owner
     * @return array|boolean
     */
    public function validateOwner()
    {
        if (!$this->offsetExists('owner')) {
            return false;
        }
        return false;
    }


    /**
     * Gets value
     * @return string
     */
    public function getValue()
    {
        return $this->offsetGet('value');
    }

    /**
     * Checks value
     * @return boolean
     */
    public function hasValue()
    {
        return $this->offsetExists('value');
    }

    /**
     * Sets value
     * @param string $value Value of the setting
     * @return $this
     */
    public function setValue($value)
    {
        $this->offsetSet('value', $value);

        return $this;
    }

    /**
     * Unset value
     */
    public function unsetValue() {
        $this->offsetUnset('value');
    }

    /**
     * Valid value
     * @return array|boolean
     */
    public function validateValue()
    {
        if (!$this->offsetExists('value')) {
            return false;
        }
        return false;
    }


    /**
     * Gets lock
     * @return bool
     */
    public function getLock()
    {
        return $this->offsetGet('lock');
    }

    /**
     * Checks lock
     * @return boolean
     */
    public function hasLock()
    {
        return $this->offsetExists('lock');
    }

    /**
     * Sets lock
     * @param bool $lock Flag that controls whether the value can be overridden at another tenant's level
     * @return $this
     */
    public function setLock($lock)
    {
        $this->offsetSet('lock', $lock);

        return $this;
    }

    /**
     * Unset lock
     */
    public function unsetLock() {
        $this->offsetUnset('lock');
    }

    /**
     * Valid lock
     * @return array|boolean
     */
    public function validateLock()
    {
        if (!$this->offsetExists('lock')) {
            return false;
        }
        return false;
    }

}


