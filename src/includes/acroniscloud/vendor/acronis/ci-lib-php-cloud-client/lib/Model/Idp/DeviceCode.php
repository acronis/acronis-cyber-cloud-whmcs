<?php
/**
 * DeviceCode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Idp;

use Acronis\Cloud\Client\BaseModel;
/**
 * DeviceCode Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DeviceCode extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Idp\DeviceCode';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'device_code' => 'string',
            'user_code' => 'string',
            'verification_uri' => 'string',
            'verification_uri_complete' => 'string',
            'expires_in' => 'int',
            'interval' => 'int'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'device_code' => null,
            'user_code' => null,
            'verification_uri' => null,
            'verification_uri_complete' => null,
            'expires_in' => 'int32',
            'interval' => 'int32'
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'device_code' => 'device_code',
            'user_code' => 'user_code',
            'verification_uri' => 'verification_uri',
            'verification_uri_complete' => 'verification_uri_complete',
            'expires_in' => 'expires_in',
            'interval' => 'interval'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'device_code' => 'setDeviceCode',
            'user_code' => 'setUserCode',
            'verification_uri' => 'setVerificationUri',
            'verification_uri_complete' => 'setVerificationUriComplete',
            'expires_in' => 'setExpiresIn',
            'interval' => 'setInterval'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'device_code' => 'getDeviceCode',
            'user_code' => 'getUserCode',
            'verification_uri' => 'getVerificationUri',
            'verification_uri_complete' => 'getVerificationUriComplete',
            'expires_in' => 'getExpiresIn',
            'interval' => 'getInterval'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'device_code' => 'hasDeviceCode',
            'user_code' => 'hasUserCode',
            'verification_uri' => 'hasVerificationUri',
            'verification_uri_complete' => 'hasVerificationUriComplete',
            'expires_in' => 'hasExpiresIn',
            'interval' => 'hasInterval'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'device_code' => 'validateDeviceCode',
            'user_code' => 'validateUserCode',
            'verification_uri' => 'validateVerificationUri',
            'verification_uri_complete' => 'validateVerificationUriComplete',
            'expires_in' => 'validateExpiresIn',
            'interval' => 'validateInterval'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateDeviceCode())) {
            $invalid_properties[] = $this->validateDeviceCode();
        }
        if (!empty($this->validateUserCode())) {
            $invalid_properties[] = $this->validateUserCode();
        }
        if (!empty($this->validateVerificationUri())) {
            $invalid_properties[] = $this->validateVerificationUri();
        }
        if (!empty($this->validateVerificationUriComplete())) {
            $invalid_properties[] = $this->validateVerificationUriComplete();
        }
        if (!empty($this->validateExpiresIn())) {
            $invalid_properties[] = $this->validateExpiresIn();
        }
        if (!empty($this->validateInterval())) {
            $invalid_properties[] = $this->validateInterval();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateDeviceCode())) {
            return false;
        }
        if (!empty($this->validateUserCode())) {
            return false;
        }
        if (!empty($this->validateVerificationUri())) {
            return false;
        }
        if (!empty($this->validateVerificationUriComplete())) {
            return false;
        }
        if (!empty($this->validateExpiresIn())) {
            return false;
        }
        if (!empty($this->validateInterval())) {
            return false;
        }
        return true;
    }


    /**
     * Gets device_code
     * @return string
     */
    public function getDeviceCode()
    {
        return $this->offsetGet('device_code');
    }

    /**
     * Checks device_code
     * @return boolean
     */
    public function hasDeviceCode()
    {
        return $this->offsetExists('device_code');
    }

    /**
     * Sets device_code
     * @param string $device_code
     * @return $this
     */
    public function setDeviceCode($device_code)
    {
        $this->offsetSet('device_code', $device_code);

        return $this;
    }

    /**
     * Unset device_code
     */
    public function unsetDeviceCode() {
        $this->offsetUnset('device_code');
    }

    /**
     * Valid device_code
     * @return array|boolean
     */
    public function validateDeviceCode()
    {
        if (!$this->offsetExists('device_code')) {
            return "Property 'device_code' was not initialized.";
        }
        return false;
    }


    /**
     * Gets user_code
     * @return string
     */
    public function getUserCode()
    {
        return $this->offsetGet('user_code');
    }

    /**
     * Checks user_code
     * @return boolean
     */
    public function hasUserCode()
    {
        return $this->offsetExists('user_code');
    }

    /**
     * Sets user_code
     * @param string $user_code
     * @return $this
     */
    public function setUserCode($user_code)
    {
        $this->offsetSet('user_code', $user_code);

        return $this;
    }

    /**
     * Unset user_code
     */
    public function unsetUserCode() {
        $this->offsetUnset('user_code');
    }

    /**
     * Valid user_code
     * @return array|boolean
     */
    public function validateUserCode()
    {
        if (!$this->offsetExists('user_code')) {
            return "Property 'user_code' was not initialized.";
        }
        return false;
    }


    /**
     * Gets verification_uri
     * @return string
     */
    public function getVerificationUri()
    {
        return $this->offsetGet('verification_uri');
    }

    /**
     * Checks verification_uri
     * @return boolean
     */
    public function hasVerificationUri()
    {
        return $this->offsetExists('verification_uri');
    }

    /**
     * Sets verification_uri
     * @param string $verification_uri
     * @return $this
     */
    public function setVerificationUri($verification_uri)
    {
        $this->offsetSet('verification_uri', $verification_uri);

        return $this;
    }

    /**
     * Unset verification_uri
     */
    public function unsetVerificationUri() {
        $this->offsetUnset('verification_uri');
    }

    /**
     * Valid verification_uri
     * @return array|boolean
     */
    public function validateVerificationUri()
    {
        if (!$this->offsetExists('verification_uri')) {
            return "Property 'verification_uri' was not initialized.";
        }
        return false;
    }


    /**
     * Gets verification_uri_complete
     * @return string
     */
    public function getVerificationUriComplete()
    {
        return $this->offsetGet('verification_uri_complete');
    }

    /**
     * Checks verification_uri_complete
     * @return boolean
     */
    public function hasVerificationUriComplete()
    {
        return $this->offsetExists('verification_uri_complete');
    }

    /**
     * Sets verification_uri_complete
     * @param string $verification_uri_complete
     * @return $this
     */
    public function setVerificationUriComplete($verification_uri_complete)
    {
        $this->offsetSet('verification_uri_complete', $verification_uri_complete);

        return $this;
    }

    /**
     * Unset verification_uri_complete
     */
    public function unsetVerificationUriComplete() {
        $this->offsetUnset('verification_uri_complete');
    }

    /**
     * Valid verification_uri_complete
     * @return array|boolean
     */
    public function validateVerificationUriComplete()
    {
        if (!$this->offsetExists('verification_uri_complete')) {
            return false;
        }
        return false;
    }


    /**
     * Gets expires_in
     * @return int
     */
    public function getExpiresIn()
    {
        return $this->offsetGet('expires_in');
    }

    /**
     * Checks expires_in
     * @return boolean
     */
    public function hasExpiresIn()
    {
        return $this->offsetExists('expires_in');
    }

    /**
     * Sets expires_in
     * @param int $expires_in
     * @return $this
     */
    public function setExpiresIn($expires_in)
    {
        $this->offsetSet('expires_in', $expires_in);

        return $this;
    }

    /**
     * Unset expires_in
     */
    public function unsetExpiresIn() {
        $this->offsetUnset('expires_in');
    }

    /**
     * Valid expires_in
     * @return array|boolean
     */
    public function validateExpiresIn()
    {
        if (!$this->offsetExists('expires_in')) {
            return false;
        }
        return false;
    }


    /**
     * Gets interval
     * @return int
     */
    public function getInterval()
    {
        return $this->offsetGet('interval');
    }

    /**
     * Checks interval
     * @return boolean
     */
    public function hasInterval()
    {
        return $this->offsetExists('interval');
    }

    /**
     * Sets interval
     * @param int $interval
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->offsetSet('interval', $interval);

        return $this;
    }

    /**
     * Unset interval
     */
    public function unsetInterval() {
        $this->offsetUnset('interval');
    }

    /**
     * Valid interval
     * @return array|boolean
     */
    public function validateInterval()
    {
        if (!$this->offsetExists('interval')) {
            return false;
        }
        return false;
    }

}


