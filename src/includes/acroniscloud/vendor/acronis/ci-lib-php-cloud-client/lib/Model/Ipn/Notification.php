<?php
/**
 * Notification
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Ipn;

use Acronis\Cloud\Client\BaseModel;
/**
 * Notification Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Notification extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Ipn\Notification';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'campaign_id' => 'string',
            'hide_opt_out' => 'bool',
            'popup_url' => 'string',
            'tray_url' => 'string',
            'format' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'campaign_id' => null,
            'hide_opt_out' => null,
            'popup_url' => null,
            'tray_url' => null,
            'format' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'campaign_id' => 'campaign_id',
            'hide_opt_out' => 'hide_opt_out',
            'popup_url' => 'popup_url',
            'tray_url' => 'tray_url',
            'format' => 'format'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'campaign_id' => 'setCampaignId',
            'hide_opt_out' => 'setHideOptOut',
            'popup_url' => 'setPopupUrl',
            'tray_url' => 'setTrayUrl',
            'format' => 'setFormat'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'campaign_id' => 'getCampaignId',
            'hide_opt_out' => 'getHideOptOut',
            'popup_url' => 'getPopupUrl',
            'tray_url' => 'getTrayUrl',
            'format' => 'getFormat'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'campaign_id' => 'hasCampaignId',
            'hide_opt_out' => 'hasHideOptOut',
            'popup_url' => 'hasPopupUrl',
            'tray_url' => 'hasTrayUrl',
            'format' => 'hasFormat'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'campaign_id' => 'validateCampaignId',
            'hide_opt_out' => 'validateHideOptOut',
            'popup_url' => 'validatePopupUrl',
            'tray_url' => 'validateTrayUrl',
            'format' => 'validateFormat'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateCampaignId())) {
            $invalid_properties[] = $this->validateCampaignId();
        }
        if (!empty($this->validateHideOptOut())) {
            $invalid_properties[] = $this->validateHideOptOut();
        }
        if (!empty($this->validatePopupUrl())) {
            $invalid_properties[] = $this->validatePopupUrl();
        }
        if (!empty($this->validateTrayUrl())) {
            $invalid_properties[] = $this->validateTrayUrl();
        }
        if (!empty($this->validateFormat())) {
            $invalid_properties[] = $this->validateFormat();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateCampaignId())) {
            return false;
        }
        if (!empty($this->validateHideOptOut())) {
            return false;
        }
        if (!empty($this->validatePopupUrl())) {
            return false;
        }
        if (!empty($this->validateTrayUrl())) {
            return false;
        }
        if (!empty($this->validateFormat())) {
            return false;
        }
        return true;
    }


    /**
     * Gets campaign_id
     * @return string
     */
    public function getCampaignId()
    {
        return $this->offsetGet('campaign_id');
    }

    /**
     * Checks campaign_id
     * @return boolean
     */
    public function hasCampaignId()
    {
        return $this->offsetExists('campaign_id');
    }

    /**
     * Sets campaign_id
     * @param string $campaign_id
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        if ((strlen($campaign_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $campaign_id when calling Notification., must be smaller than or equal to 36.');
        }
        if ((strlen($campaign_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $campaign_id when calling Notification., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $campaign_id))) {
            throw new \InvalidArgumentException("invalid value for $campaign_id when calling Notification., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('campaign_id', $campaign_id);

        return $this;
    }

    /**
     * Unset campaign_id
     */
    public function unsetCampaignId() {
        $this->offsetUnset('campaign_id');
    }

    /**
     * Valid campaign_id
     * @return array|boolean
     */
    public function validateCampaignId()
    {
        if (!$this->offsetExists('campaign_id')) {
            return "Property 'campaign_id' was not initialized.";
        }
            if ($this->offsetExists('campaign_id') && strlen($this->offsetGet('campaign_id')) > 36) {
                return "invalid value for 'campaign_id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('campaign_id') && strlen($this->offsetGet('campaign_id')) < 36) {
                return "invalid value for 'campaign_id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('campaign_id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('campaign_id'))) {
                return "invalid value for 'campaign_id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets hide_opt_out
     * @return bool
     */
    public function getHideOptOut()
    {
        return $this->offsetGet('hide_opt_out');
    }

    /**
     * Checks hide_opt_out
     * @return boolean
     */
    public function hasHideOptOut()
    {
        return $this->offsetExists('hide_opt_out');
    }

    /**
     * Sets hide_opt_out
     * @param bool $hide_opt_out Flag, if true then opt-out option must be hidden for customer
     * @return $this
     */
    public function setHideOptOut($hide_opt_out)
    {
        $this->offsetSet('hide_opt_out', $hide_opt_out);

        return $this;
    }

    /**
     * Unset hide_opt_out
     */
    public function unsetHideOptOut() {
        $this->offsetUnset('hide_opt_out');
    }

    /**
     * Valid hide_opt_out
     * @return array|boolean
     */
    public function validateHideOptOut()
    {
        if (!$this->offsetExists('hide_opt_out')) {
            return "Property 'hide_opt_out' was not initialized.";
        }
        return false;
    }


    /**
     * Gets popup_url
     * @return string
     */
    public function getPopupUrl()
    {
        return $this->offsetGet('popup_url');
    }

    /**
     * Checks popup_url
     * @return boolean
     */
    public function hasPopupUrl()
    {
        return $this->offsetExists('popup_url');
    }

    /**
     * Sets popup_url
     * @param string $popup_url URL of popup which will be shown in backup console
     * @return $this
     */
    public function setPopupUrl($popup_url)
    {
        $this->offsetSet('popup_url', $popup_url);

        return $this;
    }

    /**
     * Unset popup_url
     */
    public function unsetPopupUrl() {
        $this->offsetUnset('popup_url');
    }

    /**
     * Valid popup_url
     * @return array|boolean
     */
    public function validatePopupUrl()
    {
        if (!$this->offsetExists('popup_url')) {
            return "Property 'popup_url' was not initialized.";
        }
        return false;
    }


    /**
     * Gets tray_url
     * @return string
     */
    public function getTrayUrl()
    {
        return $this->offsetGet('tray_url');
    }

    /**
     * Checks tray_url
     * @return boolean
     */
    public function hasTrayUrl()
    {
        return $this->offsetExists('tray_url');
    }

    /**
     * Sets tray_url
     * @param string $tray_url URL of tray screen which will be shown in backup web tray
     * @return $this
     */
    public function setTrayUrl($tray_url)
    {
        $this->offsetSet('tray_url', $tray_url);

        return $this;
    }

    /**
     * Unset tray_url
     */
    public function unsetTrayUrl() {
        $this->offsetUnset('tray_url');
    }

    /**
     * Valid tray_url
     * @return array|boolean
     */
    public function validateTrayUrl()
    {
        if (!$this->offsetExists('tray_url')) {
            return "Property 'tray_url' was not initialized.";
        }
        return false;
    }


    /**
     * Gets format
     * @return string
     */
    public function getFormat()
    {
        return $this->offsetGet('format');
    }

    /**
     * Checks format
     * @return boolean
     */
    public function hasFormat()
    {
        return $this->offsetExists('format');
    }

    /**
     * Sets format
     * @param string $format Notification display format specification
     * @return $this
     */
    public function setFormat($format)
    {
        $this->offsetSet('format', $format);

        return $this;
    }

    /**
     * Unset format
     */
    public function unsetFormat() {
        $this->offsetUnset('format');
    }

    /**
     * Valid format
     * @return array|boolean
     */
    public function validateFormat()
    {
        if (!$this->offsetExists('format')) {
            return "Property 'format' was not initialized.";
        }
        return false;
    }

}


