<?php
/**
 * Version
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Version;

use Acronis\Cloud\Client\BaseModel;
/**
 * Version Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Version extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Version\Version';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'application' => '\Acronis\Cloud\Client\Model\Version\VersionApplication',
            'components' => '\Acronis\Cloud\Client\Model\Version\VersionComponent[]'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'application' => null,
            'components' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'application' => 'application',
            'components' => 'components'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'application' => 'setApplication',
            'components' => 'setComponents'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'application' => 'getApplication',
            'components' => 'getComponents'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'application' => 'hasApplication',
            'components' => 'hasComponents'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'application' => 'validateApplication',
            'components' => 'validateComponents'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateApplication())) {
            $invalid_properties[] = $this->validateApplication();
        }
        if (!empty($this->validateComponents())) {
            $invalid_properties[] = $this->validateComponents();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateApplication())) {
            return false;
        }
        if (!empty($this->validateComponents())) {
            return false;
        }
        return true;
    }


    /**
     * Gets application
     * @return \Acronis\Cloud\Client\Model\Version\VersionApplication
     */
    public function getApplication()
    {
        return $this->offsetGet('application');
    }

    /**
     * Checks application
     * @return boolean
     */
    public function hasApplication()
    {
        return $this->offsetExists('application');
    }

    /**
     * Sets application
     * @param \Acronis\Cloud\Client\Model\Version\VersionApplication $application
     * @return $this
     */
    public function setApplication($application)
    {
        $this->offsetSet('application', $application);

        return $this;
    }

    /**
     * Unset application
     */
    public function unsetApplication() {
        $this->offsetUnset('application');
    }

    /**
     * Valid application
     * @return array|boolean
     */
    public function validateApplication()
    {
        if (!$this->offsetExists('application')) {
            return "Property 'application' was not initialized.";
        }
        return false;
    }


    /**
     * Gets components
     * @return \Acronis\Cloud\Client\Model\Version\VersionComponent[]
     */
    public function getComponents()
    {
        return $this->offsetGet('components');
    }

    /**
     * Checks components
     * @return boolean
     */
    public function hasComponents()
    {
        return $this->offsetExists('components');
    }

    /**
     * Sets components
     * @param \Acronis\Cloud\Client\Model\Version\VersionComponent[] $components
     * @return $this
     */
    public function setComponents($components)
    {
        $this->offsetSet('components', $components);

        return $this;
    }

    /**
     * Unset components
     */
    public function unsetComponents() {
        $this->offsetUnset('components');
    }

    /**
     * Valid components
     * @return array|boolean
     */
    public function validateComponents()
    {
        if (!$this->offsetExists('components')) {
            return "Property 'components' was not initialized.";
        }
        return false;
    }

}


