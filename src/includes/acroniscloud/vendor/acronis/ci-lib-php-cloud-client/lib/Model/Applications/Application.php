<?php
/**
 * Application
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\Applications;

use Acronis\Cloud\Client\BaseModel;
/**
 * Application Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Application extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Applications\Application';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'id' => 'string',
            'name' => 'string',
            'type' => 'string',
            'usages' => 'string[]',
            'api_base_url' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'id' => null,
            'name' => null,
            'type' => null,
            'usages' => null,
            'api_base_url' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'id' => 'id',
            'name' => 'name',
            'type' => 'type',
            'usages' => 'usages',
            'api_base_url' => 'api_base_url'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'id' => 'setId',
            'name' => 'setName',
            'type' => 'setType',
            'usages' => 'setUsages',
            'api_base_url' => 'setApiBaseUrl'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'id' => 'getId',
            'name' => 'getName',
            'type' => 'getType',
            'usages' => 'getUsages',
            'api_base_url' => 'getApiBaseUrl'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'id' => 'hasId',
            'name' => 'hasName',
            'type' => 'hasType',
            'usages' => 'hasUsages',
            'api_base_url' => 'hasApiBaseUrl'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'id' => 'validateId',
            'name' => 'validateName',
            'type' => 'validateType',
            'usages' => 'validateUsages',
            'api_base_url' => 'validateApiBaseUrl'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateId())) {
            $invalid_properties[] = $this->validateId();
        }
        if (!empty($this->validateName())) {
            $invalid_properties[] = $this->validateName();
        }
        if (!empty($this->validateType())) {
            $invalid_properties[] = $this->validateType();
        }
        if (!empty($this->validateUsages())) {
            $invalid_properties[] = $this->validateUsages();
        }
        if (!empty($this->validateApiBaseUrl())) {
            $invalid_properties[] = $this->validateApiBaseUrl();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateId())) {
            return false;
        }
        if (!empty($this->validateName())) {
            return false;
        }
        if (!empty($this->validateType())) {
            return false;
        }
        if (!empty($this->validateUsages())) {
            return false;
        }
        if (!empty($this->validateApiBaseUrl())) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->offsetGet('id');
    }

    /**
     * Checks id
     * @return boolean
     */
    public function hasId()
    {
        return $this->offsetExists('id');
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        if ((strlen($id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Application., must be smaller than or equal to 36.');
        }
        if ((strlen($id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Application., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling Application., must conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.");
        }

        $this->offsetSet('id', $id);

        return $this;
    }

    /**
     * Unset id
     */
    public function unsetId() {
        $this->offsetUnset('id');
    }

    /**
     * Valid id
     * @return array|boolean
     */
    public function validateId()
    {
        if (!$this->offsetExists('id')) {
            return "Property 'id' was not initialized.";
        }
            if ($this->offsetExists('id') && strlen($this->offsetGet('id')) > 36) {
                return "invalid value for 'id', the character length must be smaller than or equal to 36.";
            }
            if ($this->offsetExists('id') && strlen($this->offsetGet('id')) < 36) {
                return "invalid value for 'id', the character length must be bigger than or equal to 36.";
            }
            if ($this->offsetExists('id') && !preg_match("/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/", $this->offsetGet('id'))) {
                return "invalid value for 'id', must be conform to the pattern /[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/.";
            }
        return false;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->offsetGet('name');
    }

    /**
     * Checks name
     * @return boolean
     */
    public function hasName()
    {
        return $this->offsetExists('name');
    }

    /**
     * Sets name
     * @param string $name Human-readable name that will be displayed to the users
     * @return $this
     */
    public function setName($name)
    {
        $this->offsetSet('name', $name);

        return $this;
    }

    /**
     * Unset name
     */
    public function unsetName() {
        $this->offsetUnset('name');
    }

    /**
     * Valid name
     * @return array|boolean
     */
    public function validateName()
    {
        if (!$this->offsetExists('name')) {
            return "Property 'name' was not initialized.";
        }
        return false;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->offsetGet('type');
    }

    /**
     * Checks type
     * @return boolean
     */
    public function hasType()
    {
        return $this->offsetExists('type');
    }

    /**
     * Sets type
     * @param string $type Current implementations supports following values: backup, files-cloud, monitoring, storage
     * @return $this
     */
    public function setType($type)
    {
        $this->offsetSet('type', $type);

        return $this;
    }

    /**
     * Unset type
     */
    public function unsetType() {
        $this->offsetUnset('type');
    }

    /**
     * Valid type
     * @return array|boolean
     */
    public function validateType()
    {
        if (!$this->offsetExists('type')) {
            return "Property 'type' was not initialized.";
        }
        return false;
    }


    /**
     * Gets usages
     * @return string[]
     */
    public function getUsages()
    {
        return $this->offsetGet('usages');
    }

    /**
     * Checks usages
     * @return boolean
     */
    public function hasUsages()
    {
        return $this->offsetExists('usages');
    }

    /**
     * Sets usages
     * @param string[] $usages Available usages for this application
     * @return $this
     */
    public function setUsages($usages)
    {
        $this->offsetSet('usages', $usages);

        return $this;
    }

    /**
     * Unset usages
     */
    public function unsetUsages() {
        $this->offsetUnset('usages');
    }

    /**
     * Valid usages
     * @return array|boolean
     */
    public function validateUsages()
    {
        if (!$this->offsetExists('usages')) {
            return "Property 'usages' was not initialized.";
        }
        return false;
    }


    /**
     * Gets api_base_url
     * @return string
     */
    public function getApiBaseUrl()
    {
        return $this->offsetGet('api_base_url');
    }

    /**
     * Checks api_base_url
     * @return boolean
     */
    public function hasApiBaseUrl()
    {
        return $this->offsetExists('api_base_url');
    }

    /**
     * Sets api_base_url
     * @param string $api_base_url Base URL for application's HTTP API
     * @return $this
     */
    public function setApiBaseUrl($api_base_url)
    {
        $this->offsetSet('api_base_url', $api_base_url);

        return $this;
    }

    /**
     * Unset api_base_url
     */
    public function unsetApiBaseUrl() {
        $this->offsetUnset('api_base_url');
    }

    /**
     * Valid api_base_url
     * @return array|boolean
     */
    public function validateApiBaseUrl()
    {
        if (!$this->offsetExists('api_base_url')) {
            return "Property 'api_base_url' was not initialized.";
        }
        return false;
    }

}


