<?php
/**
 * AccessPolicyPostResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acronis\Cloud\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API v2 description for Multi-service Portal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acronis\Cloud\Client\Model\AccessPolicies;

use Acronis\Cloud\Client\BaseModel;
/**
 * AccessPolicyPostResource Class Doc Comment
 *
 * @category    Class
 * @package     Acronis\Cloud\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AccessPolicyPostResource extends BaseModel 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AccessPolicies\AccessPolicyPostResource';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerTypes()
    {
        return [
            'resource_id' => 'string',
            'resource_server_id' => 'string',
            'scope_type' => 'string'
        ];
    }


    /**
     * Array of property to format mappings. Used for (de)serialization
     * @return array
     */
    public static function swaggerFormats()
    {
        return [
            'resource_id' => null,
            'resource_server_id' => null,
            'scope_type' => null
        ];
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @return array
     */
    public static function attributeMap()
    {
        return [
            'resource_id' => 'resource_id',
            'resource_server_id' => 'resource_server_id',
            'scope_type' => 'scope_type'
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @return array
     */
    public static function setters()
    {
        return [
            'resource_id' => 'setResourceId',
            'resource_server_id' => 'setResourceServerId',
            'scope_type' => 'setScopeType'
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @return array
     */
    public static function getters()
    {
        return [
            'resource_id' => 'getResourceId',
            'resource_server_id' => 'getResourceServerId',
            'scope_type' => 'getScopeType'
        ];
    }

    /**
     * Array of attributes to checkers functions (for deserialization of responses)
     * @return array
     */
    public static function checkers()
    {
        return [
            'resource_id' => 'hasResourceId',
            'resource_server_id' => 'hasResourceServerId',
            'scope_type' => 'hasScopeType'
        ];
    }

    /**
     * Array of attributes to validators functions (for deserialization of responses)
     * @return array
     */
    public static function validators() {
        return [
            'resource_id' => 'validateResourceId',
            'resource_server_id' => 'validateResourceServerId',
            'scope_type' => 'validateScopeType'
        ];
    }

    

    

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!empty($this->validateResourceId())) {
            $invalid_properties[] = $this->validateResourceId();
        }
        if (!empty($this->validateResourceServerId())) {
            $invalid_properties[] = $this->validateResourceServerId();
        }
        if (!empty($this->validateScopeType())) {
            $invalid_properties[] = $this->validateScopeType();
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        if (!empty($this->validateResourceId())) {
            return false;
        }
        if (!empty($this->validateResourceServerId())) {
            return false;
        }
        if (!empty($this->validateScopeType())) {
            return false;
        }
        return true;
    }


    /**
     * Gets resource_id
     * @return string
     */
    public function getResourceId()
    {
        return $this->offsetGet('resource_id');
    }

    /**
     * Checks resource_id
     * @return boolean
     */
    public function hasResourceId()
    {
        return $this->offsetExists('resource_id');
    }

    /**
     * Sets resource_id
     * @param string $resource_id Unique identifier of resource.
     * @return $this
     */
    public function setResourceId($resource_id)
    {
        $this->offsetSet('resource_id', $resource_id);

        return $this;
    }

    /**
     * Unset resource_id
     */
    public function unsetResourceId() {
        $this->offsetUnset('resource_id');
    }

    /**
     * Valid resource_id
     * @return array|boolean
     */
    public function validateResourceId()
    {
        if (!$this->offsetExists('resource_id')) {
            return "Property 'resource_id' was not initialized.";
        }
        return false;
    }


    /**
     * Gets resource_server_id
     * @return string
     */
    public function getResourceServerId()
    {
        return $this->offsetGet('resource_server_id');
    }

    /**
     * Checks resource_server_id
     * @return boolean
     */
    public function hasResourceServerId()
    {
        return $this->offsetExists('resource_server_id');
    }

    /**
     * Sets resource_server_id
     * @param string $resource_server_id Unique identifier of resource server.
     * @return $this
     */
    public function setResourceServerId($resource_server_id)
    {
        $this->offsetSet('resource_server_id', $resource_server_id);

        return $this;
    }

    /**
     * Unset resource_server_id
     */
    public function unsetResourceServerId() {
        $this->offsetUnset('resource_server_id');
    }

    /**
     * Valid resource_server_id
     * @return array|boolean
     */
    public function validateResourceServerId()
    {
        if (!$this->offsetExists('resource_server_id')) {
            return "Property 'resource_server_id' was not initialized.";
        }
        return false;
    }


    /**
     * Gets scope_type
     * @return string
     */
    public function getScopeType()
    {
        return $this->offsetGet('scope_type');
    }

    /**
     * Checks scope_type
     * @return boolean
     */
    public function hasScopeType()
    {
        return $this->offsetExists('scope_type');
    }

    /**
     * Sets scope_type
     * @param string $scope_type Type of scope
     * @return $this
     */
    public function setScopeType($scope_type)
    {
        $this->offsetSet('scope_type', $scope_type);

        return $this;
    }

    /**
     * Unset scope_type
     */
    public function unsetScopeType() {
        $this->offsetUnset('scope_type');
    }

    /**
     * Valid scope_type
     * @return array|boolean
     */
    public function validateScopeType()
    {
        if (!$this->offsetExists('scope_type')) {
            return "Property 'scope_type' was not initialized.";
        }
        return false;
    }

}


